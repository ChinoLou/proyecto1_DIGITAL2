

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Mar 08 22:01:37 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	intentry,global,class=CODE,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     
    48                           ; Version 2.05
    49                           ; Generated 20/12/2018 GMT
    50                           ; 
    51                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC16F887 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0008                     	;# 
    91  0009                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  000D                     	;# 
    96  000E                     	;# 
    97  000E                     	;# 
    98  000F                     	;# 
    99  0010                     	;# 
   100  0011                     	;# 
   101  0012                     	;# 
   102  0013                     	;# 
   103  0014                     	;# 
   104  0015                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001B                     	;# 
   112  001B                     	;# 
   113  001C                     	;# 
   114  001D                     	;# 
   115  001E                     	;# 
   116  001F                     	;# 
   117  0081                     	;# 
   118  0085                     	;# 
   119  0086                     	;# 
   120  0087                     	;# 
   121  0088                     	;# 
   122  0089                     	;# 
   123  008C                     	;# 
   124  008D                     	;# 
   125  008E                     	;# 
   126  008F                     	;# 
   127  0090                     	;# 
   128  0091                     	;# 
   129  0092                     	;# 
   130  0093                     	;# 
   131  0093                     	;# 
   132  0093                     	;# 
   133  0094                     	;# 
   134  0095                     	;# 
   135  0096                     	;# 
   136  0097                     	;# 
   137  0098                     	;# 
   138  0099                     	;# 
   139  009A                     	;# 
   140  009B                     	;# 
   141  009C                     	;# 
   142  009D                     	;# 
   143  009E                     	;# 
   144  009F                     	;# 
   145  0105                     	;# 
   146  0107                     	;# 
   147  0108                     	;# 
   148  0109                     	;# 
   149  010C                     	;# 
   150  010C                     	;# 
   151  010D                     	;# 
   152  010E                     	;# 
   153  010F                     	;# 
   154  0185                     	;# 
   155  0187                     	;# 
   156  0188                     	;# 
   157  0189                     	;# 
   158  018C                     	;# 
   159  018D                     	;# 
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0008                     	;# 
   169  0009                     	;# 
   170  000A                     	;# 
   171  000B                     	;# 
   172  000C                     	;# 
   173  000D                     	;# 
   174  000E                     	;# 
   175  000E                     	;# 
   176  000F                     	;# 
   177  0010                     	;# 
   178  0011                     	;# 
   179  0012                     	;# 
   180  0013                     	;# 
   181  0014                     	;# 
   182  0015                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  001D                     	;# 
   193  001E                     	;# 
   194  001F                     	;# 
   195  0081                     	;# 
   196  0085                     	;# 
   197  0086                     	;# 
   198  0087                     	;# 
   199  0088                     	;# 
   200  0089                     	;# 
   201  008C                     	;# 
   202  008D                     	;# 
   203  008E                     	;# 
   204  008F                     	;# 
   205  0090                     	;# 
   206  0091                     	;# 
   207  0092                     	;# 
   208  0093                     	;# 
   209  0093                     	;# 
   210  0093                     	;# 
   211  0094                     	;# 
   212  0095                     	;# 
   213  0096                     	;# 
   214  0097                     	;# 
   215  0098                     	;# 
   216  0099                     	;# 
   217  009A                     	;# 
   218  009B                     	;# 
   219  009C                     	;# 
   220  009D                     	;# 
   221  009E                     	;# 
   222  009F                     	;# 
   223  0105                     	;# 
   224  0107                     	;# 
   225  0108                     	;# 
   226  0109                     	;# 
   227  010C                     	;# 
   228  010C                     	;# 
   229  010D                     	;# 
   230  010E                     	;# 
   231  010F                     	;# 
   232  0185                     	;# 
   233  0187                     	;# 
   234  0188                     	;# 
   235  0189                     	;# 
   236  018C                     	;# 
   237  018D                     	;# 
   238  0000                     	;# 
   239  0001                     	;# 
   240  0002                     	;# 
   241  0003                     	;# 
   242  0004                     	;# 
   243  0005                     	;# 
   244  0006                     	;# 
   245  0007                     	;# 
   246  0008                     	;# 
   247  0009                     	;# 
   248  000A                     	;# 
   249  000B                     	;# 
   250  000C                     	;# 
   251  000D                     	;# 
   252  000E                     	;# 
   253  000E                     	;# 
   254  000F                     	;# 
   255  0010                     	;# 
   256  0011                     	;# 
   257  0012                     	;# 
   258  0013                     	;# 
   259  0014                     	;# 
   260  0015                     	;# 
   261  0015                     	;# 
   262  0016                     	;# 
   263  0017                     	;# 
   264  0018                     	;# 
   265  0019                     	;# 
   266  001A                     	;# 
   267  001B                     	;# 
   268  001B                     	;# 
   269  001C                     	;# 
   270  001D                     	;# 
   271  001E                     	;# 
   272  001F                     	;# 
   273  0081                     	;# 
   274  0085                     	;# 
   275  0086                     	;# 
   276  0087                     	;# 
   277  0088                     	;# 
   278  0089                     	;# 
   279  008C                     	;# 
   280  008D                     	;# 
   281  008E                     	;# 
   282  008F                     	;# 
   283  0090                     	;# 
   284  0091                     	;# 
   285  0092                     	;# 
   286  0093                     	;# 
   287  0093                     	;# 
   288  0093                     	;# 
   289  0094                     	;# 
   290  0095                     	;# 
   291  0096                     	;# 
   292  0097                     	;# 
   293  0098                     	;# 
   294  0099                     	;# 
   295  009A                     	;# 
   296  009B                     	;# 
   297  009C                     	;# 
   298  009D                     	;# 
   299  009E                     	;# 
   300  009F                     	;# 
   301  0105                     	;# 
   302  0107                     	;# 
   303  0108                     	;# 
   304  0109                     	;# 
   305  010C                     	;# 
   306  010C                     	;# 
   307  010D                     	;# 
   308  010E                     	;# 
   309  010F                     	;# 
   310  0185                     	;# 
   311  0187                     	;# 
   312  0188                     	;# 
   313  0189                     	;# 
   314  018C                     	;# 
   315  018D                     	;# 
   316  0000                     	;# 
   317  0001                     	;# 
   318  0002                     	;# 
   319  0003                     	;# 
   320  0004                     	;# 
   321  0005                     	;# 
   322  0006                     	;# 
   323  0007                     	;# 
   324  0008                     	;# 
   325  0009                     	;# 
   326  000A                     	;# 
   327  000B                     	;# 
   328  000C                     	;# 
   329  000D                     	;# 
   330  000E                     	;# 
   331  000E                     	;# 
   332  000F                     	;# 
   333  0010                     	;# 
   334  0011                     	;# 
   335  0012                     	;# 
   336  0013                     	;# 
   337  0014                     	;# 
   338  0015                     	;# 
   339  0015                     	;# 
   340  0016                     	;# 
   341  0017                     	;# 
   342  0018                     	;# 
   343  0019                     	;# 
   344  001A                     	;# 
   345  001B                     	;# 
   346  001B                     	;# 
   347  001C                     	;# 
   348  001D                     	;# 
   349  001E                     	;# 
   350  001F                     	;# 
   351  0081                     	;# 
   352  0085                     	;# 
   353  0086                     	;# 
   354  0087                     	;# 
   355  0088                     	;# 
   356  0089                     	;# 
   357  008C                     	;# 
   358  008D                     	;# 
   359  008E                     	;# 
   360  008F                     	;# 
   361  0090                     	;# 
   362  0091                     	;# 
   363  0092                     	;# 
   364  0093                     	;# 
   365  0093                     	;# 
   366  0093                     	;# 
   367  0094                     	;# 
   368  0095                     	;# 
   369  0096                     	;# 
   370  0097                     	;# 
   371  0098                     	;# 
   372  0099                     	;# 
   373  009A                     	;# 
   374  009B                     	;# 
   375  009C                     	;# 
   376  009D                     	;# 
   377  009E                     	;# 
   378  009F                     	;# 
   379  0105                     	;# 
   380  0107                     	;# 
   381  0108                     	;# 
   382  0109                     	;# 
   383  010C                     	;# 
   384  010C                     	;# 
   385  010D                     	;# 
   386  010E                     	;# 
   387  010F                     	;# 
   388  0185                     	;# 
   389  0187                     	;# 
   390  0188                     	;# 
   391  0189                     	;# 
   392  018C                     	;# 
   393  018D                     	;# 
   394  0000                     	;# 
   395  0001                     	;# 
   396  0002                     	;# 
   397  0003                     	;# 
   398  0004                     	;# 
   399  0005                     	;# 
   400  0006                     	;# 
   401  0007                     	;# 
   402  0008                     	;# 
   403  0009                     	;# 
   404  000A                     	;# 
   405  000B                     	;# 
   406  000C                     	;# 
   407  000D                     	;# 
   408  000E                     	;# 
   409  000E                     	;# 
   410  000F                     	;# 
   411  0010                     	;# 
   412  0011                     	;# 
   413  0012                     	;# 
   414  0013                     	;# 
   415  0014                     	;# 
   416  0015                     	;# 
   417  0015                     	;# 
   418  0016                     	;# 
   419  0017                     	;# 
   420  0018                     	;# 
   421  0019                     	;# 
   422  001A                     	;# 
   423  001B                     	;# 
   424  001B                     	;# 
   425  001C                     	;# 
   426  001D                     	;# 
   427  001E                     	;# 
   428  001F                     	;# 
   429  0081                     	;# 
   430  0085                     	;# 
   431  0086                     	;# 
   432  0087                     	;# 
   433  0088                     	;# 
   434  0089                     	;# 
   435  008C                     	;# 
   436  008D                     	;# 
   437  008E                     	;# 
   438  008F                     	;# 
   439  0090                     	;# 
   440  0091                     	;# 
   441  0092                     	;# 
   442  0093                     	;# 
   443  0093                     	;# 
   444  0093                     	;# 
   445  0094                     	;# 
   446  0095                     	;# 
   447  0096                     	;# 
   448  0097                     	;# 
   449  0098                     	;# 
   450  0099                     	;# 
   451  009A                     	;# 
   452  009B                     	;# 
   453  009C                     	;# 
   454  009D                     	;# 
   455  009E                     	;# 
   456  009F                     	;# 
   457  0105                     	;# 
   458  0107                     	;# 
   459  0108                     	;# 
   460  0109                     	;# 
   461  010C                     	;# 
   462  010C                     	;# 
   463  010D                     	;# 
   464  010E                     	;# 
   465  010F                     	;# 
   466  0185                     	;# 
   467  0187                     	;# 
   468  0188                     	;# 
   469  0189                     	;# 
   470  018C                     	;# 
   471  018D                     	;# 
   472                           
   473                           	psect	idataBANK0
   474  0B36                     __pidataBANK0:	
   475                           
   476                           ;initializer for _tiempo
   477  0B36  3405               	retlw	5
   478                           
   479                           ;initializer for _jahr
   480  0B37  3414               	retlw	20
   481                           
   482                           ;initializer for _mes
   483  0B38  3403               	retlw	3
   484                           
   485                           ;initializer for _datum
   486  0B39  3406               	retlw	6
   487                           
   488                           ;initializer for _dia
   489  0B3A  3405               	retlw	5
   490                           
   491                           ;initializer for _hora
   492  0B3B  3410               	retlw	16
   493                           
   494                           ;initializer for _min
   495  0B3C  3415               	retlw	21
   496                           
   497                           	psect	strings
   498  0700                     __pstrings:	
   499  0700                     stringtab:	
   500  0700                     __stringtab:	
   501  0700                     stringcode:	
   502                           ;	String table - string pointers are 1 byte each
   503                           
   504  0700                     stringdir:	
   505  0700  3007               	movlw	high stringdir
   506  0701  008A               	movwf	10
   507  0702  0804               	movf	4,w
   508  0703  0A84               	incf	4,f
   509  0704  0782               	addwf	2,f
   510  0705                     __stringbase:	
   511  0705  3400               	retlw	0
   512  0706                     __end_of__stringtab:	
   513  0706                     _gota:	
   514  0706  3404               	retlw	4
   515  0707  340A               	retlw	10
   516  0708  340A               	retlw	10
   517  0709  3411               	retlw	17
   518  070A  3411               	retlw	17
   519  070B  3411               	retlw	17
   520  070C  340E               	retlw	14
   521  070D  3400               	retlw	0
   522  070E                     __end_of_gota:	
   523  070E                     _termometro:	
   524  070E  3404               	retlw	4
   525  070F  340A               	retlw	10
   526  0710  340A               	retlw	10
   527  0711  340E               	retlw	14
   528  0712  340E               	retlw	14
   529  0713  341F               	retlw	31
   530  0714  341F               	retlw	31
   531  0715  340E               	retlw	14
   532  0716                     __end_of_termometro:	
   533  0716                     _atilde:	
   534  0716  3402               	retlw	2
   535  0717  3404               	retlw	4
   536  0718  3400               	retlw	0
   537  0719  340E               	retlw	14
   538  071A  3401               	retlw	1
   539  071B  340F               	retlw	15
   540  071C  3411               	retlw	17
   541  071D  340F               	retlw	15
   542  071E                     __end_of_atilde:	
   543  071E                     _arrowr_vacio:	
   544  071E  3400               	retlw	0
   545  071F  3408               	retlw	8
   546  0720  340C               	retlw	12
   547  0721  340A               	retlw	10
   548  0722  3409               	retlw	9
   549  0723  340A               	retlw	10
   550  0724  340C               	retlw	12
   551  0725  3408               	retlw	8
   552  0726                     __end_of_arrowr_vacio:	
   553  0726                     _arrowr:	
   554  0726  3400               	retlw	0
   555  0727  3408               	retlw	8
   556  0728  340C               	retlw	12
   557  0729  340E               	retlw	14
   558  072A  340F               	retlw	15
   559  072B  340E               	retlw	14
   560  072C  340C               	retlw	12
   561  072D  3408               	retlw	8
   562  072E                     __end_of_arrowr:	
   563  0008                     _PORTD	set	8
   564  0007                     _PORTCbits	set	7
   565  0013                     _SSPBUF	set	19
   566  0014                     _SSPCON	set	20
   567  0006                     _PORTBbits	set	6
   568  000B                     _INTCONbits	set	11
   569  0063                     _SSPIF	set	99
   570  005E                     _PEIE	set	94
   571  005F                     _GIE	set	95
   572  0091                     _SSPCON2bits	set	145
   573  0087                     _TRISCbits	set	135
   574  0094                     _SSPSTAT	set	148
   575  0093                     _SSPADD	set	147
   576  0091                     _SSPCON2	set	145
   577  008F                     _OSCCONbits	set	143
   578  0088                     _TRISD	set	136
   579  0096                     _IOCB	set	150
   580  0081                     _OPTION_REGbits	set	129
   581  0095                     _WPUB	set	149
   582  0086                     _TRISB	set	134
   583  0463                     _SSPIE	set	1123
   584  043C                     _TRISC4	set	1084
   585  043B                     _TRISC3	set	1083
   586  0439                     _TRISC1	set	1081
   587  0438                     _TRISC0	set	1080
   588  0189                     _ANSELH	set	393
   589  072E                     STR_3:	
   590  072E  3454               	retlw	84	;'T'
   591  072F  3465               	retlw	101	;'e'
   592  0730  346D               	retlw	109	;'m'
   593  0731  3470               	retlw	112	;'p'
   594  0732  342E               	retlw	46	;'.'
   595  0733  3420               	retlw	32	;' '
   596  0734  3464               	retlw	100	;'d'
   597  0735  3465               	retlw	101	;'e'
   598  0736  346C               	retlw	108	;'l'
   599  0737  3420               	retlw	32	;' '
   600  0738  3453               	retlw	83	;'S'
   601  0739  3475               	retlw	117	;'u'
   602  073A  3465               	retlw	101	;'e'
   603  073B  346C               	retlw	108	;'l'
   604  073C  346F               	retlw	111	;'o'
   605  073D  343A               	retlw	58	;':'
   606  073E  3400               	retlw	0
   607  073F                     STR_8:	
   608  073F  3473               	retlw	115	;'s'
   609  0740  343A               	retlw	58	;':'
   610  0741  3420               	retlw	32	;' '
   611  0742  347C               	retlw	124	;'|'
   612  0743  3420               	retlw	32	;' '
   613  0744  3446               	retlw	70	;'F'
   614  0745  3472               	retlw	114	;'r'
   615  0746  3465               	retlw	101	;'e'
   616  0747  346E               	retlw	110	;'n'
   617  0748  3474               	retlw	116	;'t'
   618  0749  3465               	retlw	101	;'e'
   619  074A  343A               	retlw	58	;':'
   620  074B  3400               	retlw	0
   621  074C                     STR_11:	
   622  074C  3454               	retlw	84	;'T'
   623  074D  346F               	retlw	111	;'o'
   624  074E  346D               	retlw	109	;'m'
   625  074F  3461               	retlw	97	;'a'
   626  0750  3472               	retlw	114	;'r'
   627  0751  3420               	retlw	32	;' '
   628  0752  3464               	retlw	100	;'d'
   629  0753  3461               	retlw	97	;'a'
   630  0754  3474               	retlw	116	;'t'
   631  0755  346F               	retlw	111	;'o'
   632  0756  3473               	retlw	115	;'s'
   633  0757  343A               	retlw	58	;':'
   634  0758  3400               	retlw	0
   635  0759                     STR_2:	
   636  0759  3441               	retlw	65	;'A'
   637  075A  346D               	retlw	109	;'m'
   638  075B  3462               	retlw	98	;'b'
   639  075C  3469               	retlw	105	;'i'
   640  075D  3465               	retlw	101	;'e'
   641  075E  346E               	retlw	110	;'n'
   642  075F  3474               	retlw	116	;'t'
   643  0760  3465               	retlw	101	;'e'
   644  0761  343A               	retlw	58	;':'
   645  0762  3400               	retlw	0
   646  0763                     STR_5:	
   647  0763  3448               	retlw	72	;'H'
   648  0764  3475               	retlw	117	;'u'
   649  0765  346D               	retlw	109	;'m'
   650  0766  3465               	retlw	101	;'e'
   651  0767  3464               	retlw	100	;'d'
   652  0768  3461               	retlw	97	;'a'
   653  0769  3464               	retlw	100	;'d'
   654  076A  343A               	retlw	58	;':'
   655  076B  3400               	retlw	0
   656  076C                     STR_20:	
   657  076C  3445               	retlw	69	;'E'
   658  076D  3452               	retlw	82	;'R'
   659  076E  3452               	retlw	82	;'R'
   660  076F  344F               	retlw	79	;'O'
   661  0770  3452               	retlw	82	;'R'
   662  0771  3400               	retlw	0
   663  0772                     STR_13:	
   664  0772  3435               	retlw	53	;'5'
   665  0773  3478               	retlw	120	;'x'
   666  0774  3435               	retlw	53	;'5'
   667  0775  3400               	retlw	0
   668  0776                     STR_12:	
   669  0776  346D               	retlw	109	;'m'
   670  0777  3469               	retlw	105	;'i'
   671  0778  346E               	retlw	110	;'n'
   672  0779  3400               	retlw	0
   673  077A                     STR_7:	
   674  077A  3441               	retlw	65	;'A'
   675  077B  3474               	retlw	116	;'t'
   676  077C  3472               	retlw	114	;'r'
   677  077D  3400               	retlw	0
   678  077E                     STR_1:	
   679  077E  3432               	retlw	50	;'2'
   680  077F  3430               	retlw	48	;'0'
   681  0780  3400               	retlw	0
   682  0781                     STR_6:	
   683  0781  3438               	retlw	56	;'8'
   684  0782  3430               	retlw	48	;'0'
   685  0783  3400               	retlw	0
   686  0784                     STR_9:	
   687  0784  3433               	retlw	51	;'3'
   688  0785  3400               	retlw	0
   689  0786                     STR_10:	
   690  0786  3434               	retlw	52	;'4'
   691  0787  3400               	retlw	0
   692  077E                     
   693                           ; #config settings
   694  0000                     
   695                           	psect	cinit
   696  000F                     start_initialization:	
   697  000F                     __initialization:	
   698                           
   699                           ; Initialize objects allocated to BANK0
   700  000F  1383               	bcf	3,7	;select IRP bank0
   701  0010  304E               	movlw	low (__pdataBANK0+7)
   702  0011  00FD               	movwf	btemp+-1
   703  0012  300B               	movlw	high __pidataBANK0
   704  0013  00FE               	movwf	btemp
   705  0014  3036               	movlw	low __pidataBANK0
   706  0015  00FF               	movwf	btemp+1
   707  0016  3047               	movlw	low __pdataBANK0
   708  0017  0084               	movwf	4
   709  0018  120A  158A  2384   	fcall	init_ram0
   710                           
   711                           ; Clear objects allocated to BANK0
   712  001B  01BC               	clrf	__pbssBANK0& (0+127)
   713  001C  01BD               	clrf	(__pbssBANK0+1)& (0+127)
   714  001D  01BE               	clrf	(__pbssBANK0+2)& (0+127)
   715  001E  01BF               	clrf	(__pbssBANK0+3)& (0+127)
   716  001F  01C0               	clrf	(__pbssBANK0+4)& (0+127)
   717  0020  01C1               	clrf	(__pbssBANK0+5)& (0+127)
   718  0021  01C2               	clrf	(__pbssBANK0+6)& (0+127)
   719  0022  01C3               	clrf	(__pbssBANK0+7)& (0+127)
   720  0023  01C4               	clrf	(__pbssBANK0+8)& (0+127)
   721  0024  01C5               	clrf	(__pbssBANK0+9)& (0+127)
   722  0025  01C6               	clrf	(__pbssBANK0+10)& (0+127)
   723                           
   724                           ; Clear objects allocated to COMMON
   725  0026  01FA               	clrf	__pbssCOMMON& (0+127)
   726  0027  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   727  0028                     end_of_initialization:	
   728                           ;End of C runtime variable initialization code
   729                           
   730  0028                     __end_of__initialization:	
   731  0028  0183               	clrf	3
   732  0029  120A  158A  2C00   	ljmp	_main	;jump to C main() function
   733                           
   734                           	psect	bssCOMMON
   735  007A                     __pbssCOMMON:	
   736  007A                     _banderaPUSH1:	
   737  007A                     	ds	1
   738  007B                     _banderaBoton:	
   739  007B                     	ds	1
   740                           
   741                           	psect	bssBANK0
   742  003C                     __pbssBANK0:	
   743  003C                     uint_to_array@F1348:	
   744  003C                     	ds	6
   745  0042                     _banderaPUSH2:	
   746  0042                     	ds	1
   747  0043                     _temp_array:	
   748  0043                     	ds	1
   749  0044                     _temperatura:	
   750  0044                     	ds	1
   751  0045                     _seg:	
   752  0045                     	ds	1
   753  0046                     _estado:	
   754  0046                     	ds	1
   755                           
   756                           	psect	dataBANK0
   757  0047                     __pdataBANK0:	
   758  0047                     _tiempo:	
   759  0047                     	ds	1
   760  0048                     _jahr:	
   761  0048                     	ds	1
   762  0049                     _mes:	
   763  0049                     	ds	1
   764  004A                     _datum:	
   765  004A                     	ds	1
   766  004B                     _dia:	
   767  004B                     	ds	1
   768  004C                     _hora:	
   769  004C                     	ds	1
   770  004D                     _min:	
   771  004D                     	ds	1
   772                           
   773                           	psect	inittext
   774  0B80                     init_fetch0:	
   775                           ;	Called with low address in FSR and high address in W
   776                           
   777  0B80  087E               	movf	126,w
   778  0B81  008A               	movwf	10
   779  0B82  087F               	movf	127,w
   780  0B83  0082               	movwf	2
   781  0B84                     init_ram0:	
   782                           ;Called with:
   783                           ;	high address of idata address in btemp 
   784                           ;	low address of idata address in btemp+1 
   785                           ;	low address of data in FSR
   786                           ;	high address + 1 of data in btemp-1
   787                           
   788  0B84  2380  120A  158A   	fcall	init_fetch0
   789  0B87  0080               	movwf	0
   790  0B88  0A84               	incf	4,f
   791  0B89  0804               	movf	4,w
   792  0B8A  067D               	xorwf	125,w
   793  0B8B  1903               	btfsc	3,2
   794  0B8C  3400               	retlw	0
   795  0B8D  0AFF               	incf	127,f
   796  0B8E  1903               	btfsc	3,2
   797  0B8F  0AFE               	incf	126,f
   798  0B90  2B84               	goto	init_ram0
   799                           
   800                           	psect	cstackCOMMON
   801  0070                     __pcstackCOMMON:	
   802  0070                     ?_SetUp:	
   803  0070                     ?_get_Time:	
   804                           ; 1 bytes @ 0x0
   805                           
   806  0070                     ?_get_Temp:	
   807                           ; 1 bytes @ 0x0
   808                           
   809  0070                     ?_mostrarLCD:	
   810                           ; 1 bytes @ 0x0
   811                           
   812  0070                     ?_pressBoton1:	
   813                           ; 1 bytes @ 0x0
   814                           
   815  0070                     ?_pressBoton2:	
   816                           ; 1 bytes @ 0x0
   817                           
   818  0070                     ?_LCD_init:	
   819                           ; 1 bytes @ 0x0
   820                           
   821  0070                     ?_LCD_clear:	
   822                           ; 1 bytes @ 0x0
   823                           
   824  0070                     ?_LCD_Write_Character:	
   825                           ; 1 bytes @ 0x0
   826                           
   827  0070                     ?_LCD_Write_String:	
   828                           ; 1 bytes @ 0x0
   829                           
   830  0070                     ?_uint_to_array:	
   831                           ; 1 bytes @ 0x0
   832                           
   833  0070                     ?_uint_to_char:	
   834                           ; 1 bytes @ 0x0
   835                           
   836  0070                     ?_I2C_Master_Start:	
   837                           ; 1 bytes @ 0x0
   838                           
   839  0070                     ?_I2C_Master_Stop:	
   840                           ; 1 bytes @ 0x0
   841                           
   842  0070                     ?_ISR:	
   843                           ; 1 bytes @ 0x0
   844                           
   845  0070                     ??_ISR:	
   846                           ; 1 bytes @ 0x0
   847                           
   848  0070                     ?_main:	
   849                           ; 1 bytes @ 0x0
   850                           
   851  0070                     ?_BCD_a_DEC:	
   852                           ; 1 bytes @ 0x0
   853                           
   854  0070                     ?_I2C_Master_Wait:	
   855                           ; 1 bytes @ 0x0
   856                           
   857  0070                     ?_LCD_Cmd:	
   858                           ; 1 bytes @ 0x0
   859                           
   860                           
   861                           ; 1 bytes @ 0x0
   862  0070                     	ds	2
   863  0072                     ?_OSC_config:	
   864  0072                     ??_LCD_Write_Character:	
   865                           ; 1 bytes @ 0x2
   866                           
   867  0072                     ??_uint_to_char:	
   868                           ; 1 bytes @ 0x2
   869                           
   870  0072                     ??_I2C_Master_Start:	
   871                           ; 1 bytes @ 0x2
   872                           
   873  0072                     ?_I2C_Master_Write:	
   874                           ; 1 bytes @ 0x2
   875                           
   876  0072                     ??_I2C_Master_Stop:	
   877                           ; 1 bytes @ 0x2
   878                           
   879  0072                     ??_I2C_Master_Wait:	
   880                           ; 1 bytes @ 0x2
   881                           
   882  0072                     ??_LCD_Cmd:	
   883                           ; 1 bytes @ 0x2
   884                           
   885  0072                     ?___bmul:	
   886                           ; 1 bytes @ 0x2
   887                           
   888  0072                     ?_I2C_Master_Read:	
   889                           ; 1 bytes @ 0x2
   890                           
   891  0072                     ?___wmul:	
   892                           ; 2 bytes @ 0x2
   893                           
   894  0072                     ?___awmod:	
   895                           ; 2 bytes @ 0x2
   896                           
   897  0072                     ?___lldiv:	
   898                           ; 2 bytes @ 0x2
   899                           
   900  0072                     ___bmul@multiplicand:	
   901                           ; 4 bytes @ 0x2
   902                           
   903  0072                     I2C_Master_Write@d:	
   904                           ; 1 bytes @ 0x2
   905                           
   906  0072                     I2C_Master_Read@a:	
   907                           ; 2 bytes @ 0x2
   908                           
   909  0072                     ___wmul@multiplier:	
   910                           ; 2 bytes @ 0x2
   911                           
   912  0072                     ___awmod@divisor:	
   913                           ; 2 bytes @ 0x2
   914                           
   915  0072                     OSC_config@frecuencia:	
   916                           ; 2 bytes @ 0x2
   917                           
   918  0072                     ___lldiv@divisor:	
   919                           ; 4 bytes @ 0x2
   920                           
   921                           
   922                           ; 4 bytes @ 0x2
   923  0072                     	ds	1
   924  0073                     ??___bmul:	
   925  0073                     LCD_Write_Character@caracter:	
   926                           ; 1 bytes @ 0x3
   927                           
   928                           
   929                           ; 1 bytes @ 0x3
   930  0073                     	ds	1
   931  0074                     ??_LCD_Write_String:	
   932  0074                     ??_I2C_Master_Write:	
   933                           ; 1 bytes @ 0x4
   934                           
   935  0074                     ??_I2C_Master_Read:	
   936                           ; 1 bytes @ 0x4
   937                           
   938  0074                     LCD_Cmd@comando:	
   939                           ; 1 bytes @ 0x4
   940                           
   941  0074                     uint_to_char@numero:	
   942                           ; 1 bytes @ 0x4
   943                           
   944  0074                     ___bmul@product:	
   945                           ; 1 bytes @ 0x4
   946                           
   947  0074                     LCD_Write_String@n:	
   948                           ; 1 bytes @ 0x4
   949                           
   950  0074                     ___wmul@multiplicand:	
   951                           ; 2 bytes @ 0x4
   952                           
   953  0074                     ___awmod@dividend:	
   954                           ; 2 bytes @ 0x4
   955                           
   956                           
   957                           ; 2 bytes @ 0x4
   958  0074                     	ds	1
   959  0075                     ??_LCD_init:	
   960  0075                     ?_LCD_Create_Char:	
   961                           ; 1 bytes @ 0x5
   962                           
   963  0075                     ??_LCD_clear:	
   964                           ; 1 bytes @ 0x5
   965                           
   966  0075                     ?_LCD_Set_Cursor:	
   967                           ; 1 bytes @ 0x5
   968                           
   969  0075                     LCD_Set_Cursor@columna:	
   970                           ; 1 bytes @ 0x5
   971                           
   972  0075                     LCD_Create_Char@chardata:	
   973                           ; 1 bytes @ 0x5
   974                           
   975  0075                     uint_to_char@numChr:	
   976                           ; 1 bytes @ 0x5
   977                           
   978  0075                     ___bmul@multiplier:	
   979                           ; 1 bytes @ 0x5
   980                           
   981                           
   982                           ; 1 bytes @ 0x5
   983  0075                     	ds	1
   984  0076                     ??_OSC_config:	
   985  0076                     ??_LCD_Create_Char:	
   986                           ; 1 bytes @ 0x6
   987                           
   988  0076                     ??_LCD_Set_Cursor:	
   989                           ; 1 bytes @ 0x6
   990                           
   991  0076                     ??_BCD_a_DEC:	
   992                           ; 1 bytes @ 0x6
   993                           
   994  0076                     ??___wmul:	
   995                           ; 1 bytes @ 0x6
   996                           
   997  0076                     ??___awmod:	
   998                           ; 1 bytes @ 0x6
   999                           
  1000  0076                     LCD_Write_String@a:	
  1001                           ; 1 bytes @ 0x6
  1002                           
  1003  0076                     I2C_Master_Read@temp:	
  1004                           ; 1 bytes @ 0x6
  1005                           
  1006  0076                     ___wmul@product:	
  1007                           ; 2 bytes @ 0x6
  1008                           
  1009  0076                     ___lldiv@dividend:	
  1010                           ; 2 bytes @ 0x6
  1011                           
  1012                           
  1013                           ; 4 bytes @ 0x6
  1014  0076                     	ds	1
  1015  0077                     ??_pressBoton1:	
  1016  0077                     LCD_Create_Char@charnum:	
  1017                           ; 1 bytes @ 0x7
  1018                           
  1019  0077                     ___awmod@counter:	
  1020                           ; 1 bytes @ 0x7
  1021                           
  1022                           
  1023                           ; 1 bytes @ 0x7
  1024  0077                     	ds	1
  1025  0078                     ??_get_Temp:	
  1026  0078                     ??___awdiv:	
  1027                           ; 1 bytes @ 0x8
  1028                           
  1029  0078                     LCD_Set_Cursor@linea:	
  1030                           ; 1 bytes @ 0x8
  1031                           
  1032  0078                     LCD_Create_Char@n:	
  1033                           ; 1 bytes @ 0x8
  1034                           
  1035  0078                     ___awmod@sign:	
  1036                           ; 1 bytes @ 0x8
  1037                           
  1038                           
  1039                           ; 1 bytes @ 0x8
  1040  0078                     	ds	1
  1041  0079                     BCD_a_DEC@numBCD:	
  1042  0079                     LCD_Set_Cursor@corrimiento:	
  1043                           ; 1 bytes @ 0x9
  1044                           
  1045                           
  1046                           ; 1 bytes @ 0x9
  1047  0079                     	ds	1
  1048                           
  1049                           	psect	cstackBANK0
  1050  0020                     __pcstackBANK0:	
  1051  0020                     ??_get_Time:	
  1052  0020                     ??_pressBoton2:	
  1053                           ; 1 bytes @ 0x0
  1054                           
  1055  0020                     ??___lldiv:	
  1056                           ; 1 bytes @ 0x0
  1057                           
  1058  0020                     ?___awdiv:	
  1059                           ; 1 bytes @ 0x0
  1060                           
  1061  0020                     ___awdiv@divisor:	
  1062                           ; 2 bytes @ 0x0
  1063                           
  1064                           
  1065                           ; 2 bytes @ 0x0
  1066  0020                     	ds	1
  1067  0021                     get_Temp@TempMSB:	
  1068  0021                     ___lldiv@quotient:	
  1069                           ; 1 bytes @ 0x1
  1070                           
  1071                           
  1072                           ; 4 bytes @ 0x1
  1073  0021                     	ds	1
  1074  0022                     ___awdiv@dividend:	
  1075                           
  1076                           ; 2 bytes @ 0x2
  1077  0022                     	ds	2
  1078  0024                     ___awdiv@counter:	
  1079                           
  1080                           ; 1 bytes @ 0x4
  1081  0024                     	ds	1
  1082  0025                     ___lldiv@counter:	
  1083  0025                     ___awdiv@sign:	
  1084                           ; 1 bytes @ 0x5
  1085                           
  1086                           
  1087                           ; 1 bytes @ 0x5
  1088  0025                     	ds	1
  1089  0026                     ?_I2C_Master_Init:	
  1090  0026                     ___awdiv@quotient:	
  1091                           ; 1 bytes @ 0x6
  1092                           
  1093  0026                     I2C_Master_Init@c:	
  1094                           ; 2 bytes @ 0x6
  1095                           
  1096                           
  1097                           ; 4 bytes @ 0x6
  1098  0026                     	ds	2
  1099  0028                     ??_uint_to_array:	
  1100  0028                     ?_display_Uhrzeit:	
  1101                           ; 1 bytes @ 0x8
  1102                           
  1103  0028                     ?_display_Datum:	
  1104                           ; 1 bytes @ 0x8
  1105                           
  1106  0028                     display_Uhrzeit@columna:	
  1107                           ; 1 bytes @ 0x8
  1108                           
  1109  0028                     display_Datum@columna:	
  1110                           ; 1 bytes @ 0x8
  1111                           
  1112                           
  1113                           ; 1 bytes @ 0x8
  1114  0028                     	ds	1
  1115  0029                     ??_display_Uhrzeit:	
  1116  0029                     ??_display_Datum:	
  1117                           ; 1 bytes @ 0x9
  1118                           
  1119                           
  1120                           ; 1 bytes @ 0x9
  1121  0029                     	ds	1
  1122  002A                     ??_I2C_Master_Init:	
  1123                           
  1124                           ; 1 bytes @ 0xA
  1125  002A                     	ds	2
  1126  002C                     display_Uhrzeit@fila:	
  1127  002C                     display_Datum@fila:	
  1128                           ; 1 bytes @ 0xC
  1129                           
  1130                           
  1131                           ; 1 bytes @ 0xC
  1132  002C                     	ds	1
  1133  002D                     display_Uhrzeit@seg_u:	
  1134  002D                     display_Datum@dia_u:	
  1135                           ; 1 bytes @ 0xD
  1136                           
  1137                           
  1138                           ; 1 bytes @ 0xD
  1139  002D                     	ds	1
  1140  002E                     ??_SetUp:	
  1141  002E                     display_Uhrzeit@seg_d:	
  1142                           ; 1 bytes @ 0xE
  1143                           
  1144  002E                     display_Datum@dia_d:	
  1145                           ; 1 bytes @ 0xE
  1146                           
  1147  002E                     uint_to_array@decenas:	
  1148                           ; 1 bytes @ 0xE
  1149                           
  1150                           
  1151                           ; 1 bytes @ 0xE
  1152  002E                     	ds	1
  1153  002F                     display_Uhrzeit@min_u:	
  1154  002F                     display_Datum@mes_u:	
  1155                           ; 1 bytes @ 0xF
  1156                           
  1157  002F                     uint_to_array@resultado:	
  1158                           ; 1 bytes @ 0xF
  1159                           
  1160                           
  1161                           ; 6 bytes @ 0xF
  1162  002F                     	ds	1
  1163  0030                     display_Uhrzeit@min_d:	
  1164  0030                     display_Datum@mes_d:	
  1165                           ; 1 bytes @ 0x10
  1166                           
  1167                           
  1168                           ; 1 bytes @ 0x10
  1169  0030                     	ds	1
  1170  0031                     display_Uhrzeit@Uhr_u:	
  1171  0031                     display_Datum@jahr_u:	
  1172                           ; 1 bytes @ 0x11
  1173                           
  1174                           
  1175                           ; 1 bytes @ 0x11
  1176  0031                     	ds	1
  1177  0032                     display_Uhrzeit@Uhr_d:	
  1178  0032                     display_Datum@jahr_d:	
  1179                           ; 1 bytes @ 0x12
  1180                           
  1181                           
  1182                           ; 1 bytes @ 0x12
  1183  0032                     	ds	3
  1184  0035                     uint_to_array@centenas:	
  1185                           
  1186                           ; 1 bytes @ 0x15
  1187  0035                     	ds	1
  1188  0036                     uint_to_array@numero:	
  1189                           
  1190                           ; 1 bytes @ 0x16
  1191  0036                     	ds	1
  1192  0037                     ??_mostrarLCD:	
  1193                           
  1194                           ; 1 bytes @ 0x17
  1195  0037                     	ds	2
  1196  0039                     mostrarLCD@pantalla:	
  1197                           
  1198                           ; 1 bytes @ 0x19
  1199  0039                     	ds	1
  1200  003A                     mostrarLCD@signo:	
  1201                           
  1202                           ; 1 bytes @ 0x1A
  1203  003A                     	ds	1
  1204  003B                     ??_main:	
  1205                           
  1206                           ; 1 bytes @ 0x1B
  1207  003B                     	ds	1
  1208                           
  1209                           	psect	maintext
  1210  0C00                     __pmaintext:	
  1211 ;;
  1212 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1213 ;;
  1214 ;; *************** function _main *****************
  1215 ;; Defined at:
  1216 ;;		line 113 in file "main_Master.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;		None
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;		None
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  1    wreg      void 
  1223 ;; Registers used:
  1224 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1225 ;; Tracked objects:
  1226 ;;		On entry : B00/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1230 ;;      Params:         0       0       0       0       0
  1231 ;;      Locals:         0       0       0       0       0
  1232 ;;      Temps:          0       1       0       0       0
  1233 ;;      Totals:         0       1       0       0       0
  1234 ;;Total ram usage:        1 bytes
  1235 ;; Hardware stack levels required when called:    5
  1236 ;; This function calls:
  1237 ;;		_SetUp
  1238 ;;		_get_Temp
  1239 ;;		_get_Time
  1240 ;;		_mostrarLCD
  1241 ;;		_pressBoton1
  1242 ;;		_pressBoton2
  1243 ;; This function is called by:
  1244 ;;		Startup code after reset
  1245 ;; This function uses a non-reentrant model
  1246 ;;
  1247                           
  1248                           
  1249                           ;psect for function _main
  1250  0C00                     _main:	
  1251                           
  1252                           ;main_Master.c: 114:     SetUp();
  1253                           
  1254                           ;incstack = 0
  1255                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1256  0C00  120A  118A  2788  120A  158A  	fcall	_SetUp
  1257  0C05                     l3684:	
  1258                           
  1259                           ;main_Master.c: 117:         get_Time();
  1260  0C05  120A  118A  2250  120A  158A  	fcall	_get_Time
  1261                           
  1262                           ;main_Master.c: 118:         temperatura = get_Temp();
  1263  0C0A  120A  158A  2512  120A  158A  	fcall	_get_Temp
  1264  0C0F  1283               	bcf	3,5	;RP0=0, select bank0
  1265  0C10  1303               	bcf	3,6	;RP1=0, select bank0
  1266  0C11  00BB               	movwf	??_main
  1267  0C12  083B               	movf	??_main,w
  1268  0C13  00C4               	movwf	_temperatura
  1269                           
  1270                           ;main_Master.c: 121:         mostrarLCD(estado);
  1271  0C14  0846               	movf	_estado,w
  1272  0C15  120A  118A  202C  120A  158A  	fcall	_mostrarLCD
  1273                           
  1274                           ;main_Master.c: 122:         pressBoton1();
  1275  0C1A  120A  158A  25A4  120A  158A  	fcall	_pressBoton1
  1276                           
  1277                           ;main_Master.c: 123:         pressBoton2();
  1278  0C1F  120A  118A  2672  120A  158A  	fcall	_pressBoton2
  1279  0C24  2C05               	goto	l3684
  1280  0C25                     __end_of_main:	
  1281                           
  1282                           	psect	text1
  1283  0672                     __ptext1:	
  1284 ;; *************** function _pressBoton2 *****************
  1285 ;; Defined at:
  1286 ;;		line 351 in file "main_Master.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;		None
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;		None
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  1    wreg      void 
  1293 ;; Registers used:
  1294 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1300 ;;      Params:         0       0       0       0       0
  1301 ;;      Locals:         0       0       0       0       0
  1302 ;;      Temps:          0       3       0       0       0
  1303 ;;      Totals:         0       3       0       0       0
  1304 ;;Total ram usage:        3 bytes
  1305 ;; Hardware stack levels used:    1
  1306 ;; Hardware stack levels required when called:    3
  1307 ;; This function calls:
  1308 ;;		_LCD_Set_Cursor
  1309 ;;		_LCD_Write_Character
  1310 ;; This function is called by:
  1311 ;;		_main
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           
  1316                           ;psect for function _pressBoton2
  1317  0672                     _pressBoton2:	
  1318                           
  1319                           ;main_Master.c: 352:     if (banderaBoton == 1){
  1320                           
  1321                           ;incstack = 0
  1322                           ; Regs used in _pressBoton2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1323  0672  037B               	decf	_banderaBoton,w
  1324  0673  1D03               	btfss	3,2
  1325  0674  2EEA               	goto	l2862
  1326                           
  1327                           ;main_Master.c: 353:         if (banderaPUSH2 == 0){
  1328  0675  1283               	bcf	3,5	;RP0=0, select bank0
  1329  0676  1303               	bcf	3,6	;RP1=0, select bank0
  1330  0677  0842               	movf	_banderaPUSH2,w
  1331  0678  1D03               	btfss	3,2
  1332  0679  2EEA               	goto	l2862
  1333                           
  1334                           ;main_Master.c: 354:             if (PORTBbits.RB2 == 0){
  1335  067A  1D06               	btfss	6,2	;volatile
  1336  067B  2ED1               	goto	l2854
  1337  067C  2EE4               	goto	l2856
  1338  067D                     l2834:	
  1339                           
  1340                           ;main_Master.c: 357:                         estado = 6;
  1341  067D  3006               	movlw	6
  1342  067E  2E9E               	goto	L2
  1343  067F                     l2836:	
  1344                           ;main_Master.c: 358:                         break;
  1345                           
  1346                           
  1347                           ;main_Master.c: 360:                         LCD_Set_Cursor(2,0);
  1348  067F  01F5               	clrf	LCD_Set_Cursor@columna
  1349  0680  3002               	movlw	2
  1350  0681  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  1351                           
  1352                           ;main_Master.c: 361:                         LCD_Write_Character(1);
  1353  0686  3001               	movlw	1
  1354  0687  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  1355                           
  1356                           ;main_Master.c: 362:                         _delay((unsigned long)((100)*(8000000/4000.
      +                          0)));
  1357  068C  3002               	movlw	2
  1358  068D  1283               	bcf	3,5	;RP0=0, select bank0
  1359  068E  1303               	bcf	3,6	;RP1=0, select bank0
  1360  068F  00A2               	movwf	??_pressBoton2+2
  1361  0690  3004               	movlw	4
  1362  0691  00A1               	movwf	??_pressBoton2+1
  1363  0692  30B9               	movlw	185
  1364  0693  00A0               	movwf	??_pressBoton2
  1365  0694                     u1427:	
  1366  0694  0BA0               	decfsz	??_pressBoton2,f
  1367  0695  2E94               	goto	u1427
  1368  0696  0BA1               	decfsz	??_pressBoton2+1,f
  1369  0697  2E94               	goto	u1427
  1370  0698  0BA2               	decfsz	??_pressBoton2+2,f
  1371  0699  2E94               	goto	u1427
  1372  069A  2E9B               	nop2
  1373                           
  1374                           ;main_Master.c: 363:                         estado = 7;
  1375  069B  3007               	movlw	7
  1376  069C  1283               	bcf	3,5	;RP0=0, select bank0
  1377  069D  1303               	bcf	3,6	;RP1=0, select bank0
  1378  069E                     L2:	
  1379  069E  00A0               	movwf	??_pressBoton2
  1380  069F  0820               	movf	??_pressBoton2,w
  1381  06A0  00C6               	movwf	_estado
  1382                           
  1383                           ;main_Master.c: 364:                         break;
  1384  06A1  2EE4               	goto	l2856
  1385  06A2                     l2844:	
  1386                           
  1387                           ;main_Master.c: 366:                         LCD_Set_Cursor(2,7);
  1388  06A2  3007               	movlw	7
  1389  06A3  00A0               	movwf	??_pressBoton2
  1390  06A4  0820               	movf	??_pressBoton2,w
  1391  06A5  00F5               	movwf	LCD_Set_Cursor@columna
  1392  06A6  3002               	movlw	2
  1393  06A7  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  1394                           
  1395                           ;main_Master.c: 367:                         LCD_Write_Character(1);
  1396  06AC  3001               	movlw	1
  1397  06AD  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  1398                           
  1399                           ;main_Master.c: 368:                         _delay((unsigned long)((100)*(8000000/4000.
      +                          0)));
  1400  06B2  3002               	movlw	2
  1401  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  1402  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  1403  06B5  00A2               	movwf	??_pressBoton2+2
  1404  06B6  3004               	movlw	4
  1405  06B7  00A1               	movwf	??_pressBoton2+1
  1406  06B8  30B9               	movlw	185
  1407  06B9  00A0               	movwf	??_pressBoton2
  1408  06BA                     u1437:	
  1409  06BA  0BA0               	decfsz	??_pressBoton2,f
  1410  06BB  2EBA               	goto	u1437
  1411  06BC  0BA1               	decfsz	??_pressBoton2+1,f
  1412  06BD  2EBA               	goto	u1437
  1413  06BE  0BA2               	decfsz	??_pressBoton2+2,f
  1414  06BF  2EBA               	goto	u1437
  1415  06C0  2EC1               	nop2
  1416                           
  1417                           ;main_Master.c: 369:                         estado = 0;
  1418  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  1419  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  1420  06C3  01C6               	clrf	_estado
  1421                           
  1422                           ;main_Master.c: 370:                         break;
  1423  06C4  2EE4               	goto	l2856
  1424  06C5                     l2852:	
  1425                           
  1426                           ;main_Master.c: 372:                         _delay((unsigned long)((10)*(8000000/4000.0
      +                          )));
  1427  06C5  301A               	movlw	26
  1428  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  1429  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  1430  06C8  00A1               	movwf	??_pressBoton2+1
  1431  06C9  30F7               	movlw	247
  1432  06CA  00A0               	movwf	??_pressBoton2
  1433  06CB                     u1447:	
  1434  06CB  0BA0               	decfsz	??_pressBoton2,f
  1435  06CC  2ECB               	goto	u1447
  1436  06CD  0BA1               	decfsz	??_pressBoton2+1,f
  1437  06CE  2ECB               	goto	u1447
  1438  06CF  2ED0               	nop2
  1439                           
  1440                           ;main_Master.c: 373:                 }
  1441  06D0  2EE4               	goto	l2856
  1442  06D1                     l2854:	
  1443  06D1  0846               	movf	_estado,w
  1444  06D2  00A0               	movwf	??_pressBoton2
  1445  06D3  01A1               	clrf	??_pressBoton2+1
  1446                           
  1447                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1448                           ; Switch size 1, requested type "simple"
  1449                           ; Number of cases is 1, Range of values is 0 to 0
  1450                           ; switch strategies available:
  1451                           ; Name         Instructions Cycles
  1452                           ; simple_byte            4     3 (average)
  1453                           ; direct_byte           11     8 (fixed)
  1454                           ; jumptable            260     6 (fixed)
  1455                           ;	Chosen strategy is simple_byte
  1456  06D4  0821               	movf	??_pressBoton2+1,w
  1457  06D5  3A00               	xorlw	0	; case 0
  1458  06D6  1903               	skipnz
  1459  06D7  2ED9               	goto	l4152
  1460  06D8  2EC5               	goto	l2852
  1461  06D9                     l4152:	
  1462                           
  1463                           ; Switch size 1, requested type "simple"
  1464                           ; Number of cases is 3, Range of values is 5 to 7
  1465                           ; switch strategies available:
  1466                           ; Name         Instructions Cycles
  1467                           ; simple_byte           10     6 (average)
  1468                           ; direct_byte           20    11 (fixed)
  1469                           ; jumptable            263     9 (fixed)
  1470                           ;	Chosen strategy is simple_byte
  1471  06D9  0820               	movf	??_pressBoton2,w
  1472  06DA  3A05               	xorlw	5	; case 5
  1473  06DB  1903               	skipnz
  1474  06DC  2E7D               	goto	l2834
  1475  06DD  3A03               	xorlw	3	; case 6
  1476  06DE  1903               	skipnz
  1477  06DF  2E7F               	goto	l2836
  1478  06E0  3A01               	xorlw	1	; case 7
  1479  06E1  1903               	skipnz
  1480  06E2  2EA2               	goto	l2844
  1481  06E3  2EC5               	goto	l2852
  1482  06E4                     l2856:	
  1483                           
  1484                           ;main_Master.c: 375:                 banderaBoton = 0;
  1485  06E4  01FB               	clrf	_banderaBoton
  1486                           
  1487                           ;main_Master.c: 376:                 banderaPUSH2 = 1;
  1488  06E5  1283               	bcf	3,5	;RP0=0, select bank0
  1489  06E6  1303               	bcf	3,6	;RP1=0, select bank0
  1490  06E7  01C2               	clrf	_banderaPUSH2
  1491  06E8  0AC2               	incf	_banderaPUSH2,f
  1492                           
  1493                           ;main_Master.c: 377:                 INTCONbits.RBIE = 1;
  1494  06E9  158B               	bsf	11,3	;volatile
  1495  06EA                     l2862:	
  1496                           
  1497                           ;main_Master.c: 380:     if (banderaPUSH2 == 1){
  1498  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  1499  06EB  1303               	bcf	3,6	;RP1=0, select bank0
  1500  06EC  0342               	decf	_banderaPUSH2,w
  1501  06ED  1D03               	btfss	3,2
  1502  06EE  0008               	return
  1503                           
  1504                           ;main_Master.c: 381:         if (PORTBbits.RB2 == 1){
  1505  06EF  1D06               	btfss	6,2	;volatile
  1506  06F0  0008               	return
  1507                           
  1508                           ;main_Master.c: 382:         _delay((unsigned long)((10)*(8000000/4000.0)));
  1509  06F1  301A               	movlw	26
  1510  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  1511  06F3  1303               	bcf	3,6	;RP1=0, select bank0
  1512  06F4  00A1               	movwf	??_pressBoton2+1
  1513  06F5  30F7               	movlw	247
  1514  06F6  00A0               	movwf	??_pressBoton2
  1515  06F7                     u1457:	
  1516  06F7  0BA0               	decfsz	??_pressBoton2,f
  1517  06F8  2EF7               	goto	u1457
  1518  06F9  0BA1               	decfsz	??_pressBoton2+1,f
  1519  06FA  2EF7               	goto	u1457
  1520  06FB  2EFC               	nop2
  1521                           
  1522                           ;main_Master.c: 383:         banderaPUSH2 = 0;
  1523  06FC  1283               	bcf	3,5	;RP0=0, select bank0
  1524  06FD  1303               	bcf	3,6	;RP1=0, select bank0
  1525  06FE  01C2               	clrf	_banderaPUSH2
  1526  06FF  0008               	return
  1527  0700                     __end_of_pressBoton2:	
  1528                           
  1529                           	psect	text2
  1530  0DA4                     __ptext2:	
  1531 ;; *************** function _pressBoton1 *****************
  1532 ;; Defined at:
  1533 ;;		line 318 in file "main_Master.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;		None
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;		None
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  1    wreg      void 
  1540 ;; Registers used:
  1541 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1547 ;;      Params:         0       0       0       0       0
  1548 ;;      Locals:         0       0       0       0       0
  1549 ;;      Temps:          2       0       0       0       0
  1550 ;;      Totals:         2       0       0       0       0
  1551 ;;Total ram usage:        2 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; Hardware stack levels required when called:    3
  1554 ;; This function calls:
  1555 ;;		_LCD_clear
  1556 ;; This function is called by:
  1557 ;;		_main
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           
  1562                           ;psect for function _pressBoton1
  1563  0DA4                     _pressBoton1:	
  1564                           
  1565                           ;main_Master.c: 319:     if (banderaBoton == 1){
  1566                           
  1567                           ;incstack = 0
  1568                           ; Regs used in _pressBoton1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1569  0DA4  037B               	decf	_banderaBoton,w
  1570  0DA5  1D03               	btfss	3,2
  1571  0DA6  2DE5               	goto	l2814
  1572                           
  1573                           ;main_Master.c: 320:         if (banderaPUSH1 == 0){
  1574  0DA7  087A               	movf	_banderaPUSH1,w
  1575  0DA8  1D03               	btfss	3,2
  1576  0DA9  2DE5               	goto	l2814
  1577                           
  1578                           ;main_Master.c: 321:             if (PORTBbits.RB1 == 0){
  1579  0DAA  1283               	bcf	3,5	;RP0=0, select bank0
  1580  0DAB  1303               	bcf	3,6	;RP1=0, select bank0
  1581  0DAC  1C86               	btfss	6,1	;volatile
  1582  0DAD  2DD4               	goto	l2806
  1583  0DAE  2DE5               	goto	l2814
  1584  0DAF                     l2790:	
  1585                           
  1586                           ;main_Master.c: 324:                         tiempo ++;
  1587  0DAF  3001               	movlw	1
  1588  0DB0  00F7               	movwf	??_pressBoton1
  1589  0DB1  0877               	movf	??_pressBoton1,w
  1590  0DB2  07C7               	addwf	_tiempo,f
  1591                           
  1592                           ;main_Master.c: 325:                         if (tiempo > 9){
  1593  0DB3  300A               	movlw	10
  1594  0DB4  0247               	subwf	_tiempo,w
  1595  0DB5  1C03               	skipc
  1596  0DB6  2DE1               	goto	l2808
  1597                           
  1598                           ;main_Master.c: 326:                             tiempo = 1;
  1599  0DB7  01C7               	clrf	_tiempo
  1600  0DB8  0AC7               	incf	_tiempo,f
  1601  0DB9  2DE1               	goto	l2808
  1602  0DBA                     l2796:	
  1603                           
  1604                           ;main_Master.c: 330:                         LCD_clear();
  1605  0DBA  120A  158A  2391  120A  158A  	fcall	_LCD_clear
  1606                           
  1607                           ;main_Master.c: 331:                     _delay((unsigned long)((10)*(8000000/4000.0)));
  1608  0DBF  301A               	movlw	26
  1609  0DC0  00F8               	movwf	??_pressBoton1+1
  1610  0DC1  30F8               	movlw	248
  1611  0DC2  00F7               	movwf	??_pressBoton1
  1612  0DC3                     u1467:	
  1613  0DC3  0BF7               	decfsz	??_pressBoton1,f
  1614  0DC4  2DC3               	goto	u1467
  1615  0DC5  0BF8               	decfsz	??_pressBoton1+1,f
  1616  0DC6  2DC3               	goto	u1467
  1617  0DC7  0000               	nop
  1618                           
  1619                           ;main_Master.c: 332:                     estado ++;
  1620  0DC8  3001               	movlw	1
  1621  0DC9  00F7               	movwf	??_pressBoton1
  1622  0DCA  0877               	movf	??_pressBoton1,w
  1623  0DCB  1283               	bcf	3,5	;RP0=0, select bank0
  1624  0DCC  1303               	bcf	3,6	;RP1=0, select bank0
  1625  0DCD  07C6               	addwf	_estado,f
  1626                           
  1627                           ;main_Master.c: 333:                     if (estado > 5){
  1628  0DCE  3006               	movlw	6
  1629  0DCF  0246               	subwf	_estado,w
  1630  0DD0  1C03               	skipc
  1631  0DD1  2DE1               	goto	l2808
  1632                           
  1633                           ;main_Master.c: 334:                         estado = 0;
  1634  0DD2  01C6               	clrf	_estado
  1635  0DD3  2DE1               	goto	l2808
  1636  0DD4                     l2806:	
  1637  0DD4  0846               	movf	_estado,w
  1638  0DD5  00F7               	movwf	??_pressBoton1
  1639  0DD6  01F8               	clrf	??_pressBoton1+1
  1640                           
  1641                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1642                           ; Switch size 1, requested type "simple"
  1643                           ; Number of cases is 1, Range of values is 0 to 0
  1644                           ; switch strategies available:
  1645                           ; Name         Instructions Cycles
  1646                           ; simple_byte            4     3 (average)
  1647                           ; direct_byte           11     8 (fixed)
  1648                           ; jumptable            260     6 (fixed)
  1649                           ;	Chosen strategy is simple_byte
  1650  0DD7  0878               	movf	??_pressBoton1+1,w
  1651  0DD8  3A00               	xorlw	0	; case 0
  1652  0DD9  1903               	skipnz
  1653  0DDA  2DDC               	goto	l4154
  1654  0DDB  2DBA               	goto	l2796
  1655  0DDC                     l4154:	
  1656                           
  1657                           ; Switch size 1, requested type "simple"
  1658                           ; Number of cases is 1, Range of values is 6 to 6
  1659                           ; switch strategies available:
  1660                           ; Name         Instructions Cycles
  1661                           ; simple_byte            4     3 (average)
  1662                           ; direct_byte           14    11 (fixed)
  1663                           ; jumptable            263     9 (fixed)
  1664                           ;	Chosen strategy is simple_byte
  1665  0DDC  0877               	movf	??_pressBoton1,w
  1666  0DDD  3A06               	xorlw	6	; case 6
  1667  0DDE  1903               	skipnz
  1668  0DDF  2DAF               	goto	l2790
  1669  0DE0  2DBA               	goto	l2796
  1670  0DE1                     l2808:	
  1671                           
  1672                           ;main_Master.c: 337:                 banderaBoton = 0;
  1673  0DE1  01FB               	clrf	_banderaBoton
  1674                           
  1675                           ;main_Master.c: 338:                 banderaPUSH1 = 1;
  1676  0DE2  01FA               	clrf	_banderaPUSH1
  1677  0DE3  0AFA               	incf	_banderaPUSH1,f
  1678                           
  1679                           ;main_Master.c: 339:                 INTCONbits.RBIE = 1;
  1680  0DE4  158B               	bsf	11,3	;volatile
  1681  0DE5                     l2814:	
  1682                           
  1683                           ;main_Master.c: 343:     if (banderaPUSH1 == 1){
  1684  0DE5  037A               	decf	_banderaPUSH1,w
  1685  0DE6  1D03               	btfss	3,2
  1686  0DE7  0008               	return
  1687                           
  1688                           ;main_Master.c: 344:         if (PORTBbits.RB1 == 1){
  1689  0DE8  1283               	bcf	3,5	;RP0=0, select bank0
  1690  0DE9  1303               	bcf	3,6	;RP1=0, select bank0
  1691  0DEA  1C86               	btfss	6,1	;volatile
  1692  0DEB  0008               	return
  1693                           
  1694                           ;main_Master.c: 345:         _delay((unsigned long)((10)*(8000000/4000.0)));
  1695  0DEC  301A               	movlw	26
  1696  0DED  00F8               	movwf	??_pressBoton1+1
  1697  0DEE  30F8               	movlw	248
  1698  0DEF  00F7               	movwf	??_pressBoton1
  1699  0DF0                     u1477:	
  1700  0DF0  0BF7               	decfsz	??_pressBoton1,f
  1701  0DF1  2DF0               	goto	u1477
  1702  0DF2  0BF8               	decfsz	??_pressBoton1+1,f
  1703  0DF3  2DF0               	goto	u1477
  1704  0DF4  0000               	nop
  1705                           
  1706                           ;main_Master.c: 346:         banderaPUSH1 = 0;
  1707  0DF5  01FA               	clrf	_banderaPUSH1
  1708  0DF6  0008               	return
  1709  0DF7                     __end_of_pressBoton1:	
  1710                           
  1711                           	psect	text3
  1712  002C                     __ptext3:	
  1713 ;; *************** function _mostrarLCD *****************
  1714 ;; Defined at:
  1715 ;;		line 226 in file "main_Master.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;  pantalla        1    wreg     unsigned char 
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;  pantalla        1   25[BANK0 ] unsigned char 
  1720 ;;  signo           1   26[BANK0 ] unsigned char 
  1721 ;; Return value:  Size  Location     Type
  1722 ;;                  1    wreg      void 
  1723 ;; Registers used:
  1724 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1725 ;; Tracked objects:
  1726 ;;		On entry : 0/0
  1727 ;;		On exit  : 0/0
  1728 ;;		Unchanged: 0/0
  1729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1730 ;;      Params:         0       0       0       0       0
  1731 ;;      Locals:         0       2       0       0       0
  1732 ;;      Temps:          0       2       0       0       0
  1733 ;;      Totals:         0       4       0       0       0
  1734 ;;Total ram usage:        4 bytes
  1735 ;; Hardware stack levels used:    1
  1736 ;; Hardware stack levels required when called:    4
  1737 ;; This function calls:
  1738 ;;		_LCD_Set_Cursor
  1739 ;;		_LCD_Write_Character
  1740 ;;		_LCD_Write_String
  1741 ;;		_display_Datum
  1742 ;;		_display_Uhrzeit
  1743 ;;		_uint_to_array
  1744 ;;		_uint_to_char
  1745 ;; This function is called by:
  1746 ;;		_main
  1747 ;; This function uses a non-reentrant model
  1748 ;;
  1749                           
  1750                           
  1751                           ;psect for function _mostrarLCD
  1752  002C                     _mostrarLCD:	
  1753                           
  1754                           ;incstack = 0
  1755                           ; Regs used in _mostrarLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1756                           ;mostrarLCD@pantalla stored from wreg
  1757  002C  1283               	bcf	3,5	;RP0=0, select bank0
  1758  002D  1303               	bcf	3,6	;RP1=0, select bank0
  1759  002E  00B9               	movwf	mostrarLCD@pantalla
  1760                           
  1761                           ;main_Master.c: 227:     switch(pantalla){
  1762  002F  2A2D               	goto	l3670
  1763  0030                     l3586:	
  1764                           
  1765                           ;main_Master.c: 229:             display_Uhrzeit(2,4);
  1766  0030  3004               	movlw	4
  1767  0031  00B7               	movwf	??_mostrarLCD
  1768  0032  0837               	movf	??_mostrarLCD,w
  1769  0033  00A8               	movwf	display_Uhrzeit@columna
  1770  0034  3002               	movlw	2
  1771  0035  120A  118A  24F4  120A  118A  	fcall	_display_Uhrzeit
  1772                           
  1773                           ;main_Master.c: 230:             display_Datum(1,3);
  1774  003A  3003               	movlw	3
  1775  003B  1283               	bcf	3,5	;RP0=0, select bank0
  1776  003C  1303               	bcf	3,6	;RP1=0, select bank0
  1777  003D  00B7               	movwf	??_mostrarLCD
  1778  003E  0837               	movf	??_mostrarLCD,w
  1779  003F  00A8               	movwf	display_Datum@columna
  1780  0040  3001               	movlw	1
  1781  0041  120A  118A  241C  120A  118A  	fcall	_display_Datum
  1782                           
  1783                           ;main_Master.c: 231:             LCD_Set_Cursor(2, 15);
  1784  0046  300F               	movlw	15
  1785  0047  1283               	bcf	3,5	;RP0=0, select bank0
  1786  0048  1303               	bcf	3,6	;RP1=0, select bank0
  1787  0049  00B7               	movwf	??_mostrarLCD
  1788  004A  0837               	movf	??_mostrarLCD,w
  1789  004B  00F5               	movwf	LCD_Set_Cursor@columna
  1790  004C  3002               	movlw	2
  1791  004D  120A  158A  247D   	fcall	_LCD_Set_Cursor
  1792                           
  1793                           ;main_Master.c: 232:             break;
  1794  0050  0008               	return
  1795  0051                     l3588:	
  1796                           
  1797                           ;main_Master.c: 234:             LCD_Set_Cursor(1,0);
  1798  0051  01F5               	clrf	LCD_Set_Cursor@columna
  1799  0052  3001               	movlw	1
  1800  0053  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  1801                           
  1802                           ;main_Master.c: 235:             LCD_Write_String("Ambiente:");
  1803  0058  3054               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1804  0059  120A  158A  23DE  120A  118A  	fcall	_LCD_Write_String
  1805                           
  1806                           ;main_Master.c: 236:             uint8_t signo = temperatura & 0b10000000;
  1807  005E  1283               	bcf	3,5	;RP0=0, select bank0
  1808  005F  1303               	bcf	3,6	;RP1=0, select bank0
  1809  0060  0844               	movf	_temperatura,w
  1810  0061  3980               	andlw	128
  1811  0062  00B7               	movwf	??_mostrarLCD
  1812  0063  0837               	movf	??_mostrarLCD,w
  1813  0064  00BA               	movwf	mostrarLCD@signo
  1814                           
  1815                           ;main_Master.c: 237:             LCD_Set_Cursor(2,5);
  1816  0065  3005               	movlw	5
  1817  0066  00B7               	movwf	??_mostrarLCD
  1818  0067  0837               	movf	??_mostrarLCD,w
  1819  0068  00F5               	movwf	LCD_Set_Cursor@columna
  1820  0069  3002               	movlw	2
  1821  006A  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  1822                           
  1823                           ;main_Master.c: 238:             LCD_Write_Character(2);
  1824  006F  3002               	movlw	2
  1825  0070  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  1826                           
  1827                           ;main_Master.c: 239:             if (signo){
  1828  0075  1283               	bcf	3,5	;RP0=0, select bank0
  1829  0076  1303               	bcf	3,6	;RP1=0, select bank0
  1830  0077  083A               	movf	mostrarLCD@signo,w
  1831  0078  1903               	btfsc	3,2
  1832  0079  287C               	goto	l3600
  1833                           
  1834                           ;main_Master.c: 240:                 LCD_Write_Character('-');
  1835  007A  302D               	movlw	45
  1836  007B  287D               	goto	L3
  1837  007C                     l3600:	
  1838                           ;main_Master.c: 241:             }
  1839                           
  1840                           
  1841                           ;main_Master.c: 243:                 LCD_Write_Character(' ');
  1842  007C  3020               	movlw	32
  1843  007D                     L3:	
  1844  007D  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  1845                           
  1846                           ;main_Master.c: 245:             temp_array = uint_to_array(temperatura & 0b01111111);
  1847  0082  1283               	bcf	3,5	;RP0=0, select bank0
  1848  0083  1303               	bcf	3,6	;RP1=0, select bank0
  1849  0084  0844               	movf	_temperatura,w
  1850  0085  397F               	andlw	127
  1851  0086  120A  158A  277B  120A  118A  	fcall	_uint_to_array
  1852  008B  1283               	bcf	3,5	;RP0=0, select bank0
  1853  008C  1303               	bcf	3,6	;RP1=0, select bank0
  1854  008D  00B7               	movwf	??_mostrarLCD
  1855  008E  0837               	movf	??_mostrarLCD,w
  1856  008F  00C3               	movwf	_temp_array
  1857                           
  1858                           ;main_Master.c: 246:             LCD_Write_Character(uint_to_char(temp_array[1]));
  1859  0090  0843               	movf	_temp_array,w
  1860  0091  3E02               	addlw	2
  1861  0092  0084               	movwf	4
  1862  0093  1383               	bcf	3,7	;select IRP bank0
  1863  0094  0800               	movf	0,w
  1864  0095  120A  158A  26B2  120A  118A  	fcall	_uint_to_char
  1865  009A  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  1866                           
  1867                           ;main_Master.c: 247:             LCD_Write_Character(uint_to_char(temp_array[2]));
  1868  009F  1283               	bcf	3,5	;RP0=0, select bank0
  1869  00A0  1303               	bcf	3,6	;RP1=0, select bank0
  1870  00A1  0843               	movf	_temp_array,w
  1871  00A2  3E04               	addlw	4
  1872  00A3  0084               	movwf	4
  1873  00A4  1383               	bcf	3,7	;select IRP bank0
  1874  00A5  0800               	movf	0,w
  1875  00A6  120A  158A  26B2  120A  118A  	fcall	_uint_to_char
  1876  00AB  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  1877                           
  1878                           ;main_Master.c: 248:             LCD_Write_Character(223);
  1879  00B0  30DF               	movlw	223
  1880  00B1  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  1881                           
  1882                           ;main_Master.c: 249:             LCD_Write_Character('C');
  1883  00B6  3043               	movlw	67
  1884  00B7  120A  158A  234E   	fcall	_LCD_Write_Character
  1885                           
  1886                           ;main_Master.c: 250:             break;
  1887  00BA  0008               	return
  1888  00BB                     l3612:	
  1889                           
  1890                           ;main_Master.c: 252:             LCD_Set_Cursor(1,0);
  1891  00BB  01F5               	clrf	LCD_Set_Cursor@columna
  1892  00BC  3001               	movlw	1
  1893  00BD  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  1894                           
  1895                           ;main_Master.c: 253:             LCD_Write_String("Temp. del Suelo:");
  1896  00C2  3029               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1897  00C3  120A  158A  23DE  120A  118A  	fcall	_LCD_Write_String
  1898                           
  1899                           ;main_Master.c: 254:             LCD_Set_Cursor(2,6);
  1900  00C8  3006               	movlw	6
  1901  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  1902  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  1903  00CB  00B7               	movwf	??_mostrarLCD
  1904  00CC  0837               	movf	??_mostrarLCD,w
  1905  00CD  00F5               	movwf	LCD_Set_Cursor@columna
  1906  00CE  3002               	movlw	2
  1907  00CF  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  1908                           
  1909                           ;main_Master.c: 255:             LCD_Write_String("20");
  1910  00D4  3079               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1911  00D5  120A  158A  23DE  120A  118A  	fcall	_LCD_Write_String
  1912                           
  1913                           ;main_Master.c: 256:             LCD_Write_Character(223);
  1914  00DA  30DF               	movlw	223
  1915  00DB  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  1916                           
  1917                           ;main_Master.c: 257:             LCD_Write_Character('C');
  1918  00E0  3043               	movlw	67
  1919  00E1  120A  158A  234E   	fcall	_LCD_Write_Character
  1920                           
  1921                           ;main_Master.c: 258:             break;
  1922  00E4  0008               	return
  1923  00E5                     l3618:	
  1924                           
  1925                           ;main_Master.c: 260:             LCD_Set_Cursor(1,0);
  1926  00E5  01F5               	clrf	LCD_Set_Cursor@columna
  1927  00E6  3001               	movlw	1
  1928  00E7  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  1929                           
  1930                           ;main_Master.c: 261:             LCD_Write_String("Humedad:");
  1931  00EC  305E               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1932  00ED  120A  158A  23DE  120A  118A  	fcall	_LCD_Write_String
  1933                           
  1934                           ;main_Master.c: 262:             LCD_Set_Cursor(2,4);
  1935  00F2  3004               	movlw	4
  1936  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1937  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1938  00F5  00B7               	movwf	??_mostrarLCD
  1939  00F6  0837               	movf	??_mostrarLCD,w
  1940  00F7  00F5               	movwf	LCD_Set_Cursor@columna
  1941  00F8  3002               	movlw	2
  1942  00F9  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  1943                           
  1944                           ;main_Master.c: 263:             LCD_Write_Character(3);
  1945  00FE  3003               	movlw	3
  1946  00FF  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  1947                           
  1948                           ;main_Master.c: 264:             LCD_Write_Character(' ');
  1949  0104  3020               	movlw	32
  1950  0105  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  1951                           
  1952                           ;main_Master.c: 265:             LCD_Write_String("80");
  1953  010A  307C               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1954  010B  120A  158A  23DE  120A  118A  	fcall	_LCD_Write_String
  1955                           
  1956                           ;main_Master.c: 266:             LCD_Write_Character('%');
  1957  0110  3025               	movlw	37
  1958  0111  120A  158A  234E   	fcall	_LCD_Write_Character
  1959                           
  1960                           ;main_Master.c: 267:             break;
  1961  0114  0008               	return
  1962  0115                     l3626:	
  1963                           
  1964                           ;main_Master.c: 269:             LCD_Set_Cursor(1,0);
  1965  0115  01F5               	clrf	LCD_Set_Cursor@columna
  1966  0116  3001               	movlw	1
  1967  0117  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  1968                           
  1969                           ;main_Master.c: 270:             LCD_Write_String("Atr");
  1970  011C  3075               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1971  011D  120A  158A  23DE  120A  118A  	fcall	_LCD_Write_String
  1972                           
  1973                           ;main_Master.c: 271:             LCD_Write_Character(0);
  1974  0122  3000               	movlw	0
  1975  0123  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  1976                           
  1977                           ;main_Master.c: 272:             LCD_Write_String("s: | Frente:");
  1978  0128  303A               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1979  0129  120A  158A  23DE  120A  118A  	fcall	_LCD_Write_String
  1980                           
  1981                           ;main_Master.c: 273:             LCD_Set_Cursor(2,2);
  1982  012E  3002               	movlw	2
  1983  012F  1283               	bcf	3,5	;RP0=0, select bank0
  1984  0130  1303               	bcf	3,6	;RP1=0, select bank0
  1985  0131  00B7               	movwf	??_mostrarLCD
  1986  0132  0837               	movf	??_mostrarLCD,w
  1987  0133  00F5               	movwf	LCD_Set_Cursor@columna
  1988  0134  3002               	movlw	2
  1989  0135  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  1990                           
  1991                           ;main_Master.c: 274:             LCD_Write_String("3");
  1992  013A  307F               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1993  013B  120A  158A  23DE  120A  118A  	fcall	_LCD_Write_String
  1994                           
  1995                           ;main_Master.c: 275:             LCD_Write_Character('m');
  1996  0140  306D               	movlw	109
  1997  0141  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  1998                           
  1999                           ;main_Master.c: 276:             LCD_Set_Cursor(2,7);
  2000  0146  3007               	movlw	7
  2001  0147  1283               	bcf	3,5	;RP0=0, select bank0
  2002  0148  1303               	bcf	3,6	;RP1=0, select bank0
  2003  0149  00B7               	movwf	??_mostrarLCD
  2004  014A  0837               	movf	??_mostrarLCD,w
  2005  014B  00F5               	movwf	LCD_Set_Cursor@columna
  2006  014C  3002               	movlw	2
  2007  014D  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  2008                           
  2009                           ;main_Master.c: 277:             LCD_Write_Character('|');
  2010  0152  307C               	movlw	124
  2011  0153  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  2012                           
  2013                           ;main_Master.c: 278:             LCD_Set_Cursor(2,11);
  2014  0158  300B               	movlw	11
  2015  0159  1283               	bcf	3,5	;RP0=0, select bank0
  2016  015A  1303               	bcf	3,6	;RP1=0, select bank0
  2017  015B  00B7               	movwf	??_mostrarLCD
  2018  015C  0837               	movf	??_mostrarLCD,w
  2019  015D  00F5               	movwf	LCD_Set_Cursor@columna
  2020  015E  3002               	movlw	2
  2021  015F  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  2022                           
  2023                           ;main_Master.c: 279:             LCD_Write_String("4");
  2024  0164  3081               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2025  0165  120A  158A  23DE  120A  118A  	fcall	_LCD_Write_String
  2026                           
  2027                           ;main_Master.c: 280:             LCD_Write_Character('m');
  2028  016A  306D               	movlw	109
  2029  016B  120A  158A  234E   	fcall	_LCD_Write_Character
  2030                           
  2031                           ;main_Master.c: 281:             break;
  2032  016E  0008               	return
  2033  016F                     l3642:	
  2034                           
  2035                           ;main_Master.c: 283:             LCD_Set_Cursor(1, 0);
  2036  016F  01F5               	clrf	LCD_Set_Cursor@columna
  2037  0170  3001               	movlw	1
  2038  0171  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  2039                           
  2040                           ;main_Master.c: 284:             LCD_Write_String("Tomar datos:");
  2041  0176  3047               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2042  0177  120A  158A  23DE  120A  118A  	fcall	_LCD_Write_String
  2043                           
  2044                           ;main_Master.c: 285:             LCD_Set_Cursor(2,1);
  2045  017C  01F5               	clrf	LCD_Set_Cursor@columna
  2046  017D  0AF5               	incf	LCD_Set_Cursor@columna,f
  2047  017E  3002               	movlw	2
  2048  017F  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  2049                           
  2050                           ;main_Master.c: 286:             LCD_Write_Character(tiempo + '0');
  2051  0184  1283               	bcf	3,5	;RP0=0, select bank0
  2052  0185  1303               	bcf	3,6	;RP1=0, select bank0
  2053  0186  0847               	movf	_tiempo,w
  2054  0187  3E30               	addlw	48
  2055  0188  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  2056                           
  2057                           ;main_Master.c: 287:             LCD_Write_String("min");
  2058  018D  3071               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2059  018E  120A  158A  23DE  120A  118A  	fcall	_LCD_Write_String
  2060                           
  2061                           ;main_Master.c: 288:             LCD_Set_Cursor(2,8);
  2062  0193  3008               	movlw	8
  2063  0194  1283               	bcf	3,5	;RP0=0, select bank0
  2064  0195  1303               	bcf	3,6	;RP1=0, select bank0
  2065  0196  00B7               	movwf	??_mostrarLCD
  2066  0197  0837               	movf	??_mostrarLCD,w
  2067  0198  00F5               	movwf	LCD_Set_Cursor@columna
  2068  0199  3002               	movlw	2
  2069  019A  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  2070                           
  2071                           ;main_Master.c: 289:             LCD_Write_String("5x5");
  2072  019F  306D               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2073  01A0  120A  158A  23DE   	fcall	_LCD_Write_String
  2074                           
  2075                           ;main_Master.c: 290:             break;
  2076  01A3  0008               	return
  2077  01A4                     l3652:	
  2078                           
  2079                           ;main_Master.c: 292:             LCD_Set_Cursor(1, 0);
  2080  01A4  01F5               	clrf	LCD_Set_Cursor@columna
  2081  01A5  3001               	movlw	1
  2082  01A6  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  2083                           
  2084                           ;main_Master.c: 293:             LCD_Write_String("Tomar datos:");
  2085  01AB  3047               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2086  01AC  120A  158A  23DE  120A  118A  	fcall	_LCD_Write_String
  2087                           
  2088                           ;main_Master.c: 294:             LCD_Set_Cursor(2,0);
  2089  01B1  01F5               	clrf	LCD_Set_Cursor@columna
  2090  01B2  3002               	movlw	2
  2091  01B3  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  2092                           
  2093                           ;main_Master.c: 295:             LCD_Write_Character(4);
  2094  01B8  3004               	movlw	4
  2095  01B9  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  2096                           
  2097                           ;main_Master.c: 296:             LCD_Write_Character(tiempo + '0');
  2098  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  2099  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  2100  01C0  0847               	movf	_tiempo,w
  2101  01C1  3E30               	addlw	48
  2102  01C2  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  2103                           
  2104                           ;main_Master.c: 297:             LCD_Write_String("min");
  2105  01C7  3071               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2106  01C8  120A  158A  23DE  120A  118A  	fcall	_LCD_Write_String
  2107                           
  2108                           ;main_Master.c: 298:             LCD_Set_Cursor(2,8);
  2109  01CD  3008               	movlw	8
  2110  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  2111  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  2112  01D0  00B7               	movwf	??_mostrarLCD
  2113  01D1  0837               	movf	??_mostrarLCD,w
  2114  01D2  00F5               	movwf	LCD_Set_Cursor@columna
  2115  01D3  3002               	movlw	2
  2116  01D4  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  2117                           
  2118                           ;main_Master.c: 299:             LCD_Write_String("5x5");
  2119  01D9  306D               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2120  01DA  120A  158A  23DE   	fcall	_LCD_Write_String
  2121                           
  2122                           ;main_Master.c: 300:             break;
  2123  01DD  0008               	return
  2124  01DE                     l3658:	
  2125                           
  2126                           ;main_Master.c: 302:             LCD_Set_Cursor(1, 0);
  2127  01DE  01F5               	clrf	LCD_Set_Cursor@columna
  2128  01DF  3001               	movlw	1
  2129  01E0  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  2130                           
  2131                           ;main_Master.c: 303:             LCD_Write_String("Tomar datos:");
  2132  01E5  3047               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2133  01E6  120A  158A  23DE  120A  118A  	fcall	_LCD_Write_String
  2134                           
  2135                           ;main_Master.c: 304:             LCD_Set_Cursor(2,0);
  2136  01EB  01F5               	clrf	LCD_Set_Cursor@columna
  2137  01EC  3002               	movlw	2
  2138  01ED  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  2139                           
  2140                           ;main_Master.c: 305:             LCD_Write_Character(' ');
  2141  01F2  3020               	movlw	32
  2142  01F3  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  2143                           
  2144                           ;main_Master.c: 306:             LCD_Write_Character(tiempo + '0');
  2145  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  2146  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  2147  01FA  0847               	movf	_tiempo,w
  2148  01FB  3E30               	addlw	48
  2149  01FC  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  2150                           
  2151                           ;main_Master.c: 307:             LCD_Write_String("min");
  2152  0201  3071               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2153  0202  120A  158A  23DE  120A  118A  	fcall	_LCD_Write_String
  2154                           
  2155                           ;main_Master.c: 308:             LCD_Set_Cursor(2,7);
  2156  0207  3007               	movlw	7
  2157  0208  1283               	bcf	3,5	;RP0=0, select bank0
  2158  0209  1303               	bcf	3,6	;RP1=0, select bank0
  2159  020A  00B7               	movwf	??_mostrarLCD
  2160  020B  0837               	movf	??_mostrarLCD,w
  2161  020C  00F5               	movwf	LCD_Set_Cursor@columna
  2162  020D  3002               	movlw	2
  2163  020E  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  2164                           
  2165                           ;main_Master.c: 309:             LCD_Write_Character(4);
  2166  0213  3004               	movlw	4
  2167  0214  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  2168                           
  2169                           ;main_Master.c: 310:             LCD_Write_String("5x5");
  2170  0219  306D               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2171  021A  120A  158A  23DE   	fcall	_LCD_Write_String
  2172                           
  2173                           ;main_Master.c: 311:             break;
  2174  021D  0008               	return
  2175  021E                     l3668:	
  2176                           
  2177                           ;main_Master.c: 313:             LCD_Set_Cursor(1,9);
  2178  021E  3009               	movlw	9
  2179  021F  00B7               	movwf	??_mostrarLCD
  2180  0220  0837               	movf	??_mostrarLCD,w
  2181  0221  00F5               	movwf	LCD_Set_Cursor@columna
  2182  0222  3001               	movlw	1
  2183  0223  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  2184                           
  2185                           ;main_Master.c: 314:             LCD_Write_String("ERROR");
  2186  0228  3067               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  2187  0229  120A  158A  23DE   	fcall	_LCD_Write_String
  2188                           
  2189                           ;main_Master.c: 315:     }
  2190  022C  0008               	return
  2191  022D                     l3670:	
  2192  022D  0839               	movf	mostrarLCD@pantalla,w
  2193  022E  00B7               	movwf	??_mostrarLCD
  2194  022F  01B8               	clrf	??_mostrarLCD+1
  2195                           
  2196                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2197                           ; Switch size 1, requested type "simple"
  2198                           ; Number of cases is 1, Range of values is 0 to 0
  2199                           ; switch strategies available:
  2200                           ; Name         Instructions Cycles
  2201                           ; simple_byte            4     3 (average)
  2202                           ; direct_byte           11     8 (fixed)
  2203                           ; jumptable            260     6 (fixed)
  2204                           ;	Chosen strategy is simple_byte
  2205  0230  0838               	movf	??_mostrarLCD+1,w
  2206  0231  3A00               	xorlw	0	; case 0
  2207  0232  1903               	skipnz
  2208  0233  2A35               	goto	l4156
  2209  0234  2A1E               	goto	l3668
  2210  0235                     l4156:	
  2211                           
  2212                           ; Switch size 1, requested type "simple"
  2213                           ; Number of cases is 8, Range of values is 0 to 7
  2214                           ; switch strategies available:
  2215                           ; Name         Instructions Cycles
  2216                           ; simple_byte           25    13 (average)
  2217                           ; direct_byte           32     8 (fixed)
  2218                           ; jumptable            260     6 (fixed)
  2219                           ;	Chosen strategy is simple_byte
  2220  0235  0837               	movf	??_mostrarLCD,w
  2221  0236  3A00               	xorlw	0	; case 0
  2222  0237  1903               	skipnz
  2223  0238  2830               	goto	l3586
  2224  0239  3A01               	xorlw	1	; case 1
  2225  023A  1903               	skipnz
  2226  023B  2851               	goto	l3588
  2227  023C  3A03               	xorlw	3	; case 2
  2228  023D  1903               	skipnz
  2229  023E  28BB               	goto	l3612
  2230  023F  3A01               	xorlw	1	; case 3
  2231  0240  1903               	skipnz
  2232  0241  28E5               	goto	l3618
  2233  0242  3A07               	xorlw	7	; case 4
  2234  0243  1903               	skipnz
  2235  0244  2915               	goto	l3626
  2236  0245  3A01               	xorlw	1	; case 5
  2237  0246  1903               	skipnz
  2238  0247  296F               	goto	l3642
  2239  0248  3A03               	xorlw	3	; case 6
  2240  0249  1903               	skipnz
  2241  024A  29A4               	goto	l3652
  2242  024B  3A01               	xorlw	1	; case 7
  2243  024C  1903               	skipnz
  2244  024D  29DE               	goto	l3658
  2245  024E  2A1E               	goto	l3668
  2246  024F  0008               	return
  2247  0250                     __end_of_mostrarLCD:	
  2248                           
  2249                           	psect	text4
  2250  0EB2                     __ptext4:	
  2251 ;; *************** function _uint_to_char *****************
  2252 ;; Defined at:
  2253 ;;		line 124 in file "LCD_8bits.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  numero          1    wreg     unsigned char 
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;  numero          1    4[COMMON] unsigned char 
  2258 ;;  numChr          1    5[COMMON] unsigned char 
  2259 ;; Return value:  Size  Location     Type
  2260 ;;                  1    wreg      unsigned char 
  2261 ;; Registers used:
  2262 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2268 ;;      Params:         0       0       0       0       0
  2269 ;;      Locals:         2       0       0       0       0
  2270 ;;      Temps:          2       0       0       0       0
  2271 ;;      Totals:         4       0       0       0       0
  2272 ;;Total ram usage:        4 bytes
  2273 ;; Hardware stack levels used:    1
  2274 ;; Hardware stack levels required when called:    1
  2275 ;; This function calls:
  2276 ;;		Nothing
  2277 ;; This function is called by:
  2278 ;;		_mostrarLCD
  2279 ;; This function uses a non-reentrant model
  2280 ;;
  2281                           
  2282                           
  2283                           ;psect for function _uint_to_char
  2284  0EB2                     _uint_to_char:	
  2285                           
  2286                           ;incstack = 0
  2287                           ; Regs used in _uint_to_char: [wreg-fsr0h+status,2+status,0]
  2288                           ;uint_to_char@numero stored from wreg
  2289  0EB2  00F4               	movwf	uint_to_char@numero
  2290                           
  2291                           ;LCD_8bits.c: 126:     switch (numero){
  2292  0EB3  2ED9               	goto	l2600
  2293  0EB4                     l2566:	
  2294                           
  2295                           ;LCD_8bits.c: 128:             numChr = 48;
  2296  0EB4  3030               	movlw	48
  2297  0EB5  2ED5               	goto	L19
  2298  0EB6                     l2568:	
  2299                           ;LCD_8bits.c: 129:             break;
  2300                           
  2301                           
  2302                           ;LCD_8bits.c: 131:             numChr = 49;
  2303  0EB6  3031               	movlw	49
  2304  0EB7  2ED5               	goto	L19
  2305  0EB8                     l2570:	
  2306                           ;LCD_8bits.c: 132:             break;
  2307                           
  2308                           
  2309                           ;LCD_8bits.c: 134:             numChr = 50;
  2310  0EB8  3032               	movlw	50
  2311  0EB9  2ED5               	goto	L19
  2312  0EBA                     l2572:	
  2313                           ;LCD_8bits.c: 135:             break;
  2314                           
  2315                           
  2316                           ;LCD_8bits.c: 137:             numChr = 51;
  2317  0EBA  3033               	movlw	51
  2318  0EBB  2ED5               	goto	L19
  2319  0EBC                     l2574:	
  2320                           ;LCD_8bits.c: 138:             break;
  2321                           
  2322                           
  2323                           ;LCD_8bits.c: 140:             numChr = 52;
  2324  0EBC  3034               	movlw	52
  2325  0EBD  2ED5               	goto	L19
  2326  0EBE                     l2576:	
  2327                           ;LCD_8bits.c: 141:             break;
  2328                           
  2329                           
  2330                           ;LCD_8bits.c: 143:             numChr = 53;
  2331  0EBE  3035               	movlw	53
  2332  0EBF  2ED5               	goto	L19
  2333  0EC0                     l2578:	
  2334                           ;LCD_8bits.c: 144:             break;
  2335                           
  2336                           
  2337                           ;LCD_8bits.c: 146:             numChr = 54;
  2338  0EC0  3036               	movlw	54
  2339  0EC1  2ED5               	goto	L19
  2340  0EC2                     l2580:	
  2341                           ;LCD_8bits.c: 147:             break;
  2342                           
  2343                           
  2344                           ;LCD_8bits.c: 149:             numChr = 55;
  2345  0EC2  3037               	movlw	55
  2346  0EC3  2ED5               	goto	L19
  2347  0EC4                     l2582:	
  2348                           ;LCD_8bits.c: 150:             break;
  2349                           
  2350                           
  2351                           ;LCD_8bits.c: 152:             numChr = 56;
  2352  0EC4  3038               	movlw	56
  2353  0EC5  2ED5               	goto	L19
  2354  0EC6                     l2584:	
  2355                           ;LCD_8bits.c: 153:             break;
  2356                           
  2357                           
  2358                           ;LCD_8bits.c: 155:             numChr = 57;
  2359  0EC6  3039               	movlw	57
  2360  0EC7  2ED5               	goto	L19
  2361  0EC8                     l2586:	
  2362                           ;LCD_8bits.c: 156:             break;
  2363                           
  2364                           
  2365                           ;LCD_8bits.c: 158:             numChr = 65;
  2366  0EC8  3041               	movlw	65
  2367  0EC9  2ED5               	goto	L19
  2368  0ECA                     l2588:	
  2369                           ;LCD_8bits.c: 159:             break;
  2370                           
  2371                           
  2372                           ;LCD_8bits.c: 161:             numChr = 66;
  2373  0ECA  3042               	movlw	66
  2374  0ECB  2ED5               	goto	L19
  2375  0ECC                     l2590:	
  2376                           ;LCD_8bits.c: 162:             break;
  2377                           
  2378                           
  2379                           ;LCD_8bits.c: 164:             numChr = 67;
  2380  0ECC  3043               	movlw	67
  2381  0ECD  2ED5               	goto	L19
  2382  0ECE                     l2592:	
  2383                           ;LCD_8bits.c: 165:             break;
  2384                           
  2385                           
  2386                           ;LCD_8bits.c: 167:             numChr = 68;
  2387  0ECE  3044               	movlw	68
  2388  0ECF  2ED5               	goto	L19
  2389  0ED0                     l2594:	
  2390                           ;LCD_8bits.c: 168:             break;
  2391                           
  2392                           
  2393                           ;LCD_8bits.c: 170:             numChr = 69;
  2394  0ED0  3045               	movlw	69
  2395  0ED1  2ED5               	goto	L19
  2396  0ED2                     l2596:	
  2397                           ;LCD_8bits.c: 171:             break;
  2398                           
  2399                           
  2400                           ;LCD_8bits.c: 173:             numChr = 70;
  2401  0ED2  3046               	movlw	70
  2402  0ED3  2ED5               	goto	L19
  2403  0ED4                     l2598:	
  2404                           ;LCD_8bits.c: 174:             break;
  2405                           
  2406                           
  2407                           ;LCD_8bits.c: 176:             numChr = 214;
  2408  0ED4  30D6               	movlw	214
  2409  0ED5                     L19:	
  2410  0ED5  00F2               	movwf	??_uint_to_char
  2411  0ED6  0872               	movf	??_uint_to_char,w
  2412  0ED7  00F5               	movwf	uint_to_char@numChr
  2413                           
  2414                           ;LCD_8bits.c: 177:     }
  2415  0ED8  2F13               	goto	l2602
  2416  0ED9                     l2600:	
  2417  0ED9  0874               	movf	uint_to_char@numero,w
  2418  0EDA  00F2               	movwf	??_uint_to_char
  2419  0EDB  01F3               	clrf	??_uint_to_char+1
  2420                           
  2421                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2422                           ; Switch size 1, requested type "simple"
  2423                           ; Number of cases is 1, Range of values is 0 to 0
  2424                           ; switch strategies available:
  2425                           ; Name         Instructions Cycles
  2426                           ; simple_byte            4     3 (average)
  2427                           ; direct_byte           11     8 (fixed)
  2428                           ; jumptable            260     6 (fixed)
  2429                           ;	Chosen strategy is simple_byte
  2430  0EDC  0873               	movf	??_uint_to_char+1,w
  2431  0EDD  3A00               	xorlw	0	; case 0
  2432  0EDE  1903               	skipnz
  2433  0EDF  2EE1               	goto	l4158
  2434  0EE0  2ED4               	goto	l2598
  2435  0EE1                     l4158:	
  2436                           
  2437                           ; Switch size 1, requested type "simple"
  2438                           ; Number of cases is 16, Range of values is 0 to 15
  2439                           ; switch strategies available:
  2440                           ; Name         Instructions Cycles
  2441                           ; simple_byte           49    25 (average)
  2442                           ; direct_byte           56     8 (fixed)
  2443                           ; jumptable            260     6 (fixed)
  2444                           ;	Chosen strategy is simple_byte
  2445  0EE1  0872               	movf	??_uint_to_char,w
  2446  0EE2  3A00               	xorlw	0	; case 0
  2447  0EE3  1903               	skipnz
  2448  0EE4  2EB4               	goto	l2566
  2449  0EE5  3A01               	xorlw	1	; case 1
  2450  0EE6  1903               	skipnz
  2451  0EE7  2EB6               	goto	l2568
  2452  0EE8  3A03               	xorlw	3	; case 2
  2453  0EE9  1903               	skipnz
  2454  0EEA  2EB8               	goto	l2570
  2455  0EEB  3A01               	xorlw	1	; case 3
  2456  0EEC  1903               	skipnz
  2457  0EED  2EBA               	goto	l2572
  2458  0EEE  3A07               	xorlw	7	; case 4
  2459  0EEF  1903               	skipnz
  2460  0EF0  2EBC               	goto	l2574
  2461  0EF1  3A01               	xorlw	1	; case 5
  2462  0EF2  1903               	skipnz
  2463  0EF3  2EBE               	goto	l2576
  2464  0EF4  3A03               	xorlw	3	; case 6
  2465  0EF5  1903               	skipnz
  2466  0EF6  2EC0               	goto	l2578
  2467  0EF7  3A01               	xorlw	1	; case 7
  2468  0EF8  1903               	skipnz
  2469  0EF9  2EC2               	goto	l2580
  2470  0EFA  3A0F               	xorlw	15	; case 8
  2471  0EFB  1903               	skipnz
  2472  0EFC  2EC4               	goto	l2582
  2473  0EFD  3A01               	xorlw	1	; case 9
  2474  0EFE  1903               	skipnz
  2475  0EFF  2EC6               	goto	l2584
  2476  0F00  3A03               	xorlw	3	; case 10
  2477  0F01  1903               	skipnz
  2478  0F02  2EC8               	goto	l2586
  2479  0F03  3A01               	xorlw	1	; case 11
  2480  0F04  1903               	skipnz
  2481  0F05  2ECA               	goto	l2588
  2482  0F06  3A07               	xorlw	7	; case 12
  2483  0F07  1903               	skipnz
  2484  0F08  2ECC               	goto	l2590
  2485  0F09  3A01               	xorlw	1	; case 13
  2486  0F0A  1903               	skipnz
  2487  0F0B  2ECE               	goto	l2592
  2488  0F0C  3A03               	xorlw	3	; case 14
  2489  0F0D  1903               	skipnz
  2490  0F0E  2ED0               	goto	l2594
  2491  0F0F  3A01               	xorlw	1	; case 15
  2492  0F10  1903               	skipnz
  2493  0F11  2ED2               	goto	l2596
  2494  0F12  2ED4               	goto	l2598
  2495  0F13                     l2602:	
  2496                           
  2497                           ;LCD_8bits.c: 178:     return(numChr);
  2498  0F13  0875               	movf	uint_to_char@numChr,w
  2499  0F14  0008               	return
  2500  0F15                     __end_of_uint_to_char:	
  2501                           
  2502                           	psect	text5
  2503  0F7B                     __ptext5:	
  2504 ;; *************** function _uint_to_array *****************
  2505 ;; Defined at:
  2506 ;;		line 181 in file "LCD_8bits.c"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;  numero          1    wreg     unsigned char 
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;  numero          1   22[BANK0 ] unsigned char 
  2511 ;;  resultado       6   15[BANK0 ] unsigned int [3]
  2512 ;;  centenas        1   21[BANK0 ] unsigned char 
  2513 ;;  decenas         1   14[BANK0 ] unsigned char 
  2514 ;; Return value:  Size  Location     Type
  2515 ;;                  1    wreg      PTR unsigned int 
  2516 ;; Registers used:
  2517 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2518 ;; Tracked objects:
  2519 ;;		On entry : 0/0
  2520 ;;		On exit  : 0/0
  2521 ;;		Unchanged: 0/0
  2522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2523 ;;      Params:         0       0       0       0       0
  2524 ;;      Locals:         0       9       0       0       0
  2525 ;;      Temps:          0       6       0       0       0
  2526 ;;      Totals:         0      15       0       0       0
  2527 ;;Total ram usage:       15 bytes
  2528 ;; Hardware stack levels used:    1
  2529 ;; Hardware stack levels required when called:    2
  2530 ;; This function calls:
  2531 ;;		___awdiv
  2532 ;;		___wmul
  2533 ;; This function is called by:
  2534 ;;		_mostrarLCD
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           
  2539                           ;psect for function _uint_to_array
  2540  0F7B                     _uint_to_array:	
  2541                           
  2542                           ;incstack = 0
  2543                           ; Regs used in _uint_to_array: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2544                           ;uint_to_array@numero stored from wreg
  2545  0F7B  1283               	bcf	3,5	;RP0=0, select bank0
  2546  0F7C  1303               	bcf	3,6	;RP1=0, select bank0
  2547  0F7D  00B6               	movwf	uint_to_array@numero
  2548                           
  2549                           ;LCD_8bits.c: 182:     uint16_t resultado[3] = {0,0,0};
  2550  0F7E  302F               	movlw	uint_to_array@resultado& (0+255)
  2551  0F7F  0084               	movwf	4
  2552  0F80  3006               	movlw	6
  2553  0F81  00FF               	movwf	127
  2554  0F82                     u1380:	
  2555  0F82  1383               	bcf	3,7	;select IRP bank0
  2556  0F83  0180               	clrf	0
  2557  0F84  0A84               	incf	4,f
  2558  0F85  0BFF               	decfsz	127,f
  2559  0F86  2F82               	goto	u1380
  2560                           
  2561                           ;LCD_8bits.c: 183:     resultado[0] = numero/100;
  2562  0F87  3064               	movlw	100
  2563  0F88  00A0               	movwf	___awdiv@divisor
  2564  0F89  3000               	movlw	0
  2565  0F8A  00A1               	movwf	___awdiv@divisor+1
  2566  0F8B  0836               	movf	uint_to_array@numero,w
  2567  0F8C  00A8               	movwf	??_uint_to_array
  2568  0F8D  01A9               	clrf	??_uint_to_array+1
  2569  0F8E  0828               	movf	??_uint_to_array,w
  2570  0F8F  00A2               	movwf	___awdiv@dividend
  2571  0F90  0829               	movf	??_uint_to_array+1,w
  2572  0F91  00A3               	movwf	___awdiv@dividend+1
  2573  0F92  120A  158A  25F7  120A  158A  	fcall	___awdiv
  2574  0F97  1283               	bcf	3,5	;RP0=0, select bank0
  2575  0F98  1303               	bcf	3,6	;RP1=0, select bank0
  2576  0F99  0821               	movf	?___awdiv+1,w
  2577  0F9A  00B0               	movwf	uint_to_array@resultado+1
  2578  0F9B  0820               	movf	?___awdiv,w
  2579  0F9C  00AF               	movwf	uint_to_array@resultado
  2580                           
  2581                           ;LCD_8bits.c: 184:     uint8_t centenas = resultado[0];
  2582  0F9D  082F               	movf	uint_to_array@resultado,w
  2583  0F9E  00A8               	movwf	??_uint_to_array
  2584  0F9F  0828               	movf	??_uint_to_array,w
  2585  0FA0  00B5               	movwf	uint_to_array@centenas
  2586                           
  2587                           ;LCD_8bits.c: 185:     resultado[1] = (numero - (centenas *100))/10;
  2588  0FA1  300A               	movlw	10
  2589  0FA2  00A0               	movwf	___awdiv@divisor
  2590  0FA3  3000               	movlw	0
  2591  0FA4  00A1               	movwf	___awdiv@divisor+1
  2592  0FA5  0835               	movf	uint_to_array@centenas,w
  2593  0FA6  00A8               	movwf	??_uint_to_array
  2594  0FA7  01A9               	clrf	??_uint_to_array+1
  2595  0FA8  0828               	movf	??_uint_to_array,w
  2596  0FA9  00F2               	movwf	___wmul@multiplier
  2597  0FAA  0829               	movf	??_uint_to_array+1,w
  2598  0FAB  00F3               	movwf	___wmul@multiplier+1
  2599  0FAC  309C               	movlw	156
  2600  0FAD  00F4               	movwf	___wmul@multiplicand
  2601  0FAE  30FF               	movlw	255
  2602  0FAF  00F5               	movwf	___wmul@multiplicand+1
  2603  0FB0  120A  158A  23BD  120A  158A  	fcall	___wmul
  2604  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  2605  0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  2606  0FB7  0836               	movf	uint_to_array@numero,w
  2607  0FB8  0772               	addwf	?___wmul,w
  2608  0FB9  00A2               	movwf	___awdiv@dividend
  2609  0FBA  0873               	movf	?___wmul+1,w
  2610  0FBB  1803               	skipnc
  2611  0FBC  0A73               	incf	?___wmul+1,w
  2612  0FBD  00A3               	movwf	___awdiv@dividend+1
  2613  0FBE  120A  158A  25F7  120A  158A  	fcall	___awdiv
  2614  0FC3  1283               	bcf	3,5	;RP0=0, select bank0
  2615  0FC4  1303               	bcf	3,6	;RP1=0, select bank0
  2616  0FC5  0821               	movf	?___awdiv+1,w
  2617  0FC6  00B2               	movwf	uint_to_array@resultado+3
  2618  0FC7  0820               	movf	?___awdiv,w
  2619  0FC8  00B1               	movwf	uint_to_array@resultado+2
  2620                           
  2621                           ;LCD_8bits.c: 186:     uint8_t decenas = resultado[1];
  2622  0FC9  0831               	movf	uint_to_array@resultado+2,w
  2623  0FCA  00A8               	movwf	??_uint_to_array
  2624  0FCB  0828               	movf	??_uint_to_array,w
  2625  0FCC  00AE               	movwf	uint_to_array@decenas
  2626                           
  2627                           ;LCD_8bits.c: 187:     resultado[2] = numero -(centenas*100+decenas*10);
  2628  0FCD  0835               	movf	uint_to_array@centenas,w
  2629  0FCE  00A8               	movwf	??_uint_to_array
  2630  0FCF  01A9               	clrf	??_uint_to_array+1
  2631  0FD0  0828               	movf	??_uint_to_array,w
  2632  0FD1  00F2               	movwf	___wmul@multiplier
  2633  0FD2  0829               	movf	??_uint_to_array+1,w
  2634  0FD3  00F3               	movwf	___wmul@multiplier+1
  2635  0FD4  309C               	movlw	156
  2636  0FD5  00F4               	movwf	___wmul@multiplicand
  2637  0FD6  30FF               	movlw	255
  2638  0FD7  00F5               	movwf	___wmul@multiplicand+1
  2639  0FD8  120A  158A  23BD  120A  158A  	fcall	___wmul
  2640  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  2641  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  2642  0FDF  0836               	movf	uint_to_array@numero,w
  2643  0FE0  0772               	addwf	?___wmul,w
  2644  0FE1  00AA               	movwf	??_uint_to_array+2
  2645  0FE2  0873               	movf	?___wmul+1,w
  2646  0FE3  1803               	skipnc
  2647  0FE4  0A73               	incf	?___wmul+1,w
  2648  0FE5  00AB               	movwf	??_uint_to_array+3
  2649  0FE6  082E               	movf	uint_to_array@decenas,w
  2650  0FE7  00AC               	movwf	??_uint_to_array+4
  2651  0FE8  01AD               	clrf	??_uint_to_array+5
  2652  0FE9  082C               	movf	??_uint_to_array+4,w
  2653  0FEA  00F2               	movwf	___wmul@multiplier
  2654  0FEB  082D               	movf	??_uint_to_array+5,w
  2655  0FEC  00F3               	movwf	___wmul@multiplier+1
  2656  0FED  30F6               	movlw	246
  2657  0FEE  00F4               	movwf	___wmul@multiplicand
  2658  0FEF  30FF               	movlw	255
  2659  0FF0  00F5               	movwf	___wmul@multiplicand+1
  2660  0FF1  120A  158A  23BD   	fcall	___wmul
  2661  0FF4  0872               	movf	?___wmul,w
  2662  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  2663  0FF6  1303               	bcf	3,6	;RP1=0, select bank0
  2664  0FF7  072A               	addwf	??_uint_to_array+2,w
  2665  0FF8  00B3               	movwf	uint_to_array@resultado+4
  2666  0FF9  0873               	movf	?___wmul+1,w
  2667  0FFA  1803               	skipnc
  2668  0FFB  0A73               	incf	?___wmul+1,w
  2669  0FFC  072B               	addwf	??_uint_to_array+3,w
  2670  0FFD  00B4               	movwf	uint_to_array@resultado+5
  2671                           
  2672                           ;LCD_8bits.c: 188:     return(resultado);
  2673  0FFE  302F               	movlw	(low (uint_to_array@resultado| 0))& (0+255)
  2674  0FFF  0008               	return
  2675  1000                     __end_of_uint_to_array:	
  2676                           
  2677                           	psect	text6
  2678  0BBD                     __ptext6:	
  2679 ;; *************** function ___wmul *****************
  2680 ;; Defined at:
  2681 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;  multiplier      2    2[COMMON] unsigned int 
  2684 ;;  multiplicand    2    4[COMMON] unsigned int 
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;  product         2    6[COMMON] unsigned int 
  2687 ;; Return value:  Size  Location     Type
  2688 ;;                  2    2[COMMON] unsigned int 
  2689 ;; Registers used:
  2690 ;;		wreg, status,2, status,0
  2691 ;; Tracked objects:
  2692 ;;		On entry : 0/0
  2693 ;;		On exit  : 0/0
  2694 ;;		Unchanged: 0/0
  2695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2696 ;;      Params:         4       0       0       0       0
  2697 ;;      Locals:         2       0       0       0       0
  2698 ;;      Temps:          0       0       0       0       0
  2699 ;;      Totals:         6       0       0       0       0
  2700 ;;Total ram usage:        6 bytes
  2701 ;; Hardware stack levels used:    1
  2702 ;; Hardware stack levels required when called:    1
  2703 ;; This function calls:
  2704 ;;		Nothing
  2705 ;; This function is called by:
  2706 ;;		_uint_to_array
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709                           
  2710                           
  2711                           ;psect for function ___wmul
  2712  0BBD                     ___wmul:	
  2713                           
  2714                           ;incstack = 0
  2715                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2716  0BBD  01F6               	clrf	___wmul@product
  2717  0BBE  01F7               	clrf	___wmul@product+1
  2718  0BBF                     l2232:	
  2719  0BBF  1C72               	btfss	___wmul@multiplier,0
  2720  0BC0  2BC7               	goto	l442
  2721  0BC1  0874               	movf	___wmul@multiplicand,w
  2722  0BC2  07F6               	addwf	___wmul@product,f
  2723  0BC3  1803               	skipnc
  2724  0BC4  0AF7               	incf	___wmul@product+1,f
  2725  0BC5  0875               	movf	___wmul@multiplicand+1,w
  2726  0BC6  07F7               	addwf	___wmul@product+1,f
  2727  0BC7                     l442:	
  2728  0BC7  3001               	movlw	1
  2729  0BC8                     u655:	
  2730  0BC8  1003               	clrc
  2731  0BC9  0DF4               	rlf	___wmul@multiplicand,f
  2732  0BCA  0DF5               	rlf	___wmul@multiplicand+1,f
  2733  0BCB  3EFF               	addlw	-1
  2734  0BCC  1D03               	skipz
  2735  0BCD  2BC8               	goto	u655
  2736  0BCE  3001               	movlw	1
  2737  0BCF                     u665:	
  2738  0BCF  1003               	clrc
  2739  0BD0  0CF3               	rrf	___wmul@multiplier+1,f
  2740  0BD1  0CF2               	rrf	___wmul@multiplier,f
  2741  0BD2  3EFF               	addlw	-1
  2742  0BD3  1D03               	skipz
  2743  0BD4  2BCF               	goto	u665
  2744  0BD5  0872               	movf	___wmul@multiplier,w
  2745  0BD6  0473               	iorwf	___wmul@multiplier+1,w
  2746  0BD7  1D03               	btfss	3,2
  2747  0BD8  2BBF               	goto	l2232
  2748  0BD9  0877               	movf	___wmul@product+1,w
  2749  0BDA  00F3               	movwf	?___wmul+1
  2750  0BDB  0876               	movf	___wmul@product,w
  2751  0BDC  00F2               	movwf	?___wmul
  2752  0BDD  0008               	return
  2753  0BDE                     __end_of___wmul:	
  2754                           
  2755                           	psect	text7
  2756  04F4                     __ptext7:	
  2757 ;; *************** function _display_Uhrzeit *****************
  2758 ;; Defined at:
  2759 ;;		line 185 in file "main_Master.c"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;  fila            1    wreg     unsigned char 
  2762 ;;  columna         1    8[BANK0 ] unsigned char 
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;  fila            1   12[BANK0 ] unsigned char 
  2765 ;;  Uhr_d           1   18[BANK0 ] unsigned char 
  2766 ;;  Uhr_u           1   17[BANK0 ] unsigned char 
  2767 ;;  min_d           1   16[BANK0 ] unsigned char 
  2768 ;;  min_u           1   15[BANK0 ] unsigned char 
  2769 ;;  seg_d           1   14[BANK0 ] unsigned char 
  2770 ;;  seg_u           1   13[BANK0 ] unsigned char 
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      void 
  2773 ;; Registers used:
  2774 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2780 ;;      Params:         0       1       0       0       0
  2781 ;;      Locals:         0       7       0       0       0
  2782 ;;      Temps:          0       3       0       0       0
  2783 ;;      Totals:         0      11       0       0       0
  2784 ;;Total ram usage:       11 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    3
  2787 ;; This function calls:
  2788 ;;		_LCD_Set_Cursor
  2789 ;;		_LCD_Write_Character
  2790 ;;		___awdiv
  2791 ;;		___awmod
  2792 ;; This function is called by:
  2793 ;;		_mostrarLCD
  2794 ;; This function uses a non-reentrant model
  2795 ;;
  2796                           
  2797                           
  2798                           ;psect for function _display_Uhrzeit
  2799  04F4                     _display_Uhrzeit:	
  2800                           
  2801                           ;incstack = 0
  2802                           ; Regs used in _display_Uhrzeit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2803                           ;display_Uhrzeit@fila stored from wreg
  2804  04F4  1283               	bcf	3,5	;RP0=0, select bank0
  2805  04F5  1303               	bcf	3,6	;RP1=0, select bank0
  2806  04F6  00AC               	movwf	display_Uhrzeit@fila
  2807                           
  2808                           ;main_Master.c: 186:     char seg_u = seg%10;
  2809  04F7  300A               	movlw	10
  2810  04F8  00F2               	movwf	___awmod@divisor
  2811  04F9  3000               	movlw	0
  2812  04FA  00F3               	movwf	___awmod@divisor+1
  2813  04FB  0845               	movf	_seg,w
  2814  04FC  00A9               	movwf	??_display_Uhrzeit
  2815  04FD  01AA               	clrf	??_display_Uhrzeit+1
  2816  04FE  0829               	movf	??_display_Uhrzeit,w
  2817  04FF  00F4               	movwf	___awmod@dividend
  2818  0500  082A               	movf	??_display_Uhrzeit+1,w
  2819  0501  00F5               	movwf	___awmod@dividend+1
  2820  0502  120A  158A  2559  120A  118A  	fcall	___awmod
  2821  0507  0872               	movf	?___awmod,w
  2822  0508  1283               	bcf	3,5	;RP0=0, select bank0
  2823  0509  1303               	bcf	3,6	;RP1=0, select bank0
  2824  050A  00AB               	movwf	??_display_Uhrzeit+2
  2825  050B  082B               	movf	??_display_Uhrzeit+2,w
  2826  050C  00AD               	movwf	display_Uhrzeit@seg_u
  2827                           
  2828                           ;main_Master.c: 187:     char seg_d = seg/10;
  2829  050D  300A               	movlw	10
  2830  050E  00A0               	movwf	___awdiv@divisor
  2831  050F  3000               	movlw	0
  2832  0510  00A1               	movwf	___awdiv@divisor+1
  2833  0511  0845               	movf	_seg,w
  2834  0512  00A9               	movwf	??_display_Uhrzeit
  2835  0513  01AA               	clrf	??_display_Uhrzeit+1
  2836  0514  0829               	movf	??_display_Uhrzeit,w
  2837  0515  00A2               	movwf	___awdiv@dividend
  2838  0516  082A               	movf	??_display_Uhrzeit+1,w
  2839  0517  00A3               	movwf	___awdiv@dividend+1
  2840  0518  120A  158A  25F7  120A  118A  	fcall	___awdiv
  2841  051D  1283               	bcf	3,5	;RP0=0, select bank0
  2842  051E  1303               	bcf	3,6	;RP1=0, select bank0
  2843  051F  0820               	movf	?___awdiv,w
  2844  0520  00AB               	movwf	??_display_Uhrzeit+2
  2845  0521  082B               	movf	??_display_Uhrzeit+2,w
  2846  0522  00AE               	movwf	display_Uhrzeit@seg_d
  2847                           
  2848                           ;main_Master.c: 188:     char min_u = min%10;
  2849  0523  300A               	movlw	10
  2850  0524  00F2               	movwf	___awmod@divisor
  2851  0525  3000               	movlw	0
  2852  0526  00F3               	movwf	___awmod@divisor+1
  2853  0527  084D               	movf	_min,w
  2854  0528  00A9               	movwf	??_display_Uhrzeit
  2855  0529  01AA               	clrf	??_display_Uhrzeit+1
  2856  052A  0829               	movf	??_display_Uhrzeit,w
  2857  052B  00F4               	movwf	___awmod@dividend
  2858  052C  082A               	movf	??_display_Uhrzeit+1,w
  2859  052D  00F5               	movwf	___awmod@dividend+1
  2860  052E  120A  158A  2559  120A  118A  	fcall	___awmod
  2861  0533  0872               	movf	?___awmod,w
  2862  0534  1283               	bcf	3,5	;RP0=0, select bank0
  2863  0535  1303               	bcf	3,6	;RP1=0, select bank0
  2864  0536  00AB               	movwf	??_display_Uhrzeit+2
  2865  0537  082B               	movf	??_display_Uhrzeit+2,w
  2866  0538  00AF               	movwf	display_Uhrzeit@min_u
  2867                           
  2868                           ;main_Master.c: 189:     char min_d = min/10;
  2869  0539  300A               	movlw	10
  2870  053A  00A0               	movwf	___awdiv@divisor
  2871  053B  3000               	movlw	0
  2872  053C  00A1               	movwf	___awdiv@divisor+1
  2873  053D  084D               	movf	_min,w
  2874  053E  00A9               	movwf	??_display_Uhrzeit
  2875  053F  01AA               	clrf	??_display_Uhrzeit+1
  2876  0540  0829               	movf	??_display_Uhrzeit,w
  2877  0541  00A2               	movwf	___awdiv@dividend
  2878  0542  082A               	movf	??_display_Uhrzeit+1,w
  2879  0543  00A3               	movwf	___awdiv@dividend+1
  2880  0544  120A  158A  25F7  120A  118A  	fcall	___awdiv
  2881  0549  1283               	bcf	3,5	;RP0=0, select bank0
  2882  054A  1303               	bcf	3,6	;RP1=0, select bank0
  2883  054B  0820               	movf	?___awdiv,w
  2884  054C  00AB               	movwf	??_display_Uhrzeit+2
  2885  054D  082B               	movf	??_display_Uhrzeit+2,w
  2886  054E  00B0               	movwf	display_Uhrzeit@min_d
  2887                           
  2888                           ;main_Master.c: 190:     char Uhr_u = hora%10;
  2889  054F  300A               	movlw	10
  2890  0550  00F2               	movwf	___awmod@divisor
  2891  0551  3000               	movlw	0
  2892  0552  00F3               	movwf	___awmod@divisor+1
  2893  0553  084C               	movf	_hora,w
  2894  0554  00A9               	movwf	??_display_Uhrzeit
  2895  0555  01AA               	clrf	??_display_Uhrzeit+1
  2896  0556  0829               	movf	??_display_Uhrzeit,w
  2897  0557  00F4               	movwf	___awmod@dividend
  2898  0558  082A               	movf	??_display_Uhrzeit+1,w
  2899  0559  00F5               	movwf	___awmod@dividend+1
  2900  055A  120A  158A  2559  120A  118A  	fcall	___awmod
  2901  055F  0872               	movf	?___awmod,w
  2902  0560  1283               	bcf	3,5	;RP0=0, select bank0
  2903  0561  1303               	bcf	3,6	;RP1=0, select bank0
  2904  0562  00AB               	movwf	??_display_Uhrzeit+2
  2905  0563  082B               	movf	??_display_Uhrzeit+2,w
  2906  0564  00B1               	movwf	display_Uhrzeit@Uhr_u
  2907                           
  2908                           ;main_Master.c: 191:     char Uhr_d = hora/10;
  2909  0565  300A               	movlw	10
  2910  0566  00A0               	movwf	___awdiv@divisor
  2911  0567  3000               	movlw	0
  2912  0568  00A1               	movwf	___awdiv@divisor+1
  2913  0569  084C               	movf	_hora,w
  2914  056A  00A9               	movwf	??_display_Uhrzeit
  2915  056B  01AA               	clrf	??_display_Uhrzeit+1
  2916  056C  0829               	movf	??_display_Uhrzeit,w
  2917  056D  00A2               	movwf	___awdiv@dividend
  2918  056E  082A               	movf	??_display_Uhrzeit+1,w
  2919  056F  00A3               	movwf	___awdiv@dividend+1
  2920  0570  120A  158A  25F7  120A  118A  	fcall	___awdiv
  2921  0575  1283               	bcf	3,5	;RP0=0, select bank0
  2922  0576  1303               	bcf	3,6	;RP1=0, select bank0
  2923  0577  0820               	movf	?___awdiv,w
  2924  0578  00AB               	movwf	??_display_Uhrzeit+2
  2925  0579  082B               	movf	??_display_Uhrzeit+2,w
  2926  057A  00B2               	movwf	display_Uhrzeit@Uhr_d
  2927                           
  2928                           ;main_Master.c: 193:     LCD_Set_Cursor(fila, columna);
  2929  057B  0828               	movf	display_Uhrzeit@columna,w
  2930  057C  00A9               	movwf	??_display_Uhrzeit
  2931  057D  0829               	movf	??_display_Uhrzeit,w
  2932  057E  00F5               	movwf	LCD_Set_Cursor@columna
  2933  057F  082C               	movf	display_Uhrzeit@fila,w
  2934  0580  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  2935                           
  2936                           ;main_Master.c: 194:     LCD_Write_Character(Uhr_d + '0');
  2937  0585  1283               	bcf	3,5	;RP0=0, select bank0
  2938  0586  1303               	bcf	3,6	;RP1=0, select bank0
  2939  0587  0832               	movf	display_Uhrzeit@Uhr_d,w
  2940  0588  3E30               	addlw	48
  2941  0589  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  2942                           
  2943                           ;main_Master.c: 195:     LCD_Write_Character(Uhr_u + '0');
  2944  058E  1283               	bcf	3,5	;RP0=0, select bank0
  2945  058F  1303               	bcf	3,6	;RP1=0, select bank0
  2946  0590  0831               	movf	display_Uhrzeit@Uhr_u,w
  2947  0591  3E30               	addlw	48
  2948  0592  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  2949                           
  2950                           ;main_Master.c: 196:     LCD_Write_Character(':');
  2951  0597  303A               	movlw	58
  2952  0598  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  2953                           
  2954                           ;main_Master.c: 197:     LCD_Write_Character(min_d + '0');
  2955  059D  1283               	bcf	3,5	;RP0=0, select bank0
  2956  059E  1303               	bcf	3,6	;RP1=0, select bank0
  2957  059F  0830               	movf	display_Uhrzeit@min_d,w
  2958  05A0  3E30               	addlw	48
  2959  05A1  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  2960                           
  2961                           ;main_Master.c: 198:     LCD_Write_Character(min_u + '0');
  2962  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  2963  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  2964  05A8  082F               	movf	display_Uhrzeit@min_u,w
  2965  05A9  3E30               	addlw	48
  2966  05AA  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  2967                           
  2968                           ;main_Master.c: 199:     LCD_Write_Character(':');
  2969  05AF  303A               	movlw	58
  2970  05B0  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  2971                           
  2972                           ;main_Master.c: 200:     LCD_Write_Character(seg_d + '0');
  2973  05B5  1283               	bcf	3,5	;RP0=0, select bank0
  2974  05B6  1303               	bcf	3,6	;RP1=0, select bank0
  2975  05B7  082E               	movf	display_Uhrzeit@seg_d,w
  2976  05B8  3E30               	addlw	48
  2977  05B9  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  2978                           
  2979                           ;main_Master.c: 201:     LCD_Write_Character(seg_u + '0');
  2980  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  2981  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  2982  05C0  082D               	movf	display_Uhrzeit@seg_u,w
  2983  05C1  3E30               	addlw	48
  2984  05C2  120A  158A  234E   	fcall	_LCD_Write_Character
  2985  05C5  0008               	return
  2986  05C6                     __end_of_display_Uhrzeit:	
  2987                           
  2988                           	psect	text8
  2989  041C                     __ptext8:	
  2990 ;; *************** function _display_Datum *****************
  2991 ;; Defined at:
  2992 ;;		line 205 in file "main_Master.c"
  2993 ;; Parameters:    Size  Location     Type
  2994 ;;  fila            1    wreg     unsigned char 
  2995 ;;  columna         1    8[BANK0 ] unsigned char 
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;  fila            1   12[BANK0 ] unsigned char 
  2998 ;;  jahr_d          1   18[BANK0 ] unsigned char 
  2999 ;;  jahr_u          1   17[BANK0 ] unsigned char 
  3000 ;;  mes_d           1   16[BANK0 ] unsigned char 
  3001 ;;  mes_u           1   15[BANK0 ] unsigned char 
  3002 ;;  dia_d           1   14[BANK0 ] unsigned char 
  3003 ;;  dia_u           1   13[BANK0 ] unsigned char 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      void 
  3006 ;; Registers used:
  3007 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3013 ;;      Params:         0       1       0       0       0
  3014 ;;      Locals:         0       7       0       0       0
  3015 ;;      Temps:          0       3       0       0       0
  3016 ;;      Totals:         0      11       0       0       0
  3017 ;;Total ram usage:       11 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    3
  3020 ;; This function calls:
  3021 ;;		_LCD_Set_Cursor
  3022 ;;		_LCD_Write_Character
  3023 ;;		_LCD_Write_String
  3024 ;;		___awdiv
  3025 ;;		___awmod
  3026 ;; This function is called by:
  3027 ;;		_mostrarLCD
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           
  3032                           ;psect for function _display_Datum
  3033  041C                     _display_Datum:	
  3034                           
  3035                           ;incstack = 0
  3036                           ; Regs used in _display_Datum: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3037                           ;display_Datum@fila stored from wreg
  3038  041C  1283               	bcf	3,5	;RP0=0, select bank0
  3039  041D  1303               	bcf	3,6	;RP1=0, select bank0
  3040  041E  00AC               	movwf	display_Datum@fila
  3041                           
  3042                           ;main_Master.c: 206:     char dia_u = datum%10;
  3043  041F  300A               	movlw	10
  3044  0420  00F2               	movwf	___awmod@divisor
  3045  0421  3000               	movlw	0
  3046  0422  00F3               	movwf	___awmod@divisor+1
  3047  0423  084A               	movf	_datum,w
  3048  0424  00A9               	movwf	??_display_Datum
  3049  0425  01AA               	clrf	??_display_Datum+1
  3050  0426  0829               	movf	??_display_Datum,w
  3051  0427  00F4               	movwf	___awmod@dividend
  3052  0428  082A               	movf	??_display_Datum+1,w
  3053  0429  00F5               	movwf	___awmod@dividend+1
  3054  042A  120A  158A  2559  120A  118A  	fcall	___awmod
  3055  042F  0872               	movf	?___awmod,w
  3056  0430  1283               	bcf	3,5	;RP0=0, select bank0
  3057  0431  1303               	bcf	3,6	;RP1=0, select bank0
  3058  0432  00AB               	movwf	??_display_Datum+2
  3059  0433  082B               	movf	??_display_Datum+2,w
  3060  0434  00AD               	movwf	display_Datum@dia_u
  3061                           
  3062                           ;main_Master.c: 207:     char dia_d = datum/10;
  3063  0435  300A               	movlw	10
  3064  0436  00A0               	movwf	___awdiv@divisor
  3065  0437  3000               	movlw	0
  3066  0438  00A1               	movwf	___awdiv@divisor+1
  3067  0439  084A               	movf	_datum,w
  3068  043A  00A9               	movwf	??_display_Datum
  3069  043B  01AA               	clrf	??_display_Datum+1
  3070  043C  0829               	movf	??_display_Datum,w
  3071  043D  00A2               	movwf	___awdiv@dividend
  3072  043E  082A               	movf	??_display_Datum+1,w
  3073  043F  00A3               	movwf	___awdiv@dividend+1
  3074  0440  120A  158A  25F7  120A  118A  	fcall	___awdiv
  3075  0445  1283               	bcf	3,5	;RP0=0, select bank0
  3076  0446  1303               	bcf	3,6	;RP1=0, select bank0
  3077  0447  0820               	movf	?___awdiv,w
  3078  0448  00AB               	movwf	??_display_Datum+2
  3079  0449  082B               	movf	??_display_Datum+2,w
  3080  044A  00AE               	movwf	display_Datum@dia_d
  3081                           
  3082                           ;main_Master.c: 208:     char mes_u = mes%10;
  3083  044B  300A               	movlw	10
  3084  044C  00F2               	movwf	___awmod@divisor
  3085  044D  3000               	movlw	0
  3086  044E  00F3               	movwf	___awmod@divisor+1
  3087  044F  0849               	movf	_mes,w
  3088  0450  00A9               	movwf	??_display_Datum
  3089  0451  01AA               	clrf	??_display_Datum+1
  3090  0452  0829               	movf	??_display_Datum,w
  3091  0453  00F4               	movwf	___awmod@dividend
  3092  0454  082A               	movf	??_display_Datum+1,w
  3093  0455  00F5               	movwf	___awmod@dividend+1
  3094  0456  120A  158A  2559  120A  118A  	fcall	___awmod
  3095  045B  0872               	movf	?___awmod,w
  3096  045C  1283               	bcf	3,5	;RP0=0, select bank0
  3097  045D  1303               	bcf	3,6	;RP1=0, select bank0
  3098  045E  00AB               	movwf	??_display_Datum+2
  3099  045F  082B               	movf	??_display_Datum+2,w
  3100  0460  00AF               	movwf	display_Datum@mes_u
  3101                           
  3102                           ;main_Master.c: 209:     char mes_d = mes/10;
  3103  0461  300A               	movlw	10
  3104  0462  00A0               	movwf	___awdiv@divisor
  3105  0463  3000               	movlw	0
  3106  0464  00A1               	movwf	___awdiv@divisor+1
  3107  0465  0849               	movf	_mes,w
  3108  0466  00A9               	movwf	??_display_Datum
  3109  0467  01AA               	clrf	??_display_Datum+1
  3110  0468  0829               	movf	??_display_Datum,w
  3111  0469  00A2               	movwf	___awdiv@dividend
  3112  046A  082A               	movf	??_display_Datum+1,w
  3113  046B  00A3               	movwf	___awdiv@dividend+1
  3114  046C  120A  158A  25F7  120A  118A  	fcall	___awdiv
  3115  0471  1283               	bcf	3,5	;RP0=0, select bank0
  3116  0472  1303               	bcf	3,6	;RP1=0, select bank0
  3117  0473  0820               	movf	?___awdiv,w
  3118  0474  00AB               	movwf	??_display_Datum+2
  3119  0475  082B               	movf	??_display_Datum+2,w
  3120  0476  00B0               	movwf	display_Datum@mes_d
  3121                           
  3122                           ;main_Master.c: 210:     char jahr_u = jahr%10;
  3123  0477  300A               	movlw	10
  3124  0478  00F2               	movwf	___awmod@divisor
  3125  0479  3000               	movlw	0
  3126  047A  00F3               	movwf	___awmod@divisor+1
  3127  047B  0848               	movf	_jahr,w
  3128  047C  00A9               	movwf	??_display_Datum
  3129  047D  01AA               	clrf	??_display_Datum+1
  3130  047E  0829               	movf	??_display_Datum,w
  3131  047F  00F4               	movwf	___awmod@dividend
  3132  0480  082A               	movf	??_display_Datum+1,w
  3133  0481  00F5               	movwf	___awmod@dividend+1
  3134  0482  120A  158A  2559  120A  118A  	fcall	___awmod
  3135  0487  0872               	movf	?___awmod,w
  3136  0488  1283               	bcf	3,5	;RP0=0, select bank0
  3137  0489  1303               	bcf	3,6	;RP1=0, select bank0
  3138  048A  00AB               	movwf	??_display_Datum+2
  3139  048B  082B               	movf	??_display_Datum+2,w
  3140  048C  00B1               	movwf	display_Datum@jahr_u
  3141                           
  3142                           ;main_Master.c: 211:     char jahr_d = jahr/10;
  3143  048D  300A               	movlw	10
  3144  048E  00A0               	movwf	___awdiv@divisor
  3145  048F  3000               	movlw	0
  3146  0490  00A1               	movwf	___awdiv@divisor+1
  3147  0491  0848               	movf	_jahr,w
  3148  0492  00A9               	movwf	??_display_Datum
  3149  0493  01AA               	clrf	??_display_Datum+1
  3150  0494  0829               	movf	??_display_Datum,w
  3151  0495  00A2               	movwf	___awdiv@dividend
  3152  0496  082A               	movf	??_display_Datum+1,w
  3153  0497  00A3               	movwf	___awdiv@dividend+1
  3154  0498  120A  158A  25F7  120A  118A  	fcall	___awdiv
  3155  049D  1283               	bcf	3,5	;RP0=0, select bank0
  3156  049E  1303               	bcf	3,6	;RP1=0, select bank0
  3157  049F  0820               	movf	?___awdiv,w
  3158  04A0  00AB               	movwf	??_display_Datum+2
  3159  04A1  082B               	movf	??_display_Datum+2,w
  3160  04A2  00B2               	movwf	display_Datum@jahr_d
  3161                           
  3162                           ;main_Master.c: 213:     LCD_Set_Cursor(fila, columna);
  3163  04A3  0828               	movf	display_Datum@columna,w
  3164  04A4  00A9               	movwf	??_display_Datum
  3165  04A5  0829               	movf	??_display_Datum,w
  3166  04A6  00F5               	movwf	LCD_Set_Cursor@columna
  3167  04A7  082C               	movf	display_Datum@fila,w
  3168  04A8  120A  158A  247D  120A  118A  	fcall	_LCD_Set_Cursor
  3169                           
  3170                           ;main_Master.c: 214:     LCD_Write_Character(dia_d + '0');
  3171  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  3172  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  3173  04AF  082E               	movf	display_Datum@dia_d,w
  3174  04B0  3E30               	addlw	48
  3175  04B1  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  3176                           
  3177                           ;main_Master.c: 215:     LCD_Write_Character(dia_u + '0');
  3178  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  3179  04B7  1303               	bcf	3,6	;RP1=0, select bank0
  3180  04B8  082D               	movf	display_Datum@dia_u,w
  3181  04B9  3E30               	addlw	48
  3182  04BA  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  3183                           
  3184                           ;main_Master.c: 216:     LCD_Write_Character('/');
  3185  04BF  302F               	movlw	47
  3186  04C0  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  3187                           
  3188                           ;main_Master.c: 217:     LCD_Write_Character(mes_d + '0');
  3189  04C5  1283               	bcf	3,5	;RP0=0, select bank0
  3190  04C6  1303               	bcf	3,6	;RP1=0, select bank0
  3191  04C7  0830               	movf	display_Datum@mes_d,w
  3192  04C8  3E30               	addlw	48
  3193  04C9  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  3194                           
  3195                           ;main_Master.c: 218:     LCD_Write_Character(mes_u + '0');
  3196  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  3197  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  3198  04D0  082F               	movf	display_Datum@mes_u,w
  3199  04D1  3E30               	addlw	48
  3200  04D2  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  3201                           
  3202                           ;main_Master.c: 219:     LCD_Write_Character('/');
  3203  04D7  302F               	movlw	47
  3204  04D8  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  3205                           
  3206                           ;main_Master.c: 220:     LCD_Write_String("20");
  3207  04DD  3079               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3208  04DE  120A  158A  23DE  120A  118A  	fcall	_LCD_Write_String
  3209                           
  3210                           ;main_Master.c: 221:     LCD_Write_Character(jahr_d + '0');
  3211  04E3  1283               	bcf	3,5	;RP0=0, select bank0
  3212  04E4  1303               	bcf	3,6	;RP1=0, select bank0
  3213  04E5  0832               	movf	display_Datum@jahr_d,w
  3214  04E6  3E30               	addlw	48
  3215  04E7  120A  158A  234E  120A  118A  	fcall	_LCD_Write_Character
  3216                           
  3217                           ;main_Master.c: 222:     LCD_Write_Character(jahr_u + '0');
  3218  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  3219  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  3220  04EE  0831               	movf	display_Datum@jahr_u,w
  3221  04EF  3E30               	addlw	48
  3222  04F0  120A  158A  234E   	fcall	_LCD_Write_Character
  3223  04F3  0008               	return
  3224  04F4                     __end_of_display_Datum:	
  3225                           
  3226                           	psect	text9
  3227  0D59                     __ptext9:	
  3228 ;; *************** function ___awmod *****************
  3229 ;; Defined at:
  3230 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  3231 ;; Parameters:    Size  Location     Type
  3232 ;;  divisor         2    2[COMMON] int 
  3233 ;;  dividend        2    4[COMMON] int 
  3234 ;; Auto vars:     Size  Location     Type
  3235 ;;  sign            1    8[COMMON] unsigned char 
  3236 ;;  counter         1    7[COMMON] unsigned char 
  3237 ;; Return value:  Size  Location     Type
  3238 ;;                  2    2[COMMON] int 
  3239 ;; Registers used:
  3240 ;;		wreg, status,2, status,0
  3241 ;; Tracked objects:
  3242 ;;		On entry : 0/0
  3243 ;;		On exit  : 0/0
  3244 ;;		Unchanged: 0/0
  3245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3246 ;;      Params:         4       0       0       0       0
  3247 ;;      Locals:         2       0       0       0       0
  3248 ;;      Temps:          1       0       0       0       0
  3249 ;;      Totals:         7       0       0       0       0
  3250 ;;Total ram usage:        7 bytes
  3251 ;; Hardware stack levels used:    1
  3252 ;; Hardware stack levels required when called:    1
  3253 ;; This function calls:
  3254 ;;		Nothing
  3255 ;; This function is called by:
  3256 ;;		_display_Uhrzeit
  3257 ;;		_display_Datum
  3258 ;;		_DEC_a_BCD
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           
  3263                           ;psect for function ___awmod
  3264  0D59                     ___awmod:	
  3265                           
  3266                           ;incstack = 0
  3267                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3268  0D59  01F8               	clrf	___awmod@sign
  3269  0D5A  1FF5               	btfss	___awmod@dividend+1,7
  3270  0D5B  2D63               	goto	l2334
  3271  0D5C  09F4               	comf	___awmod@dividend,f
  3272  0D5D  09F5               	comf	___awmod@dividend+1,f
  3273  0D5E  0AF4               	incf	___awmod@dividend,f
  3274  0D5F  1903               	skipnz
  3275  0D60  0AF5               	incf	___awmod@dividend+1,f
  3276  0D61  01F8               	clrf	___awmod@sign
  3277  0D62  0AF8               	incf	___awmod@sign,f
  3278  0D63                     l2334:	
  3279  0D63  1FF3               	btfss	___awmod@divisor+1,7
  3280  0D64  2D6A               	goto	l2338
  3281  0D65  09F2               	comf	___awmod@divisor,f
  3282  0D66  09F3               	comf	___awmod@divisor+1,f
  3283  0D67  0AF2               	incf	___awmod@divisor,f
  3284  0D68  1903               	skipnz
  3285  0D69  0AF3               	incf	___awmod@divisor+1,f
  3286  0D6A                     l2338:	
  3287  0D6A  0872               	movf	___awmod@divisor,w
  3288  0D6B  0473               	iorwf	___awmod@divisor+1,w
  3289  0D6C  1903               	btfsc	3,2
  3290  0D6D  2D97               	goto	l2356
  3291  0D6E  01F7               	clrf	___awmod@counter
  3292  0D6F  0AF7               	incf	___awmod@counter,f
  3293  0D70                     l2346:	
  3294  0D70  1BF3               	btfsc	___awmod@divisor+1,7
  3295  0D71  2D7E               	goto	l2348
  3296  0D72  3001               	movlw	1
  3297  0D73                     u905:	
  3298  0D73  1003               	clrc
  3299  0D74  0DF2               	rlf	___awmod@divisor,f
  3300  0D75  0DF3               	rlf	___awmod@divisor+1,f
  3301  0D76  3EFF               	addlw	-1
  3302  0D77  1D03               	skipz
  3303  0D78  2D73               	goto	u905
  3304  0D79  3001               	movlw	1
  3305  0D7A  00F6               	movwf	??___awmod
  3306  0D7B  0876               	movf	??___awmod,w
  3307  0D7C  07F7               	addwf	___awmod@counter,f
  3308  0D7D  2D70               	goto	l2346
  3309  0D7E                     l2348:	
  3310  0D7E  0873               	movf	___awmod@divisor+1,w
  3311  0D7F  0275               	subwf	___awmod@dividend+1,w
  3312  0D80  1D03               	skipz
  3313  0D81  2D84               	goto	u925
  3314  0D82  0872               	movf	___awmod@divisor,w
  3315  0D83  0274               	subwf	___awmod@dividend,w
  3316  0D84                     u925:	
  3317  0D84  1C03               	skipc
  3318  0D85  2D8C               	goto	l2352
  3319  0D86  0872               	movf	___awmod@divisor,w
  3320  0D87  02F4               	subwf	___awmod@dividend,f
  3321  0D88  0873               	movf	___awmod@divisor+1,w
  3322  0D89  1C03               	skipc
  3323  0D8A  03F5               	decf	___awmod@dividend+1,f
  3324  0D8B  02F5               	subwf	___awmod@dividend+1,f
  3325  0D8C                     l2352:	
  3326  0D8C  3001               	movlw	1
  3327  0D8D                     u935:	
  3328  0D8D  1003               	clrc
  3329  0D8E  0CF3               	rrf	___awmod@divisor+1,f
  3330  0D8F  0CF2               	rrf	___awmod@divisor,f
  3331  0D90  3EFF               	addlw	-1
  3332  0D91  1D03               	skipz
  3333  0D92  2D8D               	goto	u935
  3334  0D93  3001               	movlw	1
  3335  0D94  02F7               	subwf	___awmod@counter,f
  3336  0D95  1D03               	btfss	3,2
  3337  0D96  2D7E               	goto	l2348
  3338  0D97                     l2356:	
  3339  0D97  0878               	movf	___awmod@sign,w
  3340  0D98  1903               	btfsc	3,2
  3341  0D99  2D9F               	goto	l2360
  3342  0D9A  09F4               	comf	___awmod@dividend,f
  3343  0D9B  09F5               	comf	___awmod@dividend+1,f
  3344  0D9C  0AF4               	incf	___awmod@dividend,f
  3345  0D9D  1903               	skipnz
  3346  0D9E  0AF5               	incf	___awmod@dividend+1,f
  3347  0D9F                     l2360:	
  3348  0D9F  0875               	movf	___awmod@dividend+1,w
  3349  0DA0  00F3               	movwf	?___awmod+1
  3350  0DA1  0874               	movf	___awmod@dividend,w
  3351  0DA2  00F2               	movwf	?___awmod
  3352  0DA3  0008               	return
  3353  0DA4                     __end_of___awmod:	
  3354                           
  3355                           	psect	text10
  3356  0DF7                     __ptext10:	
  3357 ;; *************** function ___awdiv *****************
  3358 ;; Defined at:
  3359 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;  divisor         2    0[BANK0 ] int 
  3362 ;;  dividend        2    2[BANK0 ] int 
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;  quotient        2    6[BANK0 ] int 
  3365 ;;  sign            1    5[BANK0 ] unsigned char 
  3366 ;;  counter         1    4[BANK0 ] unsigned char 
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  2    0[BANK0 ] int 
  3369 ;; Registers used:
  3370 ;;		wreg, status,2, status,0
  3371 ;; Tracked objects:
  3372 ;;		On entry : 0/0
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3376 ;;      Params:         0       4       0       0       0
  3377 ;;      Locals:         0       4       0       0       0
  3378 ;;      Temps:          1       0       0       0       0
  3379 ;;      Totals:         1       8       0       0       0
  3380 ;;Total ram usage:        9 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; Hardware stack levels required when called:    1
  3383 ;; This function calls:
  3384 ;;		Nothing
  3385 ;; This function is called by:
  3386 ;;		_display_Uhrzeit
  3387 ;;		_display_Datum
  3388 ;;		_uint_to_array
  3389 ;;		_DEC_a_BCD
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           
  3394                           ;psect for function ___awdiv
  3395  0DF7                     ___awdiv:	
  3396                           
  3397                           ;incstack = 0
  3398                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3399  0DF7  1283               	bcf	3,5	;RP0=0, select bank0
  3400  0DF8  1303               	bcf	3,6	;RP1=0, select bank0
  3401  0DF9  01A5               	clrf	___awdiv@sign
  3402  0DFA  1FA1               	btfss	___awdiv@divisor+1,7
  3403  0DFB  2E03               	goto	l3408
  3404  0DFC  09A0               	comf	___awdiv@divisor,f
  3405  0DFD  09A1               	comf	___awdiv@divisor+1,f
  3406  0DFE  0AA0               	incf	___awdiv@divisor,f
  3407  0DFF  1903               	skipnz
  3408  0E00  0AA1               	incf	___awdiv@divisor+1,f
  3409  0E01  01A5               	clrf	___awdiv@sign
  3410  0E02  0AA5               	incf	___awdiv@sign,f
  3411  0E03                     l3408:	
  3412  0E03  1FA3               	btfss	___awdiv@dividend+1,7
  3413  0E04  2E0E               	goto	l3414
  3414  0E05  09A2               	comf	___awdiv@dividend,f
  3415  0E06  09A3               	comf	___awdiv@dividend+1,f
  3416  0E07  0AA2               	incf	___awdiv@dividend,f
  3417  0E08  1903               	skipnz
  3418  0E09  0AA3               	incf	___awdiv@dividend+1,f
  3419  0E0A  3001               	movlw	1
  3420  0E0B  00F8               	movwf	??___awdiv
  3421  0E0C  0878               	movf	??___awdiv,w
  3422  0E0D  06A5               	xorwf	___awdiv@sign,f
  3423  0E0E                     l3414:	
  3424  0E0E  01A6               	clrf	___awdiv@quotient
  3425  0E0F  01A7               	clrf	___awdiv@quotient+1
  3426  0E10  0820               	movf	___awdiv@divisor,w
  3427  0E11  0421               	iorwf	___awdiv@divisor+1,w
  3428  0E12  1903               	btfsc	3,2
  3429  0E13  2E45               	goto	l3436
  3430  0E14  01A4               	clrf	___awdiv@counter
  3431  0E15  0AA4               	incf	___awdiv@counter,f
  3432  0E16                     l3424:	
  3433  0E16  1BA1               	btfsc	___awdiv@divisor+1,7
  3434  0E17  2E24               	goto	l3426
  3435  0E18  3001               	movlw	1
  3436  0E19                     u1305:	
  3437  0E19  1003               	clrc
  3438  0E1A  0DA0               	rlf	___awdiv@divisor,f
  3439  0E1B  0DA1               	rlf	___awdiv@divisor+1,f
  3440  0E1C  3EFF               	addlw	-1
  3441  0E1D  1D03               	skipz
  3442  0E1E  2E19               	goto	u1305
  3443  0E1F  3001               	movlw	1
  3444  0E20  00F8               	movwf	??___awdiv
  3445  0E21  0878               	movf	??___awdiv,w
  3446  0E22  07A4               	addwf	___awdiv@counter,f
  3447  0E23  2E16               	goto	l3424
  3448  0E24                     l3426:	
  3449  0E24  3001               	movlw	1
  3450  0E25                     u1325:	
  3451  0E25  1003               	clrc
  3452  0E26  0DA6               	rlf	___awdiv@quotient,f
  3453  0E27  0DA7               	rlf	___awdiv@quotient+1,f
  3454  0E28  3EFF               	addlw	-1
  3455  0E29  1D03               	skipz
  3456  0E2A  2E25               	goto	u1325
  3457  0E2B  0821               	movf	___awdiv@divisor+1,w
  3458  0E2C  0223               	subwf	___awdiv@dividend+1,w
  3459  0E2D  1D03               	skipz
  3460  0E2E  2E31               	goto	u1335
  3461  0E2F  0820               	movf	___awdiv@divisor,w
  3462  0E30  0222               	subwf	___awdiv@dividend,w
  3463  0E31                     u1335:	
  3464  0E31  1C03               	skipc
  3465  0E32  2E3A               	goto	l3432
  3466  0E33  0820               	movf	___awdiv@divisor,w
  3467  0E34  02A2               	subwf	___awdiv@dividend,f
  3468  0E35  0821               	movf	___awdiv@divisor+1,w
  3469  0E36  1C03               	skipc
  3470  0E37  03A3               	decf	___awdiv@dividend+1,f
  3471  0E38  02A3               	subwf	___awdiv@dividend+1,f
  3472  0E39  1426               	bsf	___awdiv@quotient,0
  3473  0E3A                     l3432:	
  3474  0E3A  3001               	movlw	1
  3475  0E3B                     u1345:	
  3476  0E3B  1003               	clrc
  3477  0E3C  0CA1               	rrf	___awdiv@divisor+1,f
  3478  0E3D  0CA0               	rrf	___awdiv@divisor,f
  3479  0E3E  3EFF               	addlw	-1
  3480  0E3F  1D03               	skipz
  3481  0E40  2E3B               	goto	u1345
  3482  0E41  3001               	movlw	1
  3483  0E42  02A4               	subwf	___awdiv@counter,f
  3484  0E43  1D03               	btfss	3,2
  3485  0E44  2E24               	goto	l3426
  3486  0E45                     l3436:	
  3487  0E45  0825               	movf	___awdiv@sign,w
  3488  0E46  1903               	btfsc	3,2
  3489  0E47  2E4D               	goto	l3440
  3490  0E48  09A6               	comf	___awdiv@quotient,f
  3491  0E49  09A7               	comf	___awdiv@quotient+1,f
  3492  0E4A  0AA6               	incf	___awdiv@quotient,f
  3493  0E4B  1903               	skipnz
  3494  0E4C  0AA7               	incf	___awdiv@quotient+1,f
  3495  0E4D                     l3440:	
  3496  0E4D  0827               	movf	___awdiv@quotient+1,w
  3497  0E4E  00A1               	movwf	?___awdiv+1
  3498  0E4F  0826               	movf	___awdiv@quotient,w
  3499  0E50  00A0               	movwf	?___awdiv
  3500  0E51  0008               	return
  3501  0E52                     __end_of___awdiv:	
  3502                           
  3503                           	psect	text11
  3504  0BDE                     __ptext11:	
  3505 ;; *************** function _LCD_Write_String *****************
  3506 ;; Defined at:
  3507 ;;		line 73 in file "LCD_8bits.c"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;  a               1    wreg     PTR unsigned char 
  3510 ;;		 -> STR_20(6), STR_19(4), STR_18(4), STR_17(13), 
  3511 ;;		 -> STR_16(4), STR_15(4), STR_14(13), STR_13(4), 
  3512 ;;		 -> STR_12(4), STR_11(13), STR_10(2), STR_9(2), 
  3513 ;;		 -> STR_8(13), STR_7(4), STR_6(3), STR_5(9), 
  3514 ;;		 -> STR_4(3), STR_3(17), STR_2(10), STR_1(3), 
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  a               1    6[COMMON] PTR unsigned char 
  3517 ;;		 -> STR_20(6), STR_19(4), STR_18(4), STR_17(13), 
  3518 ;;		 -> STR_16(4), STR_15(4), STR_14(13), STR_13(4), 
  3519 ;;		 -> STR_12(4), STR_11(13), STR_10(2), STR_9(2), 
  3520 ;;		 -> STR_8(13), STR_7(4), STR_6(3), STR_5(9), 
  3521 ;;		 -> STR_4(3), STR_3(17), STR_2(10), STR_1(3), 
  3522 ;;  n               2    4[COMMON] int 
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  1    wreg      void 
  3525 ;; Registers used:
  3526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3532 ;;      Params:         0       0       0       0       0
  3533 ;;      Locals:         3       0       0       0       0
  3534 ;;      Temps:          0       0       0       0       0
  3535 ;;      Totals:         3       0       0       0       0
  3536 ;;Total ram usage:        3 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    2
  3539 ;; This function calls:
  3540 ;;		_LCD_Write_Character
  3541 ;; This function is called by:
  3542 ;;		_display_Datum
  3543 ;;		_mostrarLCD
  3544 ;; This function uses a non-reentrant model
  3545 ;;
  3546                           
  3547                           
  3548                           ;psect for function _LCD_Write_String
  3549  0BDE                     _LCD_Write_String:	
  3550                           
  3551                           ;incstack = 0
  3552                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3553                           ;LCD_Write_String@a stored from wreg
  3554  0BDE  00F6               	movwf	LCD_Write_String@a
  3555                           
  3556                           ;LCD_8bits.c: 74:     int n;;LCD_8bits.c: 75:     for(n = 0; a[n] != '\0'; n++){
  3557  0BDF  01F4               	clrf	LCD_Write_String@n
  3558  0BE0  01F5               	clrf	LCD_Write_String@n+1
  3559  0BE1                     l2224:	
  3560  0BE1  0874               	movf	LCD_Write_String@n,w
  3561  0BE2  0776               	addwf	LCD_Write_String@a,w
  3562  0BE3  0084               	movwf	4
  3563  0BE4  120A  118A  2700  120A  158A  	fcall	stringdir
  3564  0BE9  3A00               	xorlw	0
  3565  0BEA  1903               	btfsc	3,2
  3566  0BEB  0008               	return
  3567                           
  3568                           ;LCD_8bits.c: 76:         LCD_Write_Character(a[n]);
  3569  0BEC  0874               	movf	LCD_Write_String@n,w
  3570  0BED  0776               	addwf	LCD_Write_String@a,w
  3571  0BEE  0084               	movwf	4
  3572  0BEF  120A  118A  2700  120A  158A  	fcall	stringdir
  3573  0BF4  120A  158A  234E  120A  158A  	fcall	_LCD_Write_Character
  3574                           
  3575                           ;LCD_8bits.c: 77:     }
  3576  0BF9  3001               	movlw	1
  3577  0BFA  07F4               	addwf	LCD_Write_String@n,f
  3578  0BFB  1803               	skipnc
  3579  0BFC  0AF5               	incf	LCD_Write_String@n+1,f
  3580  0BFD  3000               	movlw	0
  3581  0BFE  07F5               	addwf	LCD_Write_String@n+1,f
  3582  0BFF  2BE1               	goto	l2224
  3583  0C00                     __end_of_LCD_Write_String:	
  3584                           
  3585                           	psect	text12
  3586  0C7D                     __ptext12:	
  3587 ;; *************** function _LCD_Set_Cursor *****************
  3588 ;; Defined at:
  3589 ;;		line 80 in file "LCD_8bits.c"
  3590 ;; Parameters:    Size  Location     Type
  3591 ;;  linea           1    wreg     unsigned char 
  3592 ;;  columna         1    5[COMMON] unsigned char 
  3593 ;; Auto vars:     Size  Location     Type
  3594 ;;  linea           1    8[COMMON] unsigned char 
  3595 ;;  corrimiento     1    9[COMMON] unsigned char 
  3596 ;; Return value:  Size  Location     Type
  3597 ;;                  1    wreg      void 
  3598 ;; Registers used:
  3599 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3600 ;; Tracked objects:
  3601 ;;		On entry : 0/0
  3602 ;;		On exit  : 0/0
  3603 ;;		Unchanged: 0/0
  3604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3605 ;;      Params:         1       0       0       0       0
  3606 ;;      Locals:         2       0       0       0       0
  3607 ;;      Temps:          2       0       0       0       0
  3608 ;;      Totals:         5       0       0       0       0
  3609 ;;Total ram usage:        5 bytes
  3610 ;; Hardware stack levels used:    1
  3611 ;; Hardware stack levels required when called:    2
  3612 ;; This function calls:
  3613 ;;		_LCD_Cmd
  3614 ;; This function is called by:
  3615 ;;		_display_Uhrzeit
  3616 ;;		_display_Datum
  3617 ;;		_mostrarLCD
  3618 ;;		_pressBoton2
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           
  3623                           ;psect for function _LCD_Set_Cursor
  3624  0C7D                     _LCD_Set_Cursor:	
  3625                           
  3626                           ;incstack = 0
  3627                           ; Regs used in _LCD_Set_Cursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3628                           ;LCD_Set_Cursor@linea stored from wreg
  3629  0C7D  00F8               	movwf	LCD_Set_Cursor@linea
  3630                           
  3631                           ;LCD_8bits.c: 82:     switch (linea){
  3632  0C7E  2C98               	goto	l2212
  3633  0C7F                     l2202:	
  3634                           
  3635                           ;LCD_8bits.c: 84:             corrimiento = 0x80 + columna;
  3636  0C7F  0875               	movf	LCD_Set_Cursor@columna,w
  3637  0C80  3E80               	addlw	128
  3638  0C81  00F6               	movwf	??_LCD_Set_Cursor
  3639  0C82  0876               	movf	??_LCD_Set_Cursor,w
  3640  0C83  00F9               	movwf	LCD_Set_Cursor@corrimiento
  3641                           
  3642                           ;LCD_8bits.c: 85:             LCD_Cmd(corrimiento);
  3643  0C84  0879               	movf	LCD_Set_Cursor@corrimiento,w
  3644  0C85  120A  158A  24A9   	fcall	_LCD_Cmd
  3645                           
  3646                           ;LCD_8bits.c: 86:             break;
  3647  0C88  0008               	return
  3648  0C89                     l2206:	
  3649                           
  3650                           ;LCD_8bits.c: 88:             corrimiento = 0x80 + 0x40 + columna;
  3651  0C89  0875               	movf	LCD_Set_Cursor@columna,w
  3652  0C8A  3EC0               	addlw	192
  3653  0C8B  00F6               	movwf	??_LCD_Set_Cursor
  3654  0C8C  0876               	movf	??_LCD_Set_Cursor,w
  3655  0C8D  00F9               	movwf	LCD_Set_Cursor@corrimiento
  3656                           
  3657                           ;LCD_8bits.c: 89:             LCD_Cmd(corrimiento);
  3658  0C8E  0879               	movf	LCD_Set_Cursor@corrimiento,w
  3659  0C8F  120A  158A  24A9   	fcall	_LCD_Cmd
  3660                           
  3661                           ;LCD_8bits.c: 90:             break;
  3662  0C92  0008               	return
  3663  0C93                     l2210:	
  3664                           
  3665                           ;LCD_8bits.c: 92:             LCD_Cmd(0x80);
  3666  0C93  3080               	movlw	128
  3667  0C94  120A  158A  24A9   	fcall	_LCD_Cmd
  3668                           
  3669                           ;LCD_8bits.c: 93:     }
  3670  0C97  0008               	return
  3671  0C98                     l2212:	
  3672  0C98  0878               	movf	LCD_Set_Cursor@linea,w
  3673  0C99  00F6               	movwf	??_LCD_Set_Cursor
  3674  0C9A  01F7               	clrf	??_LCD_Set_Cursor+1
  3675                           
  3676                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3677                           ; Switch size 1, requested type "simple"
  3678                           ; Number of cases is 1, Range of values is 0 to 0
  3679                           ; switch strategies available:
  3680                           ; Name         Instructions Cycles
  3681                           ; simple_byte            4     3 (average)
  3682                           ; direct_byte           11     8 (fixed)
  3683                           ; jumptable            260     6 (fixed)
  3684                           ;	Chosen strategy is simple_byte
  3685  0C9B  0877               	movf	??_LCD_Set_Cursor+1,w
  3686  0C9C  3A00               	xorlw	0	; case 0
  3687  0C9D  1903               	skipnz
  3688  0C9E  2CA0               	goto	l4160
  3689  0C9F  2C93               	goto	l2210
  3690  0CA0                     l4160:	
  3691                           
  3692                           ; Switch size 1, requested type "simple"
  3693                           ; Number of cases is 2, Range of values is 1 to 2
  3694                           ; switch strategies available:
  3695                           ; Name         Instructions Cycles
  3696                           ; simple_byte            7     4 (average)
  3697                           ; direct_byte           17    11 (fixed)
  3698                           ; jumptable            263     9 (fixed)
  3699                           ;	Chosen strategy is simple_byte
  3700  0CA0  0876               	movf	??_LCD_Set_Cursor,w
  3701  0CA1  3A01               	xorlw	1	; case 1
  3702  0CA2  1903               	skipnz
  3703  0CA3  2C7F               	goto	l2202
  3704  0CA4  3A03               	xorlw	3	; case 2
  3705  0CA5  1903               	skipnz
  3706  0CA6  2C89               	goto	l2206
  3707  0CA7  2C93               	goto	l2210
  3708  0CA8  0008               	return
  3709  0CA9                     __end_of_LCD_Set_Cursor:	
  3710                           
  3711                           	psect	text13
  3712  0250                     __ptext13:	
  3713 ;; *************** function _get_Time *****************
  3714 ;; Defined at:
  3715 ;;		line 78 in file "RTC.c"
  3716 ;; Parameters:    Size  Location     Type
  3717 ;;		None
  3718 ;; Auto vars:     Size  Location     Type
  3719 ;;		None
  3720 ;; Return value:  Size  Location     Type
  3721 ;;                  1    wreg      void 
  3722 ;; Registers used:
  3723 ;;		wreg, status,2, status,0, pclath, cstack
  3724 ;; Tracked objects:
  3725 ;;		On entry : 0/0
  3726 ;;		On exit  : 0/0
  3727 ;;		Unchanged: 0/0
  3728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3729 ;;      Params:         0       0       0       0       0
  3730 ;;      Locals:         0       0       0       0       0
  3731 ;;      Temps:          0       1       0       0       0
  3732 ;;      Totals:         0       1       0       0       0
  3733 ;;Total ram usage:        1 bytes
  3734 ;; Hardware stack levels used:    1
  3735 ;; Hardware stack levels required when called:    3
  3736 ;; This function calls:
  3737 ;;		_BCD_a_DEC
  3738 ;;		_I2C_Master_Read
  3739 ;;		_I2C_Master_Start
  3740 ;;		_I2C_Master_Stop
  3741 ;;		_I2C_Master_Write
  3742 ;; This function is called by:
  3743 ;;		_main
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747                           
  3748                           ;psect for function _get_Time
  3749  0250                     _get_Time:	
  3750                           
  3751                           ;RTC.c: 79:     I2C_Master_Start();
  3752                           
  3753                           ;incstack = 0
  3754                           ; Regs used in _get_Time: [wreg+status,2+status,0+pclath+cstack]
  3755  0250  120A  158A  2328  120A  118A  	fcall	_I2C_Master_Start
  3756                           
  3757                           ;RTC.c: 80:     I2C_Master_Write(0xD0);
  3758  0255  30D0               	movlw	208
  3759  0256  00F2               	movwf	I2C_Master_Write@d
  3760  0257  3000               	movlw	0
  3761  0258  00F3               	movwf	I2C_Master_Write@d+1
  3762  0259  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  3763                           
  3764                           ;RTC.c: 81:     I2C_Master_Write(0);
  3765  025E  3000               	movlw	0
  3766  025F  00F2               	movwf	I2C_Master_Write@d
  3767  0260  00F3               	movwf	I2C_Master_Write@d+1
  3768  0261  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  3769                           
  3770                           ;RTC.c: 82:     I2C_Master_Stop();
  3771  0266  120A  158A  232F  120A  118A  	fcall	_I2C_Master_Stop
  3772                           
  3773                           ;RTC.c: 83:     I2C_Master_Start();
  3774  026B  120A  158A  2328  120A  118A  	fcall	_I2C_Master_Start
  3775                           
  3776                           ;RTC.c: 84:     I2C_Master_Write(0xD1);
  3777  0270  30D1               	movlw	209
  3778  0271  00F2               	movwf	I2C_Master_Write@d
  3779  0272  3000               	movlw	0
  3780  0273  00F3               	movwf	I2C_Master_Write@d+1
  3781  0274  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  3782                           
  3783                           ;RTC.c: 85:     seg = BCD_a_DEC(I2C_Master_Read(0));
  3784  0279  3000               	movlw	0
  3785  027A  00F2               	movwf	I2C_Master_Read@a
  3786  027B  00F3               	movwf	I2C_Master_Read@a+1
  3787  027C  120A  158A  2451  120A  118A  	fcall	_I2C_Master_Read
  3788  0281  0872               	movf	?_I2C_Master_Read,w
  3789  0282  120A  158A  23A7  120A  118A  	fcall	_BCD_a_DEC
  3790  0287  1283               	bcf	3,5	;RP0=0, select bank0
  3791  0288  1303               	bcf	3,6	;RP1=0, select bank0
  3792  0289  00A0               	movwf	??_get_Time
  3793  028A  0820               	movf	??_get_Time,w
  3794  028B  00C5               	movwf	_seg
  3795                           
  3796                           ;RTC.c: 86:     I2C_Master_Stop();
  3797  028C  120A  158A  232F  120A  118A  	fcall	_I2C_Master_Stop
  3798                           
  3799                           ;RTC.c: 88:     I2C_Master_Start();
  3800  0291  120A  158A  2328  120A  118A  	fcall	_I2C_Master_Start
  3801                           
  3802                           ;RTC.c: 89:     I2C_Master_Write(0xD0);
  3803  0296  30D0               	movlw	208
  3804  0297  00F2               	movwf	I2C_Master_Write@d
  3805  0298  3000               	movlw	0
  3806  0299  00F3               	movwf	I2C_Master_Write@d+1
  3807  029A  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  3808                           
  3809                           ;RTC.c: 90:     I2C_Master_Write(1);
  3810  029F  3001               	movlw	1
  3811  02A0  00F2               	movwf	I2C_Master_Write@d
  3812  02A1  3000               	movlw	0
  3813  02A2  00F3               	movwf	I2C_Master_Write@d+1
  3814  02A3  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  3815                           
  3816                           ;RTC.c: 91:     I2C_Master_Stop();
  3817  02A8  120A  158A  232F  120A  118A  	fcall	_I2C_Master_Stop
  3818                           
  3819                           ;RTC.c: 92:     I2C_Master_Start();
  3820  02AD  120A  158A  2328  120A  118A  	fcall	_I2C_Master_Start
  3821                           
  3822                           ;RTC.c: 93:     I2C_Master_Write(0xD1);
  3823  02B2  30D1               	movlw	209
  3824  02B3  00F2               	movwf	I2C_Master_Write@d
  3825  02B4  3000               	movlw	0
  3826  02B5  00F3               	movwf	I2C_Master_Write@d+1
  3827  02B6  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  3828                           
  3829                           ;RTC.c: 94:     min = BCD_a_DEC(I2C_Master_Read(0));
  3830  02BB  3000               	movlw	0
  3831  02BC  00F2               	movwf	I2C_Master_Read@a
  3832  02BD  00F3               	movwf	I2C_Master_Read@a+1
  3833  02BE  120A  158A  2451  120A  118A  	fcall	_I2C_Master_Read
  3834  02C3  0872               	movf	?_I2C_Master_Read,w
  3835  02C4  120A  158A  23A7  120A  118A  	fcall	_BCD_a_DEC
  3836  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  3837  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  3838  02CB  00A0               	movwf	??_get_Time
  3839  02CC  0820               	movf	??_get_Time,w
  3840  02CD  00CD               	movwf	_min
  3841                           
  3842                           ;RTC.c: 95:     I2C_Master_Stop();
  3843  02CE  120A  158A  232F  120A  118A  	fcall	_I2C_Master_Stop
  3844                           
  3845                           ;RTC.c: 97:     I2C_Master_Start();
  3846  02D3  120A  158A  2328  120A  118A  	fcall	_I2C_Master_Start
  3847                           
  3848                           ;RTC.c: 98:     I2C_Master_Write(0xD0);
  3849  02D8  30D0               	movlw	208
  3850  02D9  00F2               	movwf	I2C_Master_Write@d
  3851  02DA  3000               	movlw	0
  3852  02DB  00F3               	movwf	I2C_Master_Write@d+1
  3853  02DC  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  3854                           
  3855                           ;RTC.c: 99:     I2C_Master_Write(2);
  3856  02E1  3002               	movlw	2
  3857  02E2  00F2               	movwf	I2C_Master_Write@d
  3858  02E3  3000               	movlw	0
  3859  02E4  00F3               	movwf	I2C_Master_Write@d+1
  3860  02E5  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  3861                           
  3862                           ;RTC.c: 100:     I2C_Master_Stop();
  3863  02EA  120A  158A  232F  120A  118A  	fcall	_I2C_Master_Stop
  3864                           
  3865                           ;RTC.c: 101:     I2C_Master_Start();
  3866  02EF  120A  158A  2328  120A  118A  	fcall	_I2C_Master_Start
  3867                           
  3868                           ;RTC.c: 102:     I2C_Master_Write(0xD1);
  3869  02F4  30D1               	movlw	209
  3870  02F5  00F2               	movwf	I2C_Master_Write@d
  3871  02F6  3000               	movlw	0
  3872  02F7  00F3               	movwf	I2C_Master_Write@d+1
  3873  02F8  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  3874                           
  3875                           ;RTC.c: 103:     hora = BCD_a_DEC(I2C_Master_Read(0));
  3876  02FD  3000               	movlw	0
  3877  02FE  00F2               	movwf	I2C_Master_Read@a
  3878  02FF  00F3               	movwf	I2C_Master_Read@a+1
  3879  0300  120A  158A  2451  120A  118A  	fcall	_I2C_Master_Read
  3880  0305  0872               	movf	?_I2C_Master_Read,w
  3881  0306  120A  158A  23A7  120A  118A  	fcall	_BCD_a_DEC
  3882  030B  1283               	bcf	3,5	;RP0=0, select bank0
  3883  030C  1303               	bcf	3,6	;RP1=0, select bank0
  3884  030D  00A0               	movwf	??_get_Time
  3885  030E  0820               	movf	??_get_Time,w
  3886  030F  00CC               	movwf	_hora
  3887                           
  3888                           ;RTC.c: 104:     I2C_Master_Stop();
  3889  0310  120A  158A  232F  120A  118A  	fcall	_I2C_Master_Stop
  3890                           
  3891                           ;RTC.c: 107:     I2C_Master_Start();
  3892  0315  120A  158A  2328  120A  118A  	fcall	_I2C_Master_Start
  3893                           
  3894                           ;RTC.c: 108:     I2C_Master_Write(0xD0);
  3895  031A  30D0               	movlw	208
  3896  031B  00F2               	movwf	I2C_Master_Write@d
  3897  031C  3000               	movlw	0
  3898  031D  00F3               	movwf	I2C_Master_Write@d+1
  3899  031E  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  3900                           
  3901                           ;RTC.c: 109:     I2C_Master_Write(3);
  3902  0323  3003               	movlw	3
  3903  0324  00F2               	movwf	I2C_Master_Write@d
  3904  0325  3000               	movlw	0
  3905  0326  00F3               	movwf	I2C_Master_Write@d+1
  3906  0327  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  3907                           
  3908                           ;RTC.c: 110:     I2C_Master_Stop();
  3909  032C  120A  158A  232F  120A  118A  	fcall	_I2C_Master_Stop
  3910                           
  3911                           ;RTC.c: 111:     I2C_Master_Start();
  3912  0331  120A  158A  2328  120A  118A  	fcall	_I2C_Master_Start
  3913                           
  3914                           ;RTC.c: 112:     I2C_Master_Write(0xD1);
  3915  0336  30D1               	movlw	209
  3916  0337  00F2               	movwf	I2C_Master_Write@d
  3917  0338  3000               	movlw	0
  3918  0339  00F3               	movwf	I2C_Master_Write@d+1
  3919  033A  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  3920                           
  3921                           ;RTC.c: 113:     dia = BCD_a_DEC(I2C_Master_Read(0));
  3922  033F  3000               	movlw	0
  3923  0340  00F2               	movwf	I2C_Master_Read@a
  3924  0341  00F3               	movwf	I2C_Master_Read@a+1
  3925  0342  120A  158A  2451  120A  118A  	fcall	_I2C_Master_Read
  3926  0347  0872               	movf	?_I2C_Master_Read,w
  3927  0348  120A  158A  23A7  120A  118A  	fcall	_BCD_a_DEC
  3928  034D  1283               	bcf	3,5	;RP0=0, select bank0
  3929  034E  1303               	bcf	3,6	;RP1=0, select bank0
  3930  034F  00A0               	movwf	??_get_Time
  3931  0350  0820               	movf	??_get_Time,w
  3932  0351  00CB               	movwf	_dia
  3933                           
  3934                           ;RTC.c: 114:     I2C_Master_Stop();
  3935  0352  120A  158A  232F  120A  118A  	fcall	_I2C_Master_Stop
  3936                           
  3937                           ;RTC.c: 116:     I2C_Master_Start();
  3938  0357  120A  158A  2328  120A  118A  	fcall	_I2C_Master_Start
  3939                           
  3940                           ;RTC.c: 117:     I2C_Master_Write(0xD0);
  3941  035C  30D0               	movlw	208
  3942  035D  00F2               	movwf	I2C_Master_Write@d
  3943  035E  3000               	movlw	0
  3944  035F  00F3               	movwf	I2C_Master_Write@d+1
  3945  0360  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  3946                           
  3947                           ;RTC.c: 118:     I2C_Master_Write(4);
  3948  0365  3004               	movlw	4
  3949  0366  00F2               	movwf	I2C_Master_Write@d
  3950  0367  3000               	movlw	0
  3951  0368  00F3               	movwf	I2C_Master_Write@d+1
  3952  0369  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  3953                           
  3954                           ;RTC.c: 119:     I2C_Master_Stop();
  3955  036E  120A  158A  232F  120A  118A  	fcall	_I2C_Master_Stop
  3956                           
  3957                           ;RTC.c: 120:     I2C_Master_Start();
  3958  0373  120A  158A  2328  120A  118A  	fcall	_I2C_Master_Start
  3959                           
  3960                           ;RTC.c: 121:     I2C_Master_Write(0xD1);
  3961  0378  30D1               	movlw	209
  3962  0379  00F2               	movwf	I2C_Master_Write@d
  3963  037A  3000               	movlw	0
  3964  037B  00F3               	movwf	I2C_Master_Write@d+1
  3965  037C  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  3966                           
  3967                           ;RTC.c: 122:     datum = BCD_a_DEC(I2C_Master_Read(0));
  3968  0381  3000               	movlw	0
  3969  0382  00F2               	movwf	I2C_Master_Read@a
  3970  0383  00F3               	movwf	I2C_Master_Read@a+1
  3971  0384  120A  158A  2451  120A  118A  	fcall	_I2C_Master_Read
  3972  0389  0872               	movf	?_I2C_Master_Read,w
  3973  038A  120A  158A  23A7  120A  118A  	fcall	_BCD_a_DEC
  3974  038F  1283               	bcf	3,5	;RP0=0, select bank0
  3975  0390  1303               	bcf	3,6	;RP1=0, select bank0
  3976  0391  00A0               	movwf	??_get_Time
  3977  0392  0820               	movf	??_get_Time,w
  3978  0393  00CA               	movwf	_datum
  3979                           
  3980                           ;RTC.c: 123:     I2C_Master_Stop();
  3981  0394  120A  158A  232F  120A  118A  	fcall	_I2C_Master_Stop
  3982                           
  3983                           ;RTC.c: 125:     I2C_Master_Start();
  3984  0399  120A  158A  2328  120A  118A  	fcall	_I2C_Master_Start
  3985                           
  3986                           ;RTC.c: 126:     I2C_Master_Write(0xD0);
  3987  039E  30D0               	movlw	208
  3988  039F  00F2               	movwf	I2C_Master_Write@d
  3989  03A0  3000               	movlw	0
  3990  03A1  00F3               	movwf	I2C_Master_Write@d+1
  3991  03A2  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  3992                           
  3993                           ;RTC.c: 127:     I2C_Master_Write(5);
  3994  03A7  3005               	movlw	5
  3995  03A8  00F2               	movwf	I2C_Master_Write@d
  3996  03A9  3000               	movlw	0
  3997  03AA  00F3               	movwf	I2C_Master_Write@d+1
  3998  03AB  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  3999                           
  4000                           ;RTC.c: 128:     I2C_Master_Stop();
  4001  03B0  120A  158A  232F  120A  118A  	fcall	_I2C_Master_Stop
  4002                           
  4003                           ;RTC.c: 129:     I2C_Master_Start();
  4004  03B5  120A  158A  2328  120A  118A  	fcall	_I2C_Master_Start
  4005                           
  4006                           ;RTC.c: 130:     I2C_Master_Write(0xD1);
  4007  03BA  30D1               	movlw	209
  4008  03BB  00F2               	movwf	I2C_Master_Write@d
  4009  03BC  3000               	movlw	0
  4010  03BD  00F3               	movwf	I2C_Master_Write@d+1
  4011  03BE  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  4012                           
  4013                           ;RTC.c: 131:     mes = BCD_a_DEC(I2C_Master_Read(0));
  4014  03C3  3000               	movlw	0
  4015  03C4  00F2               	movwf	I2C_Master_Read@a
  4016  03C5  00F3               	movwf	I2C_Master_Read@a+1
  4017  03C6  120A  158A  2451  120A  118A  	fcall	_I2C_Master_Read
  4018  03CB  0872               	movf	?_I2C_Master_Read,w
  4019  03CC  120A  158A  23A7  120A  118A  	fcall	_BCD_a_DEC
  4020  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  4021  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  4022  03D3  00A0               	movwf	??_get_Time
  4023  03D4  0820               	movf	??_get_Time,w
  4024  03D5  00C9               	movwf	_mes
  4025                           
  4026                           ;RTC.c: 132:     I2C_Master_Stop();
  4027  03D6  120A  158A  232F  120A  118A  	fcall	_I2C_Master_Stop
  4028                           
  4029                           ;RTC.c: 134:     I2C_Master_Start();
  4030  03DB  120A  158A  2328  120A  118A  	fcall	_I2C_Master_Start
  4031                           
  4032                           ;RTC.c: 135:     I2C_Master_Write(0xD0);
  4033  03E0  30D0               	movlw	208
  4034  03E1  00F2               	movwf	I2C_Master_Write@d
  4035  03E2  3000               	movlw	0
  4036  03E3  00F3               	movwf	I2C_Master_Write@d+1
  4037  03E4  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  4038                           
  4039                           ;RTC.c: 136:     I2C_Master_Write(6);
  4040  03E9  3006               	movlw	6
  4041  03EA  00F2               	movwf	I2C_Master_Write@d
  4042  03EB  3000               	movlw	0
  4043  03EC  00F3               	movwf	I2C_Master_Write@d+1
  4044  03ED  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  4045                           
  4046                           ;RTC.c: 137:     I2C_Master_Stop();
  4047  03F2  120A  158A  232F  120A  118A  	fcall	_I2C_Master_Stop
  4048                           
  4049                           ;RTC.c: 138:     I2C_Master_Start();
  4050  03F7  120A  158A  2328  120A  118A  	fcall	_I2C_Master_Start
  4051                           
  4052                           ;RTC.c: 139:     I2C_Master_Write(0xD1);
  4053  03FC  30D1               	movlw	209
  4054  03FD  00F2               	movwf	I2C_Master_Write@d
  4055  03FE  3000               	movlw	0
  4056  03FF  00F3               	movwf	I2C_Master_Write@d+1
  4057  0400  120A  158A  233D  120A  118A  	fcall	_I2C_Master_Write
  4058                           
  4059                           ;RTC.c: 140:     jahr = BCD_a_DEC(I2C_Master_Read(0));
  4060  0405  3000               	movlw	0
  4061  0406  00F2               	movwf	I2C_Master_Read@a
  4062  0407  00F3               	movwf	I2C_Master_Read@a+1
  4063  0408  120A  158A  2451  120A  118A  	fcall	_I2C_Master_Read
  4064  040D  0872               	movf	?_I2C_Master_Read,w
  4065  040E  120A  158A  23A7  120A  118A  	fcall	_BCD_a_DEC
  4066  0413  1283               	bcf	3,5	;RP0=0, select bank0
  4067  0414  1303               	bcf	3,6	;RP1=0, select bank0
  4068  0415  00A0               	movwf	??_get_Time
  4069  0416  0820               	movf	??_get_Time,w
  4070  0417  00C8               	movwf	_jahr
  4071                           
  4072                           ;RTC.c: 141:     I2C_Master_Stop();
  4073  0418  120A  158A  232F   	fcall	_I2C_Master_Stop
  4074  041B  0008               	return
  4075  041C                     __end_of_get_Time:	
  4076                           
  4077                           	psect	text14
  4078  0BA7                     __ptext14:	
  4079 ;; *************** function _BCD_a_DEC *****************
  4080 ;; Defined at:
  4081 ;;		line 27 in file "RTC.c"
  4082 ;; Parameters:    Size  Location     Type
  4083 ;;  numBCD          1    wreg     unsigned char 
  4084 ;; Auto vars:     Size  Location     Type
  4085 ;;  numBCD          1    9[COMMON] unsigned char 
  4086 ;; Return value:  Size  Location     Type
  4087 ;;                  1    wreg      unsigned char 
  4088 ;; Registers used:
  4089 ;;		wreg, status,2, status,0, pclath, cstack
  4090 ;; Tracked objects:
  4091 ;;		On entry : 0/0
  4092 ;;		On exit  : 0/0
  4093 ;;		Unchanged: 0/0
  4094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4095 ;;      Params:         0       0       0       0       0
  4096 ;;      Locals:         1       0       0       0       0
  4097 ;;      Temps:          3       0       0       0       0
  4098 ;;      Totals:         4       0       0       0       0
  4099 ;;Total ram usage:        4 bytes
  4100 ;; Hardware stack levels used:    1
  4101 ;; Hardware stack levels required when called:    2
  4102 ;; This function calls:
  4103 ;;		___bmul
  4104 ;; This function is called by:
  4105 ;;		_get_Time
  4106 ;;		_get_hora
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           
  4111                           ;psect for function _BCD_a_DEC
  4112  0BA7                     _BCD_a_DEC:	
  4113                           
  4114                           ;incstack = 0
  4115                           ; Regs used in _BCD_a_DEC: [wreg+status,2+status,0+pclath+cstack]
  4116                           ;BCD_a_DEC@numBCD stored from wreg
  4117  0BA7  00F9               	movwf	BCD_a_DEC@numBCD
  4118                           
  4119                           ;RTC.c: 28:     return (numBCD >> 4) * 10 + (numBCD & 0x0F);
  4120  0BA8  300F               	movlw	15
  4121  0BA9  0579               	andwf	BCD_a_DEC@numBCD,w
  4122  0BAA  00F6               	movwf	??_BCD_a_DEC
  4123  0BAB  300A               	movlw	10
  4124  0BAC  00F7               	movwf	??_BCD_a_DEC+1
  4125  0BAD  0877               	movf	??_BCD_a_DEC+1,w
  4126  0BAE  00F2               	movwf	___bmul@multiplicand
  4127  0BAF  0879               	movf	BCD_a_DEC@numBCD,w
  4128  0BB0  00F8               	movwf	??_BCD_a_DEC+2
  4129  0BB1  3004               	movlw	4
  4130  0BB2                     u1005:	
  4131  0BB2  1003               	clrc
  4132  0BB3  0CF8               	rrf	??_BCD_a_DEC+2,f
  4133  0BB4  3EFF               	addlw	-1
  4134  0BB5  1D03               	skipz
  4135  0BB6  2BB2               	goto	u1005
  4136  0BB7  0878               	movf	??_BCD_a_DEC+2,w
  4137  0BB8  120A  158A  236F   	fcall	___bmul
  4138  0BBB  0776               	addwf	??_BCD_a_DEC,w
  4139  0BBC  0008               	return
  4140  0BBD                     __end_of_BCD_a_DEC:	
  4141                           
  4142                           	psect	text15
  4143  0B6F                     __ptext15:	
  4144 ;; *************** function ___bmul *****************
  4145 ;; Defined at:
  4146 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;  multiplier      1    wreg     unsigned char 
  4149 ;;  multiplicand    1    2[COMMON] unsigned char 
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;  multiplier      1    5[COMMON] unsigned char 
  4152 ;;  product         1    4[COMMON] unsigned char 
  4153 ;; Return value:  Size  Location     Type
  4154 ;;                  1    wreg      unsigned char 
  4155 ;; Registers used:
  4156 ;;		wreg, status,2, status,0
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4162 ;;      Params:         1       0       0       0       0
  4163 ;;      Locals:         2       0       0       0       0
  4164 ;;      Temps:          1       0       0       0       0
  4165 ;;      Totals:         4       0       0       0       0
  4166 ;;Total ram usage:        4 bytes
  4167 ;; Hardware stack levels used:    1
  4168 ;; Hardware stack levels required when called:    1
  4169 ;; This function calls:
  4170 ;;		Nothing
  4171 ;; This function is called by:
  4172 ;;		_BCD_a_DEC
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           
  4177                           ;psect for function ___bmul
  4178  0B6F                     ___bmul:	
  4179                           
  4180                           ;incstack = 0
  4181                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4182                           ;___bmul@multiplier stored from wreg
  4183  0B6F  00F5               	movwf	___bmul@multiplier
  4184  0B70  01F4               	clrf	___bmul@product
  4185  0B71                     l2246:	
  4186  0B71  1C75               	btfss	___bmul@multiplier,0
  4187  0B72  2B77               	goto	l2250
  4188  0B73  0872               	movf	___bmul@multiplicand,w
  4189  0B74  00F3               	movwf	??___bmul
  4190  0B75  0873               	movf	??___bmul,w
  4191  0B76  07F4               	addwf	___bmul@product,f
  4192  0B77                     l2250:	
  4193  0B77  1003               	clrc
  4194  0B78  0DF2               	rlf	___bmul@multiplicand,f
  4195  0B79  1003               	clrc
  4196  0B7A  0CF5               	rrf	___bmul@multiplier,f
  4197  0B7B  0875               	movf	___bmul@multiplier,w
  4198  0B7C  1D03               	btfss	3,2
  4199  0B7D  2B71               	goto	l2246
  4200  0B7E  0874               	movf	___bmul@product,w
  4201  0B7F  0008               	return
  4202  0B80                     __end_of___bmul:	
  4203                           
  4204                           	psect	text16
  4205  0D12                     __ptext16:	
  4206 ;; *************** function _get_Temp *****************
  4207 ;; Defined at:
  4208 ;;		line 144 in file "RTC.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;		None
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;  TempMSB         1    1[BANK0 ] unsigned char 
  4213 ;;  Temp_LSB        1    0        unsigned char 
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  1    wreg      unsigned char 
  4216 ;; Registers used:
  4217 ;;		wreg, status,2, status,0, pclath, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4223 ;;      Params:         0       0       0       0       0
  4224 ;;      Locals:         0       2       0       0       0
  4225 ;;      Temps:          1       0       0       0       0
  4226 ;;      Totals:         1       2       0       0       0
  4227 ;;Total ram usage:        3 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    3
  4230 ;; This function calls:
  4231 ;;		_I2C_Master_Read
  4232 ;;		_I2C_Master_Start
  4233 ;;		_I2C_Master_Stop
  4234 ;;		_I2C_Master_Write
  4235 ;; This function is called by:
  4236 ;;		_main
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           
  4241                           ;psect for function _get_Temp
  4242  0D12                     _get_Temp:	
  4243                           
  4244                           ;RTC.c: 145:     I2C_Master_Start();
  4245                           
  4246                           ;incstack = 0
  4247                           ; Regs used in _get_Temp: [wreg+status,2+status,0+pclath+cstack]
  4248  0D12  120A  158A  2328  120A  158A  	fcall	_I2C_Master_Start
  4249                           
  4250                           ;RTC.c: 146:     I2C_Master_Write(0xD0);
  4251  0D17  30D0               	movlw	208
  4252  0D18  00F2               	movwf	I2C_Master_Write@d
  4253  0D19  3000               	movlw	0
  4254  0D1A  00F3               	movwf	I2C_Master_Write@d+1
  4255  0D1B  120A  158A  233D  120A  158A  	fcall	_I2C_Master_Write
  4256                           
  4257                           ;RTC.c: 147:     I2C_Master_Write(0x11);
  4258  0D20  3011               	movlw	17
  4259  0D21  00F2               	movwf	I2C_Master_Write@d
  4260  0D22  3000               	movlw	0
  4261  0D23  00F3               	movwf	I2C_Master_Write@d+1
  4262  0D24  120A  158A  233D  120A  158A  	fcall	_I2C_Master_Write
  4263                           
  4264                           ;RTC.c: 148:     I2C_Master_Stop();
  4265  0D29  120A  158A  232F  120A  158A  	fcall	_I2C_Master_Stop
  4266                           
  4267                           ;RTC.c: 150:     I2C_Master_Start();
  4268  0D2E  120A  158A  2328  120A  158A  	fcall	_I2C_Master_Start
  4269                           
  4270                           ;RTC.c: 151:     I2C_Master_Write(0xD1);
  4271  0D33  30D1               	movlw	209
  4272  0D34  00F2               	movwf	I2C_Master_Write@d
  4273  0D35  3000               	movlw	0
  4274  0D36  00F3               	movwf	I2C_Master_Write@d+1
  4275  0D37  120A  158A  233D  120A  158A  	fcall	_I2C_Master_Write
  4276                           
  4277                           ;RTC.c: 152:     uint8_t TempMSB = I2C_Master_Read(0);
  4278  0D3C  3000               	movlw	0
  4279  0D3D  00F2               	movwf	I2C_Master_Read@a
  4280  0D3E  00F3               	movwf	I2C_Master_Read@a+1
  4281  0D3F  120A  158A  2451  120A  158A  	fcall	_I2C_Master_Read
  4282  0D44  0872               	movf	?_I2C_Master_Read,w
  4283  0D45  00F8               	movwf	??_get_Temp
  4284  0D46  0878               	movf	??_get_Temp,w
  4285  0D47  1283               	bcf	3,5	;RP0=0, select bank0
  4286  0D48  1303               	bcf	3,6	;RP1=0, select bank0
  4287  0D49  00A1               	movwf	get_Temp@TempMSB
  4288  0D4A  3000               	movlw	0
  4289  0D4B  00F2               	movwf	I2C_Master_Read@a
  4290  0D4C  00F3               	movwf	I2C_Master_Read@a+1
  4291  0D4D  120A  158A  2451  120A  158A  	fcall	_I2C_Master_Read
  4292                           
  4293                           ;RTC.c: 154:     I2C_Master_Stop();
  4294  0D52  120A  158A  232F   	fcall	_I2C_Master_Stop
  4295                           
  4296                           ;RTC.c: 156:     return TempMSB;
  4297  0D55  1283               	bcf	3,5	;RP0=0, select bank0
  4298  0D56  1303               	bcf	3,6	;RP1=0, select bank0
  4299  0D57  0821               	movf	get_Temp@TempMSB,w
  4300  0D58  0008               	return
  4301  0D59                     __end_of_get_Temp:	
  4302                           
  4303                           	psect	text17
  4304  0B3D                     __ptext17:	
  4305 ;; *************** function _I2C_Master_Write *****************
  4306 ;; Defined at:
  4307 ;;		line 65 in file "I2C.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;  d               2    2[COMMON] unsigned int 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;		None
  4312 ;; Return value:  Size  Location     Type
  4313 ;;                  1    wreg      void 
  4314 ;; Registers used:
  4315 ;;		wreg, status,2, status,0, pclath, cstack
  4316 ;; Tracked objects:
  4317 ;;		On entry : 0/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4321 ;;      Params:         2       0       0       0       0
  4322 ;;      Locals:         0       0       0       0       0
  4323 ;;      Temps:          0       0       0       0       0
  4324 ;;      Totals:         2       0       0       0       0
  4325 ;;Total ram usage:        2 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; Hardware stack levels required when called:    2
  4328 ;; This function calls:
  4329 ;;		_I2C_Master_Wait
  4330 ;; This function is called by:
  4331 ;;		_get_Time
  4332 ;;		_get_Temp
  4333 ;;		_get_hora
  4334 ;;		_Zeit_Datum_Set
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           
  4339                           ;psect for function _I2C_Master_Write
  4340  0B3D                     _I2C_Master_Write:	
  4341                           
  4342                           ;I2C.c: 65: void I2C_Master_Write(unsigned d);I2C.c: 66: {;I2C.c: 67:     I2C_Master_Wai
      +                          t();
  4343                           
  4344                           ;incstack = 0
  4345                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  4346  0B3D  120A  158A  2345   	fcall	_I2C_Master_Wait
  4347                           
  4348                           ;I2C.c: 68:     SSPBUF = d;
  4349  0B40  0872               	movf	I2C_Master_Write@d,w
  4350  0B41  1283               	bcf	3,5	;RP0=0, select bank0
  4351  0B42  1303               	bcf	3,6	;RP1=0, select bank0
  4352  0B43  0093               	movwf	19	;volatile
  4353  0B44  0008               	return
  4354  0B45                     __end_of_I2C_Master_Write:	
  4355                           
  4356                           	psect	text18
  4357  0B2F                     __ptext18:	
  4358 ;; *************** function _I2C_Master_Stop *****************
  4359 ;; Defined at:
  4360 ;;		line 55 in file "I2C.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;		None
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;		None
  4365 ;; Return value:  Size  Location     Type
  4366 ;;                  1    wreg      void 
  4367 ;; Registers used:
  4368 ;;		wreg, status,2, status,0, pclath, cstack
  4369 ;; Tracked objects:
  4370 ;;		On entry : 0/0
  4371 ;;		On exit  : 0/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4374 ;;      Params:         0       0       0       0       0
  4375 ;;      Locals:         0       0       0       0       0
  4376 ;;      Temps:          0       0       0       0       0
  4377 ;;      Totals:         0       0       0       0       0
  4378 ;;Total ram usage:        0 bytes
  4379 ;; Hardware stack levels used:    1
  4380 ;; Hardware stack levels required when called:    2
  4381 ;; This function calls:
  4382 ;;		_I2C_Master_Wait
  4383 ;; This function is called by:
  4384 ;;		_get_Time
  4385 ;;		_get_Temp
  4386 ;;		_get_hora
  4387 ;;		_Zeit_Datum_Set
  4388 ;; This function uses a non-reentrant model
  4389 ;;
  4390                           
  4391                           
  4392                           ;psect for function _I2C_Master_Stop
  4393  0B2F                     _I2C_Master_Stop:	
  4394                           
  4395                           ;I2C.c: 57:     I2C_Master_Wait();
  4396                           
  4397                           ;incstack = 0
  4398                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  4399  0B2F  120A  158A  2345   	fcall	_I2C_Master_Wait
  4400                           
  4401                           ;I2C.c: 58:     SSPCON2bits.PEN = 1;
  4402  0B32  1683               	bsf	3,5	;RP0=1, select bank1
  4403  0B33  1303               	bcf	3,6	;RP1=0, select bank1
  4404  0B34  1511               	bsf	17,2	;volatile
  4405  0B35  0008               	return
  4406  0B36                     __end_of_I2C_Master_Stop:	
  4407                           
  4408                           	psect	text19
  4409  0B28                     __ptext19:	
  4410 ;; *************** function _I2C_Master_Start *****************
  4411 ;; Defined at:
  4412 ;;		line 39 in file "I2C.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;		None
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;		None
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      void 
  4419 ;; Registers used:
  4420 ;;		wreg, status,2, status,0, pclath, cstack
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4426 ;;      Params:         0       0       0       0       0
  4427 ;;      Locals:         0       0       0       0       0
  4428 ;;      Temps:          0       0       0       0       0
  4429 ;;      Totals:         0       0       0       0       0
  4430 ;;Total ram usage:        0 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:    2
  4433 ;; This function calls:
  4434 ;;		_I2C_Master_Wait
  4435 ;; This function is called by:
  4436 ;;		_get_Time
  4437 ;;		_get_Temp
  4438 ;;		_get_hora
  4439 ;;		_Zeit_Datum_Set
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           
  4444                           ;psect for function _I2C_Master_Start
  4445  0B28                     _I2C_Master_Start:	
  4446                           
  4447                           ;I2C.c: 41:     I2C_Master_Wait();
  4448                           
  4449                           ;incstack = 0
  4450                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  4451  0B28  120A  158A  2345   	fcall	_I2C_Master_Wait
  4452                           
  4453                           ;I2C.c: 42:     SSPCON2bits.SEN = 1;
  4454  0B2B  1683               	bsf	3,5	;RP0=1, select bank1
  4455  0B2C  1303               	bcf	3,6	;RP1=0, select bank1
  4456  0B2D  1411               	bsf	17,0	;volatile
  4457  0B2E  0008               	return
  4458  0B2F                     __end_of_I2C_Master_Start:	
  4459                           
  4460                           	psect	text20
  4461  0C51                     __ptext20:	
  4462 ;; *************** function _I2C_Master_Read *****************
  4463 ;; Defined at:
  4464 ;;		line 74 in file "I2C.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;  a               2    2[COMMON] unsigned short 
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;  temp            2    6[COMMON] unsigned short 
  4469 ;; Return value:  Size  Location     Type
  4470 ;;                  2    2[COMMON] unsigned short 
  4471 ;; Registers used:
  4472 ;;		wreg, status,2, status,0, pclath, cstack
  4473 ;; Tracked objects:
  4474 ;;		On entry : 0/0
  4475 ;;		On exit  : 0/0
  4476 ;;		Unchanged: 0/0
  4477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4478 ;;      Params:         2       0       0       0       0
  4479 ;;      Locals:         2       0       0       0       0
  4480 ;;      Temps:          2       0       0       0       0
  4481 ;;      Totals:         6       0       0       0       0
  4482 ;;Total ram usage:        6 bytes
  4483 ;; Hardware stack levels used:    1
  4484 ;; Hardware stack levels required when called:    2
  4485 ;; This function calls:
  4486 ;;		_I2C_Master_Wait
  4487 ;; This function is called by:
  4488 ;;		_get_Time
  4489 ;;		_get_Temp
  4490 ;;		_get_hora
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           
  4495                           ;psect for function _I2C_Master_Read
  4496  0C51                     _I2C_Master_Read:	
  4497                           
  4498                           ;I2C.c: 74: unsigned short I2C_Master_Read(unsigned short a);I2C.c: 75: {;I2C.c: 76:    
      +                           unsigned short temp;;I2C.c: 77:     I2C_Master_Wait();
  4499                           
  4500                           ;incstack = 0
  4501                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  4502  0C51  120A  158A  2345  120A  158A  	fcall	_I2C_Master_Wait
  4503                           
  4504                           ;I2C.c: 78:     SSPCON2bits.RCEN = 1;
  4505  0C56  1683               	bsf	3,5	;RP0=1, select bank1
  4506  0C57  1303               	bcf	3,6	;RP1=0, select bank1
  4507  0C58  1591               	bsf	17,3	;volatile
  4508                           
  4509                           ;I2C.c: 79:     I2C_Master_Wait();
  4510  0C59  120A  158A  2345  120A  158A  	fcall	_I2C_Master_Wait
  4511                           
  4512                           ;I2C.c: 80:     temp = SSPBUF;
  4513  0C5E  1283               	bcf	3,5	;RP0=0, select bank0
  4514  0C5F  1303               	bcf	3,6	;RP1=0, select bank0
  4515  0C60  0813               	movf	19,w	;volatile
  4516  0C61  00F4               	movwf	??_I2C_Master_Read
  4517  0C62  01F5               	clrf	??_I2C_Master_Read+1
  4518  0C63  0874               	movf	??_I2C_Master_Read,w
  4519  0C64  00F6               	movwf	I2C_Master_Read@temp
  4520  0C65  0875               	movf	??_I2C_Master_Read+1,w
  4521  0C66  00F7               	movwf	I2C_Master_Read@temp+1
  4522                           
  4523                           ;I2C.c: 81:     I2C_Master_Wait();
  4524  0C67  120A  158A  2345  120A  158A  	fcall	_I2C_Master_Wait
  4525                           
  4526                           ;I2C.c: 82:     if(a == 1){
  4527  0C6C  0372               	decf	I2C_Master_Read@a,w
  4528  0C6D  0473               	iorwf	I2C_Master_Read@a+1,w
  4529  0C6E  1D03               	btfss	3,2
  4530  0C6F  2C74               	goto	l266
  4531                           
  4532                           ;I2C.c: 83:         SSPCON2bits.ACKDT = 0;
  4533  0C70  1683               	bsf	3,5	;RP0=1, select bank1
  4534  0C71  1303               	bcf	3,6	;RP1=0, select bank1
  4535  0C72  1291               	bcf	17,5	;volatile
  4536                           
  4537                           ;I2C.c: 84:     }else{
  4538  0C73  2C77               	goto	l267
  4539  0C74                     l266:	
  4540                           
  4541                           ;I2C.c: 85:         SSPCON2bits.ACKDT = 1;
  4542  0C74  1683               	bsf	3,5	;RP0=1, select bank1
  4543  0C75  1303               	bcf	3,6	;RP1=0, select bank1
  4544  0C76  1691               	bsf	17,5	;volatile
  4545  0C77                     l267:	
  4546                           ;I2C.c: 86:     }
  4547                           
  4548                           
  4549                           ;I2C.c: 87:     SSPCON2bits.ACKEN = 1;
  4550  0C77  1611               	bsf	17,4	;volatile
  4551                           
  4552                           ;I2C.c: 88:     return temp;
  4553  0C78  0877               	movf	I2C_Master_Read@temp+1,w
  4554  0C79  00F3               	movwf	?_I2C_Master_Read+1
  4555  0C7A  0876               	movf	I2C_Master_Read@temp,w
  4556  0C7B  00F2               	movwf	?_I2C_Master_Read
  4557  0C7C  0008               	return
  4558  0C7D                     __end_of_I2C_Master_Read:	
  4559                           
  4560                           	psect	text21
  4561  0B45                     __ptext21:	
  4562 ;; *************** function _I2C_Master_Wait *****************
  4563 ;; Defined at:
  4564 ;;		line 32 in file "I2C.c"
  4565 ;; Parameters:    Size  Location     Type
  4566 ;;		None
  4567 ;; Auto vars:     Size  Location     Type
  4568 ;;		None
  4569 ;; Return value:  Size  Location     Type
  4570 ;;                  1    wreg      void 
  4571 ;; Registers used:
  4572 ;;		wreg, status,2
  4573 ;; Tracked objects:
  4574 ;;		On entry : 0/0
  4575 ;;		On exit  : 0/0
  4576 ;;		Unchanged: 0/0
  4577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4578 ;;      Params:         0       0       0       0       0
  4579 ;;      Locals:         0       0       0       0       0
  4580 ;;      Temps:          0       0       0       0       0
  4581 ;;      Totals:         0       0       0       0       0
  4582 ;;Total ram usage:        0 bytes
  4583 ;; Hardware stack levels used:    1
  4584 ;; Hardware stack levels required when called:    1
  4585 ;; This function calls:
  4586 ;;		Nothing
  4587 ;; This function is called by:
  4588 ;;		_I2C_Master_Start
  4589 ;;		_I2C_Master_Stop
  4590 ;;		_I2C_Master_Write
  4591 ;;		_I2C_Master_Read
  4592 ;;		_I2C_Master_RepeatedStart
  4593 ;; This function uses a non-reentrant model
  4594 ;;
  4595                           
  4596                           
  4597                           ;psect for function _I2C_Master_Wait
  4598  0B45                     _I2C_Master_Wait:	
  4599  0B45                     l248:	
  4600                           ;I2C.c: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  4601                           
  4602                           ;incstack = 0
  4603                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  4604                           
  4605  0B45  1683               	bsf	3,5	;RP0=1, select bank1
  4606  0B46  1303               	bcf	3,6	;RP1=0, select bank1
  4607  0B47  1914               	btfsc	20,2	;volatile
  4608  0B48  2B45               	goto	l248
  4609  0B49  0811               	movf	17,w	;volatile
  4610  0B4A  391F               	andlw	31
  4611  0B4B  1903               	btfsc	3,2
  4612  0B4C  0008               	return
  4613  0B4D  2B45               	goto	l248
  4614  0B4E                     __end_of_I2C_Master_Wait:	
  4615                           
  4616                           	psect	text22
  4617  0788                     __ptext22:	
  4618 ;; *************** function _SetUp *****************
  4619 ;; Defined at:
  4620 ;;		line 130 in file "main_Master.c"
  4621 ;; Parameters:    Size  Location     Type
  4622 ;;		None
  4623 ;; Auto vars:     Size  Location     Type
  4624 ;;		None
  4625 ;; Return value:  Size  Location     Type
  4626 ;;                  1    wreg      void 
  4627 ;; Registers used:
  4628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4629 ;; Tracked objects:
  4630 ;;		On entry : 0/0
  4631 ;;		On exit  : 0/0
  4632 ;;		Unchanged: 0/0
  4633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4634 ;;      Params:         0       0       0       0       0
  4635 ;;      Locals:         0       0       0       0       0
  4636 ;;      Temps:          0       1       0       0       0
  4637 ;;      Totals:         0       1       0       0       0
  4638 ;;Total ram usage:        1 bytes
  4639 ;; Hardware stack levels used:    1
  4640 ;; Hardware stack levels required when called:    3
  4641 ;; This function calls:
  4642 ;;		_I2C_Master_Init
  4643 ;;		_LCD_Create_Char
  4644 ;;		_LCD_clear
  4645 ;;		_LCD_init
  4646 ;;		_OSC_config
  4647 ;; This function is called by:
  4648 ;;		_main
  4649 ;; This function uses a non-reentrant model
  4650 ;;
  4651                           
  4652                           
  4653                           ;psect for function _SetUp
  4654  0788                     _SetUp:	
  4655                           
  4656                           ;main_Master.c: 131:     OSC_config(8000000);
  4657                           
  4658                           ;incstack = 0
  4659                           ; Regs used in _SetUp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4660  0788  3000               	movlw	0
  4661  0789  00F5               	movwf	OSC_config@frecuencia+3
  4662  078A  307A               	movlw	122
  4663  078B  00F4               	movwf	OSC_config@frecuencia+2
  4664  078C  3012               	movlw	18
  4665  078D  00F3               	movwf	OSC_config@frecuencia+1
  4666  078E  3000               	movlw	0
  4667  078F  00F2               	movwf	OSC_config@frecuencia
  4668  0790  120A  118A  25C6  120A  118A  	fcall	_OSC_config
  4669                           
  4670                           ;main_Master.c: 132:     TRISB = 0b00000110;
  4671  0795  3006               	movlw	6
  4672  0796  1683               	bsf	3,5	;RP0=1, select bank1
  4673  0797  1303               	bcf	3,6	;RP1=0, select bank1
  4674  0798  0086               	movwf	6	;volatile
  4675                           
  4676                           ;main_Master.c: 133:     ANSELH = 0;
  4677  0799  1683               	bsf	3,5	;RP0=1, select bank3
  4678  079A  1703               	bsf	3,6	;RP1=1, select bank3
  4679  079B  0189               	clrf	9	;volatile
  4680                           
  4681                           ;main_Master.c: 134:     WPUB = 0b00000110;
  4682  079C  3006               	movlw	6
  4683  079D  1683               	bsf	3,5	;RP0=1, select bank1
  4684  079E  1303               	bcf	3,6	;RP1=0, select bank1
  4685  079F  0095               	movwf	21	;volatile
  4686                           
  4687                           ;main_Master.c: 135:     OPTION_REGbits.nRBPU = 0;
  4688  07A0  1381               	bcf	1,7	;volatile
  4689                           
  4690                           ;main_Master.c: 136:     IOCB = 0b00000110;
  4691  07A1  3006               	movlw	6
  4692  07A2  0096               	movwf	22	;volatile
  4693                           
  4694                           ;main_Master.c: 137:     INTCONbits.RBIE = 1;
  4695  07A3  158B               	bsf	11,3	;volatile
  4696                           
  4697                           ;main_Master.c: 138:     INTCONbits.GIE = 1;
  4698  07A4  178B               	bsf	11,7	;volatile
  4699                           
  4700                           ;main_Master.c: 139:     TRISD = 0;
  4701  07A5  0188               	clrf	8	;volatile
  4702                           
  4703                           ;main_Master.c: 140:     TRISC0 = 0;
  4704  07A6  1007               	bcf	7,0	;volatile
  4705                           
  4706                           ;main_Master.c: 141:     TRISC1 = 0;
  4707  07A7  1087               	bcf	7,1	;volatile
  4708                           
  4709                           ;main_Master.c: 142:     LCD_init();
  4710  07A8  120A  158A  2715  120A  118A  	fcall	_LCD_init
  4711                           
  4712                           ;main_Master.c: 143:     LCD_Create_Char(0, atilde);
  4713  07AD  3011               	movlw	(low ((_atilde-__stringbase)| (0+32768)))& (0+255)
  4714  07AE  1283               	bcf	3,5	;RP0=0, select bank0
  4715  07AF  1303               	bcf	3,6	;RP1=0, select bank0
  4716  07B0  00AE               	movwf	??_SetUp
  4717  07B1  082E               	movf	??_SetUp,w
  4718  07B2  00F5               	movwf	LCD_Create_Char@chardata
  4719  07B3  3000               	movlw	0
  4720  07B4  120A  158A  2425  120A  118A  	fcall	_LCD_Create_Char
  4721                           
  4722                           ;main_Master.c: 144:     LCD_Create_Char(1, arrowr);
  4723  07B9  3021               	movlw	(low ((_arrowr-__stringbase)| (0+32768)))& (0+255)
  4724  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  4725  07BB  1303               	bcf	3,6	;RP1=0, select bank0
  4726  07BC  00AE               	movwf	??_SetUp
  4727  07BD  082E               	movf	??_SetUp,w
  4728  07BE  00F5               	movwf	LCD_Create_Char@chardata
  4729  07BF  3001               	movlw	1
  4730  07C0  120A  158A  2425  120A  118A  	fcall	_LCD_Create_Char
  4731                           
  4732                           ;main_Master.c: 145:     LCD_Create_Char(2, termometro);
  4733  07C5  3009               	movlw	(low ((_termometro-__stringbase)| (0+32768)))& (0+255)
  4734  07C6  1283               	bcf	3,5	;RP0=0, select bank0
  4735  07C7  1303               	bcf	3,6	;RP1=0, select bank0
  4736  07C8  00AE               	movwf	??_SetUp
  4737  07C9  082E               	movf	??_SetUp,w
  4738  07CA  00F5               	movwf	LCD_Create_Char@chardata
  4739  07CB  3002               	movlw	2
  4740  07CC  120A  158A  2425  120A  118A  	fcall	_LCD_Create_Char
  4741                           
  4742                           ;main_Master.c: 146:     LCD_Create_Char(3, gota);
  4743  07D1  3001               	movlw	(low ((_gota-__stringbase)| (0+32768)))& (0+255)
  4744  07D2  1283               	bcf	3,5	;RP0=0, select bank0
  4745  07D3  1303               	bcf	3,6	;RP1=0, select bank0
  4746  07D4  00AE               	movwf	??_SetUp
  4747  07D5  082E               	movf	??_SetUp,w
  4748  07D6  00F5               	movwf	LCD_Create_Char@chardata
  4749  07D7  3003               	movlw	3
  4750  07D8  120A  158A  2425  120A  118A  	fcall	_LCD_Create_Char
  4751                           
  4752                           ;main_Master.c: 147:     LCD_Create_Char(4, arrowr_vacio);
  4753  07DD  3019               	movlw	(low ((_arrowr_vacio-__stringbase)| (0+32768)))& (0+255)
  4754  07DE  1283               	bcf	3,5	;RP0=0, select bank0
  4755  07DF  1303               	bcf	3,6	;RP1=0, select bank0
  4756  07E0  00AE               	movwf	??_SetUp
  4757  07E1  082E               	movf	??_SetUp,w
  4758  07E2  00F5               	movwf	LCD_Create_Char@chardata
  4759  07E3  3004               	movlw	4
  4760  07E4  120A  158A  2425  120A  118A  	fcall	_LCD_Create_Char
  4761                           
  4762                           ;main_Master.c: 148:     LCD_clear();
  4763  07E9  120A  158A  2391  120A  118A  	fcall	_LCD_clear
  4764                           
  4765                           ;main_Master.c: 149:     I2C_Master_Init(100000);
  4766  07EE  3000               	movlw	0
  4767  07EF  1283               	bcf	3,5	;RP0=0, select bank0
  4768  07F0  1303               	bcf	3,6	;RP1=0, select bank0
  4769  07F1  00A9               	movwf	I2C_Master_Init@c+3
  4770  07F2  3001               	movlw	1
  4771  07F3  00A8               	movwf	I2C_Master_Init@c+2
  4772  07F4  3086               	movlw	134
  4773  07F5  00A7               	movwf	I2C_Master_Init@c+1
  4774  07F6  30A0               	movlw	160
  4775  07F7  00A6               	movwf	I2C_Master_Init@c
  4776  07F8  120A  158A  24DC   	fcall	_I2C_Master_Init
  4777  07FB  0008               	return
  4778  07FC                     __end_of_SetUp:	
  4779                           
  4780                           	psect	text23
  4781  05C6                     __ptext23:	
  4782 ;; *************** function _OSC_config *****************
  4783 ;; Defined at:
  4784 ;;		line 153 in file "main_Master.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;  frecuencia      4    2[COMMON] unsigned long 
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;		None
  4789 ;; Return value:  Size  Location     Type
  4790 ;;                  1    wreg      void 
  4791 ;; Registers used:
  4792 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4793 ;; Tracked objects:
  4794 ;;		On entry : 0/0
  4795 ;;		On exit  : 0/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4798 ;;      Params:         4       0       0       0       0
  4799 ;;      Locals:         0       0       0       0       0
  4800 ;;      Temps:          0       0       0       0       0
  4801 ;;      Totals:         4       0       0       0       0
  4802 ;;Total ram usage:        4 bytes
  4803 ;; Hardware stack levels used:    1
  4804 ;; Hardware stack levels required when called:    1
  4805 ;; This function calls:
  4806 ;;		Nothing
  4807 ;; This function is called by:
  4808 ;;		_SetUp
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           
  4813                           ;psect for function _OSC_config
  4814  05C6                     _OSC_config:	
  4815                           
  4816                           ;main_Master.c: 154:     switch(frecuencia){
  4817                           
  4818                           ;incstack = 0
  4819                           ; Regs used in _OSC_config: [wreg-fsr0h+status,2+status,0]
  4820  05C6  2E02               	goto	l2384
  4821  05C7                     l2366:	
  4822                           
  4823                           ;main_Master.c: 156:             OSCCONbits.IRCF = 0b111;
  4824  05C7  3070               	movlw	112
  4825  05C8  1683               	bsf	3,5	;RP0=1, select bank1
  4826  05C9  1303               	bcf	3,6	;RP1=0, select bank1
  4827  05CA  048F               	iorwf	15,f	;volatile
  4828                           
  4829                           ;main_Master.c: 157:             break;
  4830  05CB  0008               	return
  4831  05CC                     l2368:	
  4832                           
  4833                           ;main_Master.c: 159:             OSCCONbits.IRCF = 0b110;
  4834  05CC  1683               	bsf	3,5	;RP0=1, select bank1
  4835  05CD  1303               	bcf	3,6	;RP1=0, select bank1
  4836  05CE  080F               	movf	15,w	;volatile
  4837  05CF  398F               	andlw	-113
  4838  05D0  3860               	iorlw	96
  4839  05D1  008F               	movwf	15	;volatile
  4840                           
  4841                           ;main_Master.c: 160:             break;
  4842  05D2  0008               	return
  4843  05D3                     l2370:	
  4844                           
  4845                           ;main_Master.c: 162:             OSCCONbits.IRCF = 0b101;
  4846  05D3  1683               	bsf	3,5	;RP0=1, select bank1
  4847  05D4  1303               	bcf	3,6	;RP1=0, select bank1
  4848  05D5  080F               	movf	15,w	;volatile
  4849  05D6  398F               	andlw	-113
  4850  05D7  3850               	iorlw	80
  4851  05D8  008F               	movwf	15	;volatile
  4852                           
  4853                           ;main_Master.c: 163:             break;
  4854  05D9  0008               	return
  4855  05DA                     l2372:	
  4856                           
  4857                           ;main_Master.c: 165:             OSCCONbits.IRCF = 0b100;
  4858  05DA  1683               	bsf	3,5	;RP0=1, select bank1
  4859  05DB  1303               	bcf	3,6	;RP1=0, select bank1
  4860  05DC  080F               	movf	15,w	;volatile
  4861  05DD  398F               	andlw	-113
  4862  05DE  3840               	iorlw	64
  4863  05DF  008F               	movwf	15	;volatile
  4864                           
  4865                           ;main_Master.c: 166:             break;
  4866  05E0  0008               	return
  4867  05E1                     l2374:	
  4868                           
  4869                           ;main_Master.c: 168:             OSCCONbits.IRCF = 0b011;
  4870  05E1  1683               	bsf	3,5	;RP0=1, select bank1
  4871  05E2  1303               	bcf	3,6	;RP1=0, select bank1
  4872  05E3  080F               	movf	15,w	;volatile
  4873  05E4  398F               	andlw	-113
  4874  05E5  3830               	iorlw	48
  4875  05E6  008F               	movwf	15	;volatile
  4876                           
  4877                           ;main_Master.c: 169:             break;
  4878  05E7  0008               	return
  4879  05E8                     l2376:	
  4880                           
  4881                           ;main_Master.c: 171:             OSCCONbits.IRCF = 0b010;
  4882  05E8  1683               	bsf	3,5	;RP0=1, select bank1
  4883  05E9  1303               	bcf	3,6	;RP1=0, select bank1
  4884  05EA  080F               	movf	15,w	;volatile
  4885  05EB  398F               	andlw	-113
  4886  05EC  3820               	iorlw	32
  4887  05ED  008F               	movwf	15	;volatile
  4888                           
  4889                           ;main_Master.c: 172:             break;
  4890  05EE  0008               	return
  4891  05EF                     l2378:	
  4892                           
  4893                           ;main_Master.c: 174:             OSCCONbits.IRCF = 0b001;
  4894  05EF  1683               	bsf	3,5	;RP0=1, select bank1
  4895  05F0  1303               	bcf	3,6	;RP1=0, select bank1
  4896  05F1  080F               	movf	15,w	;volatile
  4897  05F2  398F               	andlw	-113
  4898  05F3  3810               	iorlw	16
  4899  05F4  008F               	movwf	15	;volatile
  4900                           
  4901                           ;main_Master.c: 175:             break;
  4902  05F5  0008               	return
  4903  05F6                     l2380:	
  4904                           
  4905                           ;main_Master.c: 177:             OSCCONbits.IRCF = 0b000;
  4906  05F6  308F               	movlw	-113
  4907  05F7  1683               	bsf	3,5	;RP0=1, select bank1
  4908  05F8  1303               	bcf	3,6	;RP1=0, select bank1
  4909  05F9  058F               	andwf	15,f	;volatile
  4910                           
  4911                           ;main_Master.c: 178:             break;
  4912  05FA  0008               	return
  4913  05FB                     l2382:	
  4914                           
  4915                           ;main_Master.c: 180:             OSCCONbits.IRCF = 0b110;
  4916  05FB  1683               	bsf	3,5	;RP0=1, select bank1
  4917  05FC  1303               	bcf	3,6	;RP1=0, select bank1
  4918  05FD  080F               	movf	15,w	;volatile
  4919  05FE  398F               	andlw	-113
  4920  05FF  3860               	iorlw	96
  4921  0600  008F               	movwf	15	;volatile
  4922                           
  4923                           ;main_Master.c: 181:     }
  4924  0601  0008               	return
  4925  0602                     l2384:	
  4926                           
  4927                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 9 sub-sw
      +                          itches
  4928                           ; Switch size 1, requested type "simple"
  4929                           ; Number of cases is 1, Range of values is 0 to 0
  4930                           ; switch strategies available:
  4931                           ; Name         Instructions Cycles
  4932                           ; simple_byte            4     3 (average)
  4933                           ; direct_byte           11     8 (fixed)
  4934                           ; jumptable            260     6 (fixed)
  4935                           ;	Chosen strategy is simple_byte
  4936  0602  0875               	movf	OSC_config@frecuencia+3,w
  4937  0603  3A00               	xorlw	0	; case 0
  4938  0604  1903               	skipnz
  4939  0605  2E57               	goto	l4178
  4940  0606  2DFB               	goto	l2382
  4941  0607                     l4162:	
  4942                           
  4943                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4944                           ; Switch size 1, requested type "simple"
  4945                           ; Number of cases is 1, Range of values is 125 to 125
  4946                           ; switch strategies available:
  4947                           ; Name         Instructions Cycles
  4948                           ; simple_byte            4     3 (average)
  4949                           ; direct_byte           14    11 (fixed)
  4950                           ; jumptable            263     9 (fixed)
  4951                           ;	Chosen strategy is simple_byte
  4952  0607  0873               	movf	OSC_config@frecuencia+1,w
  4953  0608  3A7D               	xorlw	125	; case 125
  4954  0609  1903               	skipnz
  4955  060A  2E0C               	goto	l4180
  4956  060B  2DFB               	goto	l2382
  4957  060C                     l4180:	
  4958                           
  4959                           ; Switch size 1, requested type "simple"
  4960                           ; Number of cases is 1, Range of values is 0 to 0
  4961                           ; switch strategies available:
  4962                           ; Name         Instructions Cycles
  4963                           ; simple_byte            4     3 (average)
  4964                           ; direct_byte           11     8 (fixed)
  4965                           ; jumptable            260     6 (fixed)
  4966                           ;	Chosen strategy is simple_byte
  4967  060C  0872               	movf	OSC_config@frecuencia,w
  4968  060D  3A00               	xorlw	0	; case 0
  4969  060E  1903               	skipnz
  4970  060F  2DF6               	goto	l2380
  4971  0610  2DFB               	goto	l2382
  4972  0611                     l4164:	
  4973                           
  4974                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4975                           ; Switch size 1, requested type "simple"
  4976                           ; Number of cases is 1, Range of values is 232 to 232
  4977                           ; switch strategies available:
  4978                           ; Name         Instructions Cycles
  4979                           ; simple_byte            4     3 (average)
  4980                           ; direct_byte           14    11 (fixed)
  4981                           ; jumptable            263     9 (fixed)
  4982                           ;	Chosen strategy is simple_byte
  4983  0611  0873               	movf	OSC_config@frecuencia+1,w
  4984  0612  3AE8               	xorlw	232	; case 232
  4985  0613  1903               	skipnz
  4986  0614  2E16               	goto	l4182
  4987  0615  2DFB               	goto	l2382
  4988  0616                     l4182:	
  4989                           
  4990                           ; Switch size 1, requested type "simple"
  4991                           ; Number of cases is 1, Range of values is 72 to 72
  4992                           ; switch strategies available:
  4993                           ; Name         Instructions Cycles
  4994                           ; simple_byte            4     3 (average)
  4995                           ; direct_byte           14    11 (fixed)
  4996                           ; jumptable            263     9 (fixed)
  4997                           ;	Chosen strategy is simple_byte
  4998  0616  0872               	movf	OSC_config@frecuencia,w
  4999  0617  3A48               	xorlw	72	; case 72
  5000  0618  1903               	skipnz
  5001  0619  2DEF               	goto	l2378
  5002  061A  2DFB               	goto	l2382
  5003  061B                     l4166:	
  5004                           
  5005                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5006                           ; Switch size 1, requested type "simple"
  5007                           ; Number of cases is 1, Range of values is 208 to 208
  5008                           ; switch strategies available:
  5009                           ; Name         Instructions Cycles
  5010                           ; simple_byte            4     3 (average)
  5011                           ; direct_byte           14    11 (fixed)
  5012                           ; jumptable            263     9 (fixed)
  5013                           ;	Chosen strategy is simple_byte
  5014  061B  0873               	movf	OSC_config@frecuencia+1,w
  5015  061C  3AD0               	xorlw	208	; case 208
  5016  061D  1903               	skipnz
  5017  061E  2E20               	goto	l4184
  5018  061F  2DFB               	goto	l2382
  5019  0620                     l4184:	
  5020                           
  5021                           ; Switch size 1, requested type "simple"
  5022                           ; Number of cases is 1, Range of values is 144 to 144
  5023                           ; switch strategies available:
  5024                           ; Name         Instructions Cycles
  5025                           ; simple_byte            4     3 (average)
  5026                           ; direct_byte           14    11 (fixed)
  5027                           ; jumptable            263     9 (fixed)
  5028                           ;	Chosen strategy is simple_byte
  5029  0620  0872               	movf	OSC_config@frecuencia,w
  5030  0621  3A90               	xorlw	144	; case 144
  5031  0622  1903               	skipnz
  5032  0623  2DE8               	goto	l2376
  5033  0624  2DFB               	goto	l2382
  5034  0625                     l4168:	
  5035                           
  5036                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5037                           ; Switch size 1, requested type "simple"
  5038                           ; Number of cases is 1, Range of values is 161 to 161
  5039                           ; switch strategies available:
  5040                           ; Name         Instructions Cycles
  5041                           ; simple_byte            4     3 (average)
  5042                           ; direct_byte           14    11 (fixed)
  5043                           ; jumptable            263     9 (fixed)
  5044                           ;	Chosen strategy is simple_byte
  5045  0625  0873               	movf	OSC_config@frecuencia+1,w
  5046  0626  3AA1               	xorlw	161	; case 161
  5047  0627  1903               	skipnz
  5048  0628  2E2A               	goto	l4186
  5049  0629  2DFB               	goto	l2382
  5050  062A                     l4186:	
  5051                           
  5052                           ; Switch size 1, requested type "simple"
  5053                           ; Number of cases is 1, Range of values is 32 to 32
  5054                           ; switch strategies available:
  5055                           ; Name         Instructions Cycles
  5056                           ; simple_byte            4     3 (average)
  5057                           ; direct_byte           14    11 (fixed)
  5058                           ; jumptable            263     9 (fixed)
  5059                           ;	Chosen strategy is simple_byte
  5060  062A  0872               	movf	OSC_config@frecuencia,w
  5061  062B  3A20               	xorlw	32	; case 32
  5062  062C  1903               	skipnz
  5063  062D  2DE1               	goto	l2374
  5064  062E  2DFB               	goto	l2382
  5065  062F                     l4170:	
  5066                           
  5067                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5068                           ; Switch size 1, requested type "simple"
  5069                           ; Number of cases is 1, Range of values is 66 to 66
  5070                           ; switch strategies available:
  5071                           ; Name         Instructions Cycles
  5072                           ; simple_byte            4     3 (average)
  5073                           ; direct_byte           14    11 (fixed)
  5074                           ; jumptable            263     9 (fixed)
  5075                           ;	Chosen strategy is simple_byte
  5076  062F  0873               	movf	OSC_config@frecuencia+1,w
  5077  0630  3A42               	xorlw	66	; case 66
  5078  0631  1903               	skipnz
  5079  0632  2E34               	goto	l4188
  5080  0633  2DFB               	goto	l2382
  5081  0634                     l4188:	
  5082                           
  5083                           ; Switch size 1, requested type "simple"
  5084                           ; Number of cases is 1, Range of values is 64 to 64
  5085                           ; switch strategies available:
  5086                           ; Name         Instructions Cycles
  5087                           ; simple_byte            4     3 (average)
  5088                           ; direct_byte           14    11 (fixed)
  5089                           ; jumptable            263     9 (fixed)
  5090                           ;	Chosen strategy is simple_byte
  5091  0634  0872               	movf	OSC_config@frecuencia,w
  5092  0635  3A40               	xorlw	64	; case 64
  5093  0636  1903               	skipnz
  5094  0637  2DDA               	goto	l2372
  5095  0638  2DFB               	goto	l2382
  5096  0639                     l4172:	
  5097                           
  5098                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5099                           ; Switch size 1, requested type "simple"
  5100                           ; Number of cases is 1, Range of values is 132 to 132
  5101                           ; switch strategies available:
  5102                           ; Name         Instructions Cycles
  5103                           ; simple_byte            4     3 (average)
  5104                           ; direct_byte           14    11 (fixed)
  5105                           ; jumptable            263     9 (fixed)
  5106                           ;	Chosen strategy is simple_byte
  5107  0639  0873               	movf	OSC_config@frecuencia+1,w
  5108  063A  3A84               	xorlw	132	; case 132
  5109  063B  1903               	skipnz
  5110  063C  2E3E               	goto	l4190
  5111  063D  2DFB               	goto	l2382
  5112  063E                     l4190:	
  5113                           
  5114                           ; Switch size 1, requested type "simple"
  5115                           ; Number of cases is 1, Range of values is 128 to 128
  5116                           ; switch strategies available:
  5117                           ; Name         Instructions Cycles
  5118                           ; simple_byte            4     3 (average)
  5119                           ; direct_byte           14    11 (fixed)
  5120                           ; jumptable            263     9 (fixed)
  5121                           ;	Chosen strategy is simple_byte
  5122  063E  0872               	movf	OSC_config@frecuencia,w
  5123  063F  3A80               	xorlw	128	; case 128
  5124  0640  1903               	skipnz
  5125  0641  2DD3               	goto	l2370
  5126  0642  2DFB               	goto	l2382
  5127  0643                     l4174:	
  5128                           
  5129                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5130                           ; Switch size 1, requested type "simple"
  5131                           ; Number of cases is 1, Range of values is 9 to 9
  5132                           ; switch strategies available:
  5133                           ; Name         Instructions Cycles
  5134                           ; simple_byte            4     3 (average)
  5135                           ; direct_byte           14    11 (fixed)
  5136                           ; jumptable            263     9 (fixed)
  5137                           ;	Chosen strategy is simple_byte
  5138  0643  0873               	movf	OSC_config@frecuencia+1,w
  5139  0644  3A09               	xorlw	9	; case 9
  5140  0645  1903               	skipnz
  5141  0646  2E48               	goto	l4192
  5142  0647  2DFB               	goto	l2382
  5143  0648                     l4192:	
  5144                           
  5145                           ; Switch size 1, requested type "simple"
  5146                           ; Number of cases is 1, Range of values is 0 to 0
  5147                           ; switch strategies available:
  5148                           ; Name         Instructions Cycles
  5149                           ; simple_byte            4     3 (average)
  5150                           ; direct_byte           11     8 (fixed)
  5151                           ; jumptable            260     6 (fixed)
  5152                           ;	Chosen strategy is simple_byte
  5153  0648  0872               	movf	OSC_config@frecuencia,w
  5154  0649  3A00               	xorlw	0	; case 0
  5155  064A  1903               	skipnz
  5156  064B  2DCC               	goto	l2368
  5157  064C  2DFB               	goto	l2382
  5158  064D                     l4176:	
  5159                           
  5160                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5161                           ; Switch size 1, requested type "simple"
  5162                           ; Number of cases is 1, Range of values is 18 to 18
  5163                           ; switch strategies available:
  5164                           ; Name         Instructions Cycles
  5165                           ; simple_byte            4     3 (average)
  5166                           ; direct_byte           14    11 (fixed)
  5167                           ; jumptable            263     9 (fixed)
  5168                           ;	Chosen strategy is simple_byte
  5169  064D  0873               	movf	OSC_config@frecuencia+1,w
  5170  064E  3A12               	xorlw	18	; case 18
  5171  064F  1903               	skipnz
  5172  0650  2E52               	goto	l4194
  5173  0651  2DFB               	goto	l2382
  5174  0652                     l4194:	
  5175                           
  5176                           ; Switch size 1, requested type "simple"
  5177                           ; Number of cases is 1, Range of values is 0 to 0
  5178                           ; switch strategies available:
  5179                           ; Name         Instructions Cycles
  5180                           ; simple_byte            4     3 (average)
  5181                           ; direct_byte           11     8 (fixed)
  5182                           ; jumptable            260     6 (fixed)
  5183                           ;	Chosen strategy is simple_byte
  5184  0652  0872               	movf	OSC_config@frecuencia,w
  5185  0653  3A00               	xorlw	0	; case 0
  5186  0654  1903               	skipnz
  5187  0655  2DC7               	goto	l2366
  5188  0656  2DFB               	goto	l2382
  5189  0657                     l4178:	
  5190                           
  5191                           ; Switch size 1, requested type "simple"
  5192                           ; Number of cases is 8, Range of values is 0 to 122
  5193                           ; switch strategies available:
  5194                           ; Name         Instructions Cycles
  5195                           ; simple_byte           25    13 (average)
  5196                           ; jumptable            260     6 (fixed)
  5197                           ;	Chosen strategy is simple_byte
  5198  0657  0874               	movf	OSC_config@frecuencia+2,w
  5199  0658  3A00               	xorlw	0	; case 0
  5200  0659  1903               	skipnz
  5201  065A  2E07               	goto	l4162
  5202  065B  3A01               	xorlw	1	; case 1
  5203  065C  1903               	skipnz
  5204  065D  2E11               	goto	l4164
  5205  065E  3A02               	xorlw	2	; case 3
  5206  065F  1903               	skipnz
  5207  0660  2E1B               	goto	l4166
  5208  0661  3A04               	xorlw	4	; case 7
  5209  0662  1903               	skipnz
  5210  0663  2E25               	goto	l4168
  5211  0664  3A08               	xorlw	8	; case 15
  5212  0665  1903               	skipnz
  5213  0666  2E2F               	goto	l4170
  5214  0667  3A11               	xorlw	17	; case 30
  5215  0668  1903               	skipnz
  5216  0669  2E39               	goto	l4172
  5217  066A  3A23               	xorlw	35	; case 61
  5218  066B  1903               	skipnz
  5219  066C  2E43               	goto	l4174
  5220  066D  3A47               	xorlw	71	; case 122
  5221  066E  1903               	skipnz
  5222  066F  2E4D               	goto	l4176
  5223  0670  2DFB               	goto	l2382
  5224  0671  0008               	return
  5225  0672                     __end_of_OSC_config:	
  5226                           
  5227                           	psect	text24
  5228  0F15                     __ptext24:	
  5229 ;; *************** function _LCD_init *****************
  5230 ;; Defined at:
  5231 ;;		line 44 in file "LCD_8bits.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;		None
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;		None
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  1    wreg      void 
  5238 ;; Registers used:
  5239 ;;		wreg, status,2, status,0, pclath, cstack
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5245 ;;      Params:         0       0       0       0       0
  5246 ;;      Locals:         0       0       0       0       0
  5247 ;;      Temps:          2       0       0       0       0
  5248 ;;      Totals:         2       0       0       0       0
  5249 ;;Total ram usage:        2 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; Hardware stack levels required when called:    2
  5252 ;; This function calls:
  5253 ;;		_LCD_Cmd
  5254 ;; This function is called by:
  5255 ;;		_SetUp
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           
  5260                           ;psect for function _LCD_init
  5261  0F15                     _LCD_init:	
  5262                           
  5263                           ;LCD_8bits.c: 45:     _delay((unsigned long)((20)*(8000000/4000.0)));
  5264                           
  5265                           ;incstack = 0
  5266                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  5267  0F15  3034               	movlw	52
  5268  0F16  00F6               	movwf	??_LCD_init+1
  5269  0F17  30F1               	movlw	241
  5270  0F18  00F5               	movwf	??_LCD_init
  5271  0F19                     u1487:	
  5272  0F19  0BF5               	decfsz	??_LCD_init,f
  5273  0F1A  2F19               	goto	u1487
  5274  0F1B  0BF6               	decfsz	??_LCD_init+1,f
  5275  0F1C  2F19               	goto	u1487
  5276  0F1D  2F1E               	nop2
  5277                           
  5278                           ;LCD_8bits.c: 46:     LCD_Cmd(0x30);
  5279  0F1E  3030               	movlw	48
  5280  0F1F  120A  158A  24A9  120A  158A  	fcall	_LCD_Cmd
  5281                           
  5282                           ;LCD_8bits.c: 47:     _delay((unsigned long)((5)*(8000000/4000.0)));
  5283  0F24  300D               	movlw	13
  5284  0F25  00F6               	movwf	??_LCD_init+1
  5285  0F26  30FB               	movlw	251
  5286  0F27  00F5               	movwf	??_LCD_init
  5287  0F28                     u1497:	
  5288  0F28  0BF5               	decfsz	??_LCD_init,f
  5289  0F29  2F28               	goto	u1497
  5290  0F2A  0BF6               	decfsz	??_LCD_init+1,f
  5291  0F2B  2F28               	goto	u1497
  5292  0F2C  2F2D               	nop2
  5293                           
  5294                           ;LCD_8bits.c: 48:     LCD_Cmd(0x30);
  5295  0F2D  3030               	movlw	48
  5296  0F2E  120A  158A  24A9  120A  158A  	fcall	_LCD_Cmd
  5297                           
  5298                           ;LCD_8bits.c: 49:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  5299  0F33  3042               	movlw	66
  5300  0F34  00F5               	movwf	??_LCD_init
  5301  0F35                     u1507:	
  5302  0F35  0BF5               	decfsz	??_LCD_init,f
  5303  0F36  2F35               	goto	u1507
  5304  0F37  0000               	nop
  5305                           
  5306                           ;LCD_8bits.c: 50:     LCD_Cmd(0x30);
  5307  0F38  3030               	movlw	48
  5308  0F39  120A  158A  24A9  120A  158A  	fcall	_LCD_Cmd
  5309                           
  5310                           ;LCD_8bits.c: 51:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  5311  0F3E  3042               	movlw	66
  5312  0F3F  00F5               	movwf	??_LCD_init
  5313  0F40                     u1517:	
  5314  0F40  0BF5               	decfsz	??_LCD_init,f
  5315  0F41  2F40               	goto	u1517
  5316  0F42  0000               	nop
  5317                           
  5318                           ;LCD_8bits.c: 52:     LCD_Cmd(0x38);
  5319  0F43  3038               	movlw	56
  5320  0F44  120A  158A  24A9  120A  158A  	fcall	_LCD_Cmd
  5321                           
  5322                           ;LCD_8bits.c: 53:     _delay((unsigned long)((53)*(8000000/4000000.0)));
  5323  0F49  3023               	movlw	35
  5324  0F4A  00F5               	movwf	??_LCD_init
  5325  0F4B                     u1527:	
  5326  0F4B  0BF5               	decfsz	??_LCD_init,f
  5327  0F4C  2F4B               	goto	u1527
  5328                           
  5329                           ;LCD_8bits.c: 54:     LCD_Cmd(0x08);
  5330  0F4D  3008               	movlw	8
  5331  0F4E  120A  158A  24A9  120A  158A  	fcall	_LCD_Cmd
  5332                           
  5333                           ;LCD_8bits.c: 55:     _delay((unsigned long)((53)*(8000000/4000000.0)));
  5334  0F53  3023               	movlw	35
  5335  0F54  00F5               	movwf	??_LCD_init
  5336  0F55                     u1537:	
  5337  0F55  0BF5               	decfsz	??_LCD_init,f
  5338  0F56  2F55               	goto	u1537
  5339                           
  5340                           ;LCD_8bits.c: 56:     LCD_Cmd(0x01);
  5341  0F57  3001               	movlw	1
  5342  0F58  120A  158A  24A9  120A  158A  	fcall	_LCD_Cmd
  5343                           
  5344                           ;LCD_8bits.c: 57:     _delay((unsigned long)((3)*(8000000/4000.0)));
  5345  0F5D  3008               	movlw	8
  5346  0F5E  00F6               	movwf	??_LCD_init+1
  5347  0F5F  30C9               	movlw	201
  5348  0F60  00F5               	movwf	??_LCD_init
  5349  0F61                     u1547:	
  5350  0F61  0BF5               	decfsz	??_LCD_init,f
  5351  0F62  2F61               	goto	u1547
  5352  0F63  0BF6               	decfsz	??_LCD_init+1,f
  5353  0F64  2F61               	goto	u1547
  5354  0F65  2F66               	nop2
  5355                           
  5356                           ;LCD_8bits.c: 58:     LCD_Cmd(0x06);
  5357  0F66  3006               	movlw	6
  5358  0F67  120A  158A  24A9  120A  158A  	fcall	_LCD_Cmd
  5359                           
  5360                           ;LCD_8bits.c: 59:     _delay((unsigned long)((53)*(8000000/4000000.0)));
  5361  0F6C  3023               	movlw	35
  5362  0F6D  00F5               	movwf	??_LCD_init
  5363  0F6E                     u1557:	
  5364  0F6E  0BF5               	decfsz	??_LCD_init,f
  5365  0F6F  2F6E               	goto	u1557
  5366                           
  5367                           ;LCD_8bits.c: 60:     LCD_Cmd(0x0C);
  5368  0F70  300C               	movlw	12
  5369  0F71  120A  158A  24A9  120A  158A  	fcall	_LCD_Cmd
  5370                           
  5371                           ;LCD_8bits.c: 61:     _delay((unsigned long)((53)*(8000000/4000000.0)));
  5372  0F76  3023               	movlw	35
  5373  0F77  00F5               	movwf	??_LCD_init
  5374  0F78                     u1567:	
  5375  0F78  0BF5               	decfsz	??_LCD_init,f
  5376  0F79  2F78               	goto	u1567
  5377  0F7A  0008               	return
  5378  0F7B                     __end_of_LCD_init:	
  5379                           
  5380                           	psect	text25
  5381  0B91                     __ptext25:	
  5382 ;; *************** function _LCD_clear *****************
  5383 ;; Defined at:
  5384 ;;		line 32 in file "LCD_8bits.c"
  5385 ;; Parameters:    Size  Location     Type
  5386 ;;		None
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;		None
  5389 ;; Return value:  Size  Location     Type
  5390 ;;                  1    wreg      void 
  5391 ;; Registers used:
  5392 ;;		wreg, status,2, status,0, pclath, cstack
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5398 ;;      Params:         0       0       0       0       0
  5399 ;;      Locals:         0       0       0       0       0
  5400 ;;      Temps:          2       0       0       0       0
  5401 ;;      Totals:         2       0       0       0       0
  5402 ;;Total ram usage:        2 bytes
  5403 ;; Hardware stack levels used:    1
  5404 ;; Hardware stack levels required when called:    2
  5405 ;; This function calls:
  5406 ;;		_LCD_Cmd
  5407 ;; This function is called by:
  5408 ;;		_SetUp
  5409 ;;		_pressBoton1
  5410 ;; This function uses a non-reentrant model
  5411 ;;
  5412                           
  5413                           
  5414                           ;psect for function _LCD_clear
  5415  0B91                     _LCD_clear:	
  5416                           
  5417                           ;LCD_8bits.c: 33:     LCD_Cmd(0x00);
  5418                           
  5419                           ;incstack = 0
  5420                           ; Regs used in _LCD_clear: [wreg+status,2+status,0+pclath+cstack]
  5421  0B91  3000               	movlw	0
  5422  0B92  120A  158A  24A9  120A  158A  	fcall	_LCD_Cmd
  5423                           
  5424                           ;LCD_8bits.c: 34:     LCD_Cmd(0x01);
  5425  0B97  3001               	movlw	1
  5426  0B98  120A  158A  24A9  120A  158A  	fcall	_LCD_Cmd
  5427                           
  5428                           ;LCD_8bits.c: 35:     _delay((unsigned long)((4)*(8000000/4000.0)));
  5429  0B9D  300B               	movlw	11
  5430  0B9E  00F6               	movwf	??_LCD_clear+1
  5431  0B9F  3062               	movlw	98
  5432  0BA0  00F5               	movwf	??_LCD_clear
  5433  0BA1                     u1577:	
  5434  0BA1  0BF5               	decfsz	??_LCD_clear,f
  5435  0BA2  2BA1               	goto	u1577
  5436  0BA3  0BF6               	decfsz	??_LCD_clear+1,f
  5437  0BA4  2BA1               	goto	u1577
  5438  0BA5  0000               	nop
  5439  0BA6  0008               	return
  5440  0BA7                     __end_of_LCD_clear:	
  5441                           
  5442                           	psect	text26
  5443  0C25                     __ptext26:	
  5444 ;; *************** function _LCD_Create_Char *****************
  5445 ;; Defined at:
  5446 ;;		line 116 in file "LCD_8bits.c"
  5447 ;; Parameters:    Size  Location     Type
  5448 ;;  charnum         1    wreg     unsigned char 
  5449 ;;  chardata        1    5[COMMON] PTR const unsigned char 
  5450 ;;		 -> arrowr_vacio(8), gota(8), termometro(8), arrowr(8), 
  5451 ;;		 -> atilde(8), 
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;  charnum         1    7[COMMON] unsigned char 
  5454 ;;  n               1    8[COMMON] unsigned char 
  5455 ;; Return value:  Size  Location     Type
  5456 ;;                  1    wreg      void 
  5457 ;; Registers used:
  5458 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5464 ;;      Params:         1       0       0       0       0
  5465 ;;      Locals:         2       0       0       0       0
  5466 ;;      Temps:          1       0       0       0       0
  5467 ;;      Totals:         4       0       0       0       0
  5468 ;;Total ram usage:        4 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; Hardware stack levels required when called:    2
  5471 ;; This function calls:
  5472 ;;		_LCD_Cmd
  5473 ;;		_LCD_Write_Character
  5474 ;; This function is called by:
  5475 ;;		_SetUp
  5476 ;; This function uses a non-reentrant model
  5477 ;;
  5478                           
  5479                           
  5480                           ;psect for function _LCD_Create_Char
  5481  0C25                     _LCD_Create_Char:	
  5482                           
  5483                           ;incstack = 0
  5484                           ; Regs used in _LCD_Create_Char: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5485                           ;LCD_Create_Char@charnum stored from wreg
  5486  0C25  00F7               	movwf	LCD_Create_Char@charnum
  5487                           
  5488                           ;LCD_8bits.c: 117:  uint8_t n;;LCD_8bits.c: 118:  charnum &= 0x07;
  5489  0C26  3007               	movlw	7
  5490  0C27  00F6               	movwf	??_LCD_Create_Char
  5491  0C28  0876               	movf	??_LCD_Create_Char,w
  5492  0C29  05F7               	andwf	LCD_Create_Char@charnum,f
  5493                           
  5494                           ;LCD_8bits.c: 119:  LCD_Cmd(0x40 | (charnum << 3));
  5495  0C2A  0877               	movf	LCD_Create_Char@charnum,w
  5496  0C2B  00F6               	movwf	??_LCD_Create_Char
  5497  0C2C  3002               	movlw	2
  5498  0C2D                     u965:	
  5499  0C2D  1003               	clrc
  5500  0C2E  0DF6               	rlf	??_LCD_Create_Char,f
  5501  0C2F  3EFF               	addlw	-1
  5502  0C30  1D03               	skipz
  5503  0C31  2C2D               	goto	u965
  5504  0C32  1003               	clrc
  5505  0C33  0D76               	rlf	??_LCD_Create_Char,w
  5506  0C34  3840               	iorlw	64
  5507  0C35  120A  158A  24A9  120A  158A  	fcall	_LCD_Cmd
  5508                           
  5509                           ;LCD_8bits.c: 120:  for (n = 0; n < 8; n++)
  5510  0C3A  01F8               	clrf	LCD_Create_Char@n
  5511  0C3B                     l2488:	
  5512                           
  5513                           ;LCD_8bits.c: 121:   LCD_Write_Character(chardata[n]);
  5514  0C3B  0878               	movf	LCD_Create_Char@n,w
  5515  0C3C  0775               	addwf	LCD_Create_Char@chardata,w
  5516  0C3D  0084               	movwf	4
  5517  0C3E  120A  118A  2700  120A  158A  	fcall	stringdir
  5518  0C43  120A  158A  234E  120A  158A  	fcall	_LCD_Write_Character
  5519  0C48  3001               	movlw	1
  5520  0C49  00F6               	movwf	??_LCD_Create_Char
  5521  0C4A  0876               	movf	??_LCD_Create_Char,w
  5522  0C4B  07F8               	addwf	LCD_Create_Char@n,f
  5523  0C4C  3008               	movlw	8
  5524  0C4D  0278               	subwf	LCD_Create_Char@n,w
  5525  0C4E  1803               	btfsc	3,0
  5526  0C4F  0008               	return
  5527  0C50  2C3B               	goto	l2488
  5528  0C51                     __end_of_LCD_Create_Char:	
  5529                           
  5530                           	psect	text27
  5531  0B4E                     __ptext27:	
  5532 ;; *************** function _LCD_Write_Character *****************
  5533 ;; Defined at:
  5534 ;;		line 64 in file "LCD_8bits.c"
  5535 ;; Parameters:    Size  Location     Type
  5536 ;;  caracter        1    wreg     unsigned char 
  5537 ;; Auto vars:     Size  Location     Type
  5538 ;;  caracter        1    3[COMMON] unsigned char 
  5539 ;; Return value:  Size  Location     Type
  5540 ;;                  1    wreg      void 
  5541 ;; Registers used:
  5542 ;;		wreg
  5543 ;; Tracked objects:
  5544 ;;		On entry : 0/0
  5545 ;;		On exit  : 0/0
  5546 ;;		Unchanged: 0/0
  5547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5548 ;;      Params:         0       0       0       0       0
  5549 ;;      Locals:         1       0       0       0       0
  5550 ;;      Temps:          1       0       0       0       0
  5551 ;;      Totals:         2       0       0       0       0
  5552 ;;Total ram usage:        2 bytes
  5553 ;; Hardware stack levels used:    1
  5554 ;; Hardware stack levels required when called:    1
  5555 ;; This function calls:
  5556 ;;		Nothing
  5557 ;; This function is called by:
  5558 ;;		_display_Uhrzeit
  5559 ;;		_display_Datum
  5560 ;;		_mostrarLCD
  5561 ;;		_pressBoton2
  5562 ;;		_LCD_Write_String
  5563 ;;		_LCD_Create_Char
  5564 ;; This function uses a non-reentrant model
  5565 ;;
  5566                           
  5567                           
  5568                           ;psect for function _LCD_Write_Character
  5569  0B4E                     _LCD_Write_Character:	
  5570                           
  5571                           ;incstack = 0
  5572                           ; Regs used in _LCD_Write_Character: [wreg]
  5573                           ;LCD_Write_Character@caracter stored from wreg
  5574  0B4E  00F3               	movwf	LCD_Write_Character@caracter
  5575                           
  5576                           ;LCD_8bits.c: 65:     PORTCbits.RC0 = 1;
  5577  0B4F  1283               	bcf	3,5	;RP0=0, select bank0
  5578  0B50  1303               	bcf	3,6	;RP1=0, select bank0
  5579  0B51  1407               	bsf	7,0	;volatile
  5580                           
  5581                           ;LCD_8bits.c: 67:     PORTD = caracter;
  5582  0B52  0873               	movf	LCD_Write_Character@caracter,w
  5583  0B53  0088               	movwf	8	;volatile
  5584                           
  5585                           ;LCD_8bits.c: 68:     PORTCbits.RC1 = 1;
  5586  0B54  1487               	bsf	7,1	;volatile
  5587                           
  5588                           ;LCD_8bits.c: 69:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  5589  0B55  301A               	movlw	26
  5590  0B56  00F2               	movwf	??_LCD_Write_Character
  5591  0B57                     u1587:	
  5592  0B57  0BF2               	decfsz	??_LCD_Write_Character,f
  5593  0B58  2B57               	goto	u1587
  5594  0B59  0000               	nop
  5595                           
  5596                           ;LCD_8bits.c: 70:     PORTCbits.RC1 = 0;
  5597  0B5A  1283               	bcf	3,5	;RP0=0, select bank0
  5598  0B5B  1303               	bcf	3,6	;RP1=0, select bank0
  5599  0B5C  1087               	bcf	7,1	;volatile
  5600  0B5D  0008               	return
  5601  0B5E                     __end_of_LCD_Write_Character:	
  5602                           
  5603                           	psect	text28
  5604  0CA9                     __ptext28:	
  5605 ;; *************** function _LCD_Cmd *****************
  5606 ;; Defined at:
  5607 ;;		line 21 in file "LCD_8bits.c"
  5608 ;; Parameters:    Size  Location     Type
  5609 ;;  comando         1    wreg     unsigned char 
  5610 ;; Auto vars:     Size  Location     Type
  5611 ;;  comando         1    4[COMMON] unsigned char 
  5612 ;; Return value:  Size  Location     Type
  5613 ;;                  1    wreg      void 
  5614 ;; Registers used:
  5615 ;;		wreg
  5616 ;; Tracked objects:
  5617 ;;		On entry : 0/0
  5618 ;;		On exit  : 0/0
  5619 ;;		Unchanged: 0/0
  5620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5621 ;;      Params:         0       0       0       0       0
  5622 ;;      Locals:         1       0       0       0       0
  5623 ;;      Temps:          2       0       0       0       0
  5624 ;;      Totals:         3       0       0       0       0
  5625 ;;Total ram usage:        3 bytes
  5626 ;; Hardware stack levels used:    1
  5627 ;; Hardware stack levels required when called:    1
  5628 ;; This function calls:
  5629 ;;		Nothing
  5630 ;; This function is called by:
  5631 ;;		_LCD_clear
  5632 ;;		_LCD_init
  5633 ;;		_LCD_Set_Cursor
  5634 ;;		_LCD_Create_Char
  5635 ;;		_LCD_home
  5636 ;;		_LCD_Shift_links
  5637 ;;		_LCD_Shift_rechts
  5638 ;;		_LCD_Cursor_rechts
  5639 ;;		_LCD_Cursor_links
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642                           
  5643                           
  5644                           ;psect for function _LCD_Cmd
  5645  0CA9                     _LCD_Cmd:	
  5646                           
  5647                           ;incstack = 0
  5648                           ; Regs used in _LCD_Cmd: [wreg]
  5649                           ;LCD_Cmd@comando stored from wreg
  5650  0CA9  00F4               	movwf	LCD_Cmd@comando
  5651                           
  5652                           ;LCD_8bits.c: 22:     PORTCbits.RC0 = 0;
  5653  0CAA  1283               	bcf	3,5	;RP0=0, select bank0
  5654  0CAB  1303               	bcf	3,6	;RP1=0, select bank0
  5655  0CAC  1007               	bcf	7,0	;volatile
  5656                           
  5657                           ;LCD_8bits.c: 23:     _delay((unsigned long)((5)*(8000000/4000.0)));
  5658  0CAD  300D               	movlw	13
  5659  0CAE  00F3               	movwf	??_LCD_Cmd+1
  5660  0CAF  30FB               	movlw	251
  5661  0CB0  00F2               	movwf	??_LCD_Cmd
  5662  0CB1                     u1597:	
  5663  0CB1  0BF2               	decfsz	??_LCD_Cmd,f
  5664  0CB2  2CB1               	goto	u1597
  5665  0CB3  0BF3               	decfsz	??_LCD_Cmd+1,f
  5666  0CB4  2CB1               	goto	u1597
  5667  0CB5  2CB6               	nop2
  5668                           
  5669                           ;LCD_8bits.c: 24:     PORTCbits.RC1 = 1;
  5670  0CB6  1283               	bcf	3,5	;RP0=0, select bank0
  5671  0CB7  1303               	bcf	3,6	;RP1=0, select bank0
  5672  0CB8  1487               	bsf	7,1	;volatile
  5673                           
  5674                           ;LCD_8bits.c: 25:     _delay((unsigned long)((5)*(8000000/4000.0)));
  5675  0CB9  300D               	movlw	13
  5676  0CBA  00F3               	movwf	??_LCD_Cmd+1
  5677  0CBB  30FB               	movlw	251
  5678  0CBC  00F2               	movwf	??_LCD_Cmd
  5679  0CBD                     u1607:	
  5680  0CBD  0BF2               	decfsz	??_LCD_Cmd,f
  5681  0CBE  2CBD               	goto	u1607
  5682  0CBF  0BF3               	decfsz	??_LCD_Cmd+1,f
  5683  0CC0  2CBD               	goto	u1607
  5684  0CC1  2CC2               	nop2
  5685                           
  5686                           ;LCD_8bits.c: 26:     PORTD = comando;
  5687  0CC2  0874               	movf	LCD_Cmd@comando,w
  5688  0CC3  1283               	bcf	3,5	;RP0=0, select bank0
  5689  0CC4  1303               	bcf	3,6	;RP1=0, select bank0
  5690  0CC5  0088               	movwf	8	;volatile
  5691                           
  5692                           ;LCD_8bits.c: 27:     _delay((unsigned long)((5)*(8000000/4000.0)));
  5693  0CC6  300D               	movlw	13
  5694  0CC7  00F3               	movwf	??_LCD_Cmd+1
  5695  0CC8  30FB               	movlw	251
  5696  0CC9  00F2               	movwf	??_LCD_Cmd
  5697  0CCA                     u1617:	
  5698  0CCA  0BF2               	decfsz	??_LCD_Cmd,f
  5699  0CCB  2CCA               	goto	u1617
  5700  0CCC  0BF3               	decfsz	??_LCD_Cmd+1,f
  5701  0CCD  2CCA               	goto	u1617
  5702  0CCE  2CCF               	nop2
  5703                           
  5704                           ;LCD_8bits.c: 28:     PORTCbits.RC1 = 0;
  5705  0CCF  1283               	bcf	3,5	;RP0=0, select bank0
  5706  0CD0  1303               	bcf	3,6	;RP1=0, select bank0
  5707  0CD1  1087               	bcf	7,1	;volatile
  5708                           
  5709                           ;LCD_8bits.c: 29:     _delay((unsigned long)((5)*(8000000/4000.0)));
  5710  0CD2  300D               	movlw	13
  5711  0CD3  00F3               	movwf	??_LCD_Cmd+1
  5712  0CD4  30FB               	movlw	251
  5713  0CD5  00F2               	movwf	??_LCD_Cmd
  5714  0CD6                     u1627:	
  5715  0CD6  0BF2               	decfsz	??_LCD_Cmd,f
  5716  0CD7  2CD6               	goto	u1627
  5717  0CD8  0BF3               	decfsz	??_LCD_Cmd+1,f
  5718  0CD9  2CD6               	goto	u1627
  5719  0CDA  2CDB               	nop2
  5720  0CDB  0008               	return
  5721  0CDC                     __end_of_LCD_Cmd:	
  5722                           
  5723                           	psect	text29
  5724  0CDC                     __ptext29:	
  5725 ;; *************** function _I2C_Master_Init *****************
  5726 ;; Defined at:
  5727 ;;		line 16 in file "I2C.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;  c               4    6[BANK0 ] const unsigned long 
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;		None
  5732 ;; Return value:  Size  Location     Type
  5733 ;;                  1    wreg      void 
  5734 ;; Registers used:
  5735 ;;		wreg, status,2, status,0, pclath, cstack
  5736 ;; Tracked objects:
  5737 ;;		On entry : 0/0
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5741 ;;      Params:         0       4       0       0       0
  5742 ;;      Locals:         0       0       0       0       0
  5743 ;;      Temps:          0       4       0       0       0
  5744 ;;      Totals:         0       8       0       0       0
  5745 ;;Total ram usage:        8 bytes
  5746 ;; Hardware stack levels used:    1
  5747 ;; Hardware stack levels required when called:    2
  5748 ;; This function calls:
  5749 ;;		___lldiv
  5750 ;; This function is called by:
  5751 ;;		_SetUp
  5752 ;; This function uses a non-reentrant model
  5753 ;;
  5754                           
  5755                           
  5756                           ;psect for function _I2C_Master_Init
  5757  0CDC                     _I2C_Master_Init:	
  5758                           
  5759                           ;I2C.c: 16: void I2C_Master_Init(const unsigned long c);I2C.c: 17: {;I2C.c: 18:     SSPC
      +                          ON = 0b00101000;
  5760                           
  5761                           ;incstack = 0
  5762                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  5763  0CDC  3028               	movlw	40
  5764  0CDD  1283               	bcf	3,5	;RP0=0, select bank0
  5765  0CDE  1303               	bcf	3,6	;RP1=0, select bank0
  5766  0CDF  0094               	movwf	20	;volatile
  5767                           
  5768                           ;I2C.c: 19:     SSPCON2 = 0;
  5769  0CE0  1683               	bsf	3,5	;RP0=1, select bank1
  5770  0CE1  1303               	bcf	3,6	;RP1=0, select bank1
  5771  0CE2  0191               	clrf	17	;volatile
  5772                           
  5773                           ;I2C.c: 20:     SSPADD = (8000000/(4*c))-1;
  5774  0CE3  1283               	bcf	3,5	;RP0=0, select bank0
  5775  0CE4  1303               	bcf	3,6	;RP1=0, select bank0
  5776  0CE5  0826               	movf	I2C_Master_Init@c,w
  5777  0CE6  00AA               	movwf	??_I2C_Master_Init
  5778  0CE7  0827               	movf	I2C_Master_Init@c+1,w
  5779  0CE8  00AB               	movwf	??_I2C_Master_Init+1
  5780  0CE9  0828               	movf	I2C_Master_Init@c+2,w
  5781  0CEA  00AC               	movwf	??_I2C_Master_Init+2
  5782  0CEB  0829               	movf	I2C_Master_Init@c+3,w
  5783  0CEC  00AD               	movwf	??_I2C_Master_Init+3
  5784  0CED  3002               	movlw	2
  5785  0CEE                     u1375:	
  5786  0CEE  1003               	clrc
  5787  0CEF  0DAA               	rlf	??_I2C_Master_Init,f
  5788  0CF0  0DAB               	rlf	??_I2C_Master_Init+1,f
  5789  0CF1  0DAC               	rlf	??_I2C_Master_Init+2,f
  5790  0CF2  0DAD               	rlf	??_I2C_Master_Init+3,f
  5791  0CF3  3EFF               	addlw	-1
  5792  0CF4  1D03               	skipz
  5793  0CF5  2CEE               	goto	u1375
  5794  0CF6  082D               	movf	??_I2C_Master_Init+3,w
  5795  0CF7  00F5               	movwf	___lldiv@divisor+3
  5796  0CF8  082C               	movf	??_I2C_Master_Init+2,w
  5797  0CF9  00F4               	movwf	___lldiv@divisor+2
  5798  0CFA  082B               	movf	??_I2C_Master_Init+1,w
  5799  0CFB  00F3               	movwf	___lldiv@divisor+1
  5800  0CFC  082A               	movf	??_I2C_Master_Init,w
  5801  0CFD  00F2               	movwf	___lldiv@divisor
  5802  0CFE  3000               	movlw	0
  5803  0CFF  00F9               	movwf	___lldiv@dividend+3
  5804  0D00  307A               	movlw	122
  5805  0D01  00F8               	movwf	___lldiv@dividend+2
  5806  0D02  3012               	movlw	18
  5807  0D03  00F7               	movwf	___lldiv@dividend+1
  5808  0D04  3000               	movlw	0
  5809  0D05  00F6               	movwf	___lldiv@dividend
  5810  0D06  120A  158A  2652   	fcall	___lldiv
  5811  0D09  0872               	movf	?___lldiv,w
  5812  0D0A  3EFF               	addlw	255
  5813  0D0B  1683               	bsf	3,5	;RP0=1, select bank1
  5814  0D0C  1303               	bcf	3,6	;RP1=0, select bank1
  5815  0D0D  0093               	movwf	19	;volatile
  5816                           
  5817                           ;I2C.c: 21:     SSPSTAT = 0;
  5818  0D0E  0194               	clrf	20	;volatile
  5819                           
  5820                           ;I2C.c: 22:     TRISCbits.TRISC3 = 1;
  5821  0D0F  1587               	bsf	7,3	;volatile
  5822                           
  5823                           ;I2C.c: 23:     TRISCbits.TRISC4 = 1;
  5824  0D10  1607               	bsf	7,4	;volatile
  5825  0D11  0008               	return
  5826  0D12                     __end_of_I2C_Master_Init:	
  5827                           
  5828                           	psect	text30
  5829  0E52                     __ptext30:	
  5830 ;; *************** function ___lldiv *****************
  5831 ;; Defined at:
  5832 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  5833 ;; Parameters:    Size  Location     Type
  5834 ;;  divisor         4    2[COMMON] unsigned long 
  5835 ;;  dividend        4    6[COMMON] unsigned long 
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  quotient        4    1[BANK0 ] unsigned long 
  5838 ;;  counter         1    5[BANK0 ] unsigned char 
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  4    2[COMMON] unsigned long 
  5841 ;; Registers used:
  5842 ;;		wreg, status,2, status,0
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5848 ;;      Params:         8       0       0       0       0
  5849 ;;      Locals:         0       5       0       0       0
  5850 ;;      Temps:          0       1       0       0       0
  5851 ;;      Totals:         8       6       0       0       0
  5852 ;;Total ram usage:       14 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:    1
  5855 ;; This function calls:
  5856 ;;		Nothing
  5857 ;; This function is called by:
  5858 ;;		_I2C_Master_Init
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           
  5863                           ;psect for function ___lldiv
  5864  0E52                     ___lldiv:	
  5865                           
  5866                           ;incstack = 0
  5867                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5868  0E52  3000               	movlw	0
  5869  0E53  1283               	bcf	3,5	;RP0=0, select bank0
  5870  0E54  1303               	bcf	3,6	;RP1=0, select bank0
  5871  0E55  00A4               	movwf	___lldiv@quotient+3
  5872  0E56  3000               	movlw	0
  5873  0E57  00A3               	movwf	___lldiv@quotient+2
  5874  0E58  3000               	movlw	0
  5875  0E59  00A2               	movwf	___lldiv@quotient+1
  5876  0E5A  3000               	movlw	0
  5877  0E5B  00A1               	movwf	___lldiv@quotient
  5878  0E5C  0875               	movf	___lldiv@divisor+3,w
  5879  0E5D  0474               	iorwf	___lldiv@divisor+2,w
  5880  0E5E  0473               	iorwf	___lldiv@divisor+1,w
  5881  0E5F  0472               	iorwf	___lldiv@divisor,w
  5882  0E60  1903               	skipnz
  5883  0E61  2EA9               	goto	l3396
  5884  0E62  01A5               	clrf	___lldiv@counter
  5885  0E63  0AA5               	incf	___lldiv@counter,f
  5886  0E64                     l3382:	
  5887  0E64  1BF5               	btfsc	___lldiv@divisor+3,7
  5888  0E65  2E74               	goto	l3384
  5889  0E66  3001               	movlw	1
  5890  0E67  00A0               	movwf	??___lldiv
  5891  0E68                     u1215:	
  5892  0E68  1003               	clrc
  5893  0E69  0DF2               	rlf	___lldiv@divisor,f
  5894  0E6A  0DF3               	rlf	___lldiv@divisor+1,f
  5895  0E6B  0DF4               	rlf	___lldiv@divisor+2,f
  5896  0E6C  0DF5               	rlf	___lldiv@divisor+3,f
  5897  0E6D  0BA0               	decfsz	??___lldiv,f
  5898  0E6E  2E68               	goto	u1215
  5899  0E6F  3001               	movlw	1
  5900  0E70  00A0               	movwf	??___lldiv
  5901  0E71  0820               	movf	??___lldiv,w
  5902  0E72  07A5               	addwf	___lldiv@counter,f
  5903  0E73  2E64               	goto	l3382
  5904  0E74                     l3384:	
  5905  0E74  3001               	movlw	1
  5906  0E75  00A0               	movwf	??___lldiv
  5907  0E76                     u1235:	
  5908  0E76  1003               	clrc
  5909  0E77  0DA1               	rlf	___lldiv@quotient,f
  5910  0E78  0DA2               	rlf	___lldiv@quotient+1,f
  5911  0E79  0DA3               	rlf	___lldiv@quotient+2,f
  5912  0E7A  0DA4               	rlf	___lldiv@quotient+3,f
  5913  0E7B  0BA0               	decfsz	??___lldiv,f
  5914  0E7C  2E76               	goto	u1235
  5915  0E7D  0875               	movf	___lldiv@divisor+3,w
  5916  0E7E  0279               	subwf	___lldiv@dividend+3,w
  5917  0E7F  1D03               	skipz
  5918  0E80  2E8B               	goto	u1245
  5919  0E81  0874               	movf	___lldiv@divisor+2,w
  5920  0E82  0278               	subwf	___lldiv@dividend+2,w
  5921  0E83  1D03               	skipz
  5922  0E84  2E8B               	goto	u1245
  5923  0E85  0873               	movf	___lldiv@divisor+1,w
  5924  0E86  0277               	subwf	___lldiv@dividend+1,w
  5925  0E87  1D03               	skipz
  5926  0E88  2E8B               	goto	u1245
  5927  0E89  0872               	movf	___lldiv@divisor,w
  5928  0E8A  0276               	subwf	___lldiv@dividend,w
  5929  0E8B                     u1245:	
  5930  0E8B  1C03               	skipc
  5931  0E8C  2E9C               	goto	l3392
  5932  0E8D  0872               	movf	___lldiv@divisor,w
  5933  0E8E  02F6               	subwf	___lldiv@dividend,f
  5934  0E8F  0873               	movf	___lldiv@divisor+1,w
  5935  0E90  1C03               	skipc
  5936  0E91  0F73               	incfsz	___lldiv@divisor+1,w
  5937  0E92  02F7               	subwf	___lldiv@dividend+1,f
  5938  0E93  0874               	movf	___lldiv@divisor+2,w
  5939  0E94  1C03               	skipc
  5940  0E95  0F74               	incfsz	___lldiv@divisor+2,w
  5941  0E96  02F8               	subwf	___lldiv@dividend+2,f
  5942  0E97  0875               	movf	___lldiv@divisor+3,w
  5943  0E98  1C03               	skipc
  5944  0E99  0F75               	incfsz	___lldiv@divisor+3,w
  5945  0E9A  02F9               	subwf	___lldiv@dividend+3,f
  5946  0E9B  1421               	bsf	___lldiv@quotient,0
  5947  0E9C                     l3392:	
  5948  0E9C  3001               	movlw	1
  5949  0E9D                     u1255:	
  5950  0E9D  1003               	clrc
  5951  0E9E  0CF5               	rrf	___lldiv@divisor+3,f
  5952  0E9F  0CF4               	rrf	___lldiv@divisor+2,f
  5953  0EA0  0CF3               	rrf	___lldiv@divisor+1,f
  5954  0EA1  0CF2               	rrf	___lldiv@divisor,f
  5955  0EA2  3EFF               	addlw	-1
  5956  0EA3  1D03               	skipz
  5957  0EA4  2E9D               	goto	u1255
  5958  0EA5  3001               	movlw	1
  5959  0EA6  02A5               	subwf	___lldiv@counter,f
  5960  0EA7  1D03               	btfss	3,2
  5961  0EA8  2E74               	goto	l3384
  5962  0EA9                     l3396:	
  5963  0EA9  0824               	movf	___lldiv@quotient+3,w
  5964  0EAA  00F5               	movwf	?___lldiv+3
  5965  0EAB  0823               	movf	___lldiv@quotient+2,w
  5966  0EAC  00F4               	movwf	?___lldiv+2
  5967  0EAD  0822               	movf	___lldiv@quotient+1,w
  5968  0EAE  00F3               	movwf	?___lldiv+1
  5969  0EAF  0821               	movf	___lldiv@quotient,w
  5970  0EB0  00F2               	movwf	?___lldiv
  5971  0EB1  0008               	return
  5972  0EB2                     __end_of___lldiv:	
  5973                           
  5974                           	psect	text31
  5975  0B5E                     __ptext31:	
  5976 ;; *************** function _ISR *****************
  5977 ;; Defined at:
  5978 ;;		line 103 in file "main_Master.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;		None
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;		None
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  1    wreg      void 
  5985 ;; Registers used:
  5986 ;;		wreg, status,2, status,0
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5992 ;;      Params:         0       0       0       0       0
  5993 ;;      Locals:         0       0       0       0       0
  5994 ;;      Temps:          2       0       0       0       0
  5995 ;;      Totals:         2       0       0       0       0
  5996 ;;Total ram usage:        2 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; This function calls:
  5999 ;;		Nothing
  6000 ;; This function is called by:
  6001 ;;		Interrupt level 1
  6002 ;; This function uses a non-reentrant model
  6003 ;;
  6004                           
  6005                           
  6006                           ;psect for function _ISR
  6007  0B5E                     _ISR:	
  6008                           
  6009                           ;main_Master.c: 104:     if (INTCONbits.RBIF == 1 && INTCONbits.RBIE == 1){
  6010  0B5E  180B               	btfsc	11,0	;volatile
  6011  0B5F  1D8B               	btfss	11,3	;volatile
  6012  0B60  2B68               	goto	i1l101
  6013                           
  6014                           ;main_Master.c: 105:         INTCONbits.RBIF = 0;
  6015  0B61  100B               	bcf	11,0	;volatile
  6016                           
  6017                           ;main_Master.c: 106:         if (banderaBoton == 0){
  6018  0B62  087B               	movf	_banderaBoton,w
  6019  0B63  1D03               	btfss	3,2
  6020  0B64  2B68               	goto	i1l101
  6021                           
  6022                           ;main_Master.c: 107:             banderaBoton = 1;
  6023  0B65  01FB               	clrf	_banderaBoton
  6024  0B66  0AFB               	incf	_banderaBoton,f
  6025                           
  6026                           ;main_Master.c: 108:             INTCONbits.RBIE = 0;
  6027  0B67  118B               	bcf	11,3	;volatile
  6028  0B68                     i1l101:	
  6029  0B68  0871               	movf	??_ISR+1,w
  6030  0B69  008A               	movwf	10
  6031  0B6A  0E70               	swapf	??_ISR^(0+4294967168),w
  6032  0B6B  0083               	movwf	3
  6033  0B6C  0EFE               	swapf	126,f
  6034  0B6D  0E7E               	swapf	126,w
  6035  0B6E  0009               	retfie
  6036  0B6F                     __end_of_ISR:	
  6037  007E                     btemp	set	126	;btemp
  6038  007E                     wtemp0	set	126
  6039                           
  6040                           	psect	intentry
  6041  0004                     __pintentry:	
  6042                           ;incstack = 0
  6043                           ; Regs used in _ISR: [wreg+status,2+status,0]
  6044                           
  6045  0004                     interrupt_function:	
  6046  007E                     saved_w	set	btemp
  6047  0004  00FE               	movwf	btemp
  6048  0005  0E03               	swapf	3,w
  6049  0006  00F0               	movwf	??_ISR
  6050  0007  080A               	movf	10,w
  6051  0008  00F1               	movwf	??_ISR+1
  6052  0009  120A  158A  2B5E   	ljmp	_ISR


Data Sizes:
    Strings     90
    Constant    40
    Data        7
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     28      46
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Create_Char@chardata	PTR const unsigned char  size(1) Largest target is 8
		 -> arrowr_vacio(CODE[8]), gota(CODE[8]), termometro(CODE[8]), arrowr(CODE[8]), 
		 -> atilde(CODE[8]), 

    LCD_Write_String@a	PTR unsigned char  size(1) Largest target is 17
		 -> STR_20(CODE[6]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[13]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[13]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[13]), STR_10(CODE[2]), STR_9(CODE[2]), 
		 -> STR_8(CODE[13]), STR_7(CODE[4]), STR_6(CODE[3]), STR_5(CODE[9]), 
		 -> STR_4(CODE[3]), STR_3(CODE[17]), STR_2(CODE[10]), STR_1(CODE[3]), 

    sp__uint_to_array	PTR unsigned int  size(1) Largest target is 6
		 -> uint_to_array@resultado(BANK0[6]), 

    temp_array	PTR unsigned int  size(1) Largest target is 6
		 -> NULL(NULL[0]), uint_to_array@resultado(BANK0[6]), 


Critical Paths under _main in COMMON

    _pressBoton2->_LCD_Set_Cursor
    _pressBoton1->_LCD_clear
    _mostrarLCD->_LCD_Set_Cursor
    _uint_to_array->___awdiv
    _display_Uhrzeit->_LCD_Set_Cursor
    _display_Datum->_LCD_Set_Cursor
    ___awdiv->___wmul
    _LCD_Write_String->_LCD_Write_Character
    _LCD_Set_Cursor->_LCD_Cmd
    _get_Time->_BCD_a_DEC
    _BCD_a_DEC->___bmul
    _get_Temp->_I2C_Master_Read
    _LCD_init->_LCD_Cmd
    _LCD_clear->_LCD_Cmd
    _LCD_Create_Char->_LCD_Cmd
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_mostrarLCD
    _mostrarLCD->_uint_to_array
    _uint_to_array->___awdiv
    _display_Uhrzeit->___awdiv
    _display_Datum->___awdiv
    _SetUp->_I2C_Master_Init
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   31852
                                             27 BANK0      1     1      0
                              _SetUp
                           _get_Temp
                           _get_Time
                         _mostrarLCD
                        _pressBoton1
                        _pressBoton2
 ---------------------------------------------------------------------------------
 (1) _pressBoton2                                          3     3      0    2057
                                              0 BANK0      3     3      0
                     _LCD_Set_Cursor
                _LCD_Write_Character
 ---------------------------------------------------------------------------------
 (1) _pressBoton1                                          2     2      0      22
                                              7 COMMON     2     2      0
                          _LCD_clear
 ---------------------------------------------------------------------------------
 (1) _mostrarLCD                                           4     4      0   18391
                                             23 BANK0      4     4      0
                     _LCD_Set_Cursor
                _LCD_Write_Character
                   _LCD_Write_String
                      _display_Datum
                    _display_Uhrzeit
                      _uint_to_array
                       _uint_to_char
 ---------------------------------------------------------------------------------
 (2) _uint_to_char                                         4     4      0      62
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _uint_to_array                                       15    15      0    2987
                                              8 BANK0     15    15      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     548
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _display_Uhrzeit                                     11    10      1    5838
                                              8 BANK0     11    10      1
                     _LCD_Set_Cursor
                _LCD_Write_Character
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _display_Datum                                       11    10      1    6610
                                              8 BANK0     11    10      1
                     _LCD_Set_Cursor
                _LCD_Write_Character
                   _LCD_Write_String
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1360
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    2065
                                              8 COMMON     1     1      0
                                              0 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_String                                     3     3      0     772
                                              4 COMMON     3     3      0
                _LCD_Write_Character
 ---------------------------------------------------------------------------------
 (2) _LCD_Set_Cursor                                       5     4      1    2035
                                              5 COMMON     5     4      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _get_Time                                             1     1      0    5168
                                              0 BANK0      1     1      0
                          _BCD_a_DEC
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _BCD_a_DEC                                            4     4      0     212
                                              6 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     168
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _get_Temp                                             3     3      0    4993
                                              8 COMMON     1     1      0
                                              0 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    3811
                                              2 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2    1145
                                              2 COMMON     6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetUp                                                1     1      0    1221
                                             14 BANK0      1     1      0
                    _I2C_Master_Init
                    _LCD_Create_Char
                          _LCD_clear
                           _LCD_init
                         _OSC_config
 ---------------------------------------------------------------------------------
 (2) _OSC_config                                           4     0      4      98
                                              2 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (2) _LCD_init                                             2     2      0      22
                                              5 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            2     2      0      22
                                              5 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Create_Char                                      4     3      1     537
                                              5 COMMON     4     3      1
                            _LCD_Cmd
                _LCD_Write_Character
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Character                                  2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _LCD_Cmd                                              3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     542
                                              6 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     421
                                              2 COMMON     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SetUp
     _I2C_Master_Init
       ___lldiv
     _LCD_Create_Char
       _LCD_Cmd
       _LCD_Write_Character
     _LCD_clear
       _LCD_Cmd
     _LCD_init
       _LCD_Cmd
     _OSC_config
   _get_Temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_Time
     _BCD_a_DEC
       ___bmul
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _mostrarLCD
     _LCD_Set_Cursor
       _LCD_Cmd
     _LCD_Write_Character
     _LCD_Write_String
       _LCD_Write_Character
     _display_Datum
       _LCD_Set_Cursor
         _LCD_Cmd
       _LCD_Write_Character
       _LCD_Write_String
         _LCD_Write_Character
       ___awdiv
         ___wmul (ARG)
       ___awmod
     _display_Uhrzeit
       _LCD_Set_Cursor
         _LCD_Cmd
       _LCD_Write_Character
       ___awdiv
         ___wmul (ARG)
       ___awmod
     _uint_to_array
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _uint_to_char
   _pressBoton1
     _LCD_clear
       _LCD_Cmd
   _pressBoton2
     _LCD_Set_Cursor
       _LCD_Cmd
     _LCD_Write_Character

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1C      2E       5       57.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3A      12        0.0%
ABS                  0      0      3A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Mar 08 22:01:37 2020

                           pc 0002                ___bmul@product 0074       __end_of_LCD_Create_Char 0C51  
                 __CFG_CP$OFF 0000                  ___awdiv@sign 0025            __size_of_BCD_a_DEC 0016  
                          fsr 0004           ___wmul@multiplicand 0074            mostrarLCD@pantalla 0039  
                         l248 0B45                           l266 0C74                           l442 0BC7  
                         l267 0C77                           _GIE 005F                  __CFG_CPD$OFF 0000  
                         _ISR 0B5E                           u655 0BC8                           u905 0D73  
                         u665 0BCF                           u925 0D84                           u935 0D8D  
                         u965 0C2D       __end_of_display_Uhrzeit 05C6                           _dia 004B  
                         _mes 0049                           _min 004D                           _seg 0045  
                _uint_to_char 0EB2                           fsr0 0004                           indf 0000  
                ___awmod@sign 0078                ?_display_Datum 0028  __size_of_LCD_Write_Character 0010  
             __end_of_LCD_Cmd 0CDC                  __CFG_LVP$OFF 0000                          ?_ISR 0070  
              _LCD_Set_Cursor 0C7D                          l2210 0C93                          l2202 0C7F  
                        l2212 0C98                          l2206 0C89                          l2224 0BE1  
                        l2232 0BBF                          l2250 0B77                          l2246 0B71  
                        l2334 0D63                          l2360 0D9F                          l2352 0D8C  
                        l2600 0ED9                          l2370 05D3                          l2346 0D70  
                        l2338 0D6A                          l2602 0F13                          l2380 05F6  
                        l2372 05DA                          l2348 0D7E                          l2356 0D97  
                        l2382 05FB                          l2374 05E1                          l2366 05C7  
                        l3414 0E0E                          l2376 05E8                          l2368 05CC  
                        l2384 0602                          l4160 0CA0                          l3440 0E4D  
                        l3432 0E3A                          l3424 0E16                          l3408 0E03  
                        l3600 007C                          l4152 06D9                          l4170 062F  
                        l4162 0607                          l2378 05EF                          l3426 0E24  
                        l2570 0EB8                          l4154 0DDC                          l4172 0639  
                        l4164 0611                          l4180 060C                          l3436 0E45  
                        l2580 0EC2                          l2572 0EBA                          l4156 0235  
                        l3612 00BB                          l3382 0E64                          l4174 0643  
                        l4190 063E                          l4166 061B                          l4182 0616  
                        l4158 0EE1                          l2590 0ECC                          l2582 0EC4  
                        l2574 0EBC                          l2566 0EB4                          l2806 0DD4  
                        l2814 0DE5                          l3392 0E9C                          l3384 0E74  
                        l2488 0C3B                          l4176 064D                          l4192 0648  
                        l4168 0625                          l4184 0620                          l2592 0ECE  
                        l2584 0EC6                          l2576 0EBE                          l2568 0EB6  
                        l2808 0DE1                          l4194 0652                          l4186 062A  
                        l4178 0657                          l2594 0ED0                          l2586 0EC8  
                        l2578 0EC0                          l3642 016F                          l3626 0115  
                        l3618 00E5                          l2834 067D                          l3396 0EA9  
                        l4188 0634                          l2596 0ED2                          l2588 0ECA  
                        l3652 01A4                          l2852 06C5                          l2844 06A2  
                        l2836 067F                          l2598 0ED4                          l3670 022D  
                        l2790 0DAF                          l2854 06D1                          l2862 06EA  
                        l2856 06E4                          l3658 01DE                          l3586 0030  
                        l3668 021E                          l3588 0051                          l2796 0DBA  
                        l3684 0C05                          STR_1 077E                          STR_2 0759  
                        STR_3 072E                          STR_4 077E                          STR_5 0763  
                        STR_6 0781                          STR_7 077A                          STR_8 073F  
                        STR_9 0784                          u1005 0BB2                          u1215 0E68  
                        u1305 0E19                          u1235 0E76                          _IOCB 0096  
                        u1245 0E8B                          u1325 0E25                          u1255 0E9D  
                        u1335 0E31                          u1345 0E3B                          u1507 0F35  
                        u1427 0694                          u1380 0F82                          u1517 0F40  
                        u1437 06BA                          u1375 0CEE                          u1607 0CBD  
                        u1527 0F4B                          u1447 06CB                          u1617 0CCA  
                        u1537 0F55                          u1457 06F7                          u1627 0CD6  
                        u1547 0F61                          u1467 0DC3                          u1557 0F6E  
                        u1477 0DF0                          u1567 0F78                          u1487 0F19  
                        u1577 0BA1                          u1497 0F28                          u1587 0B57  
                        u1597 0CB1                          _PEIE 005E                          _WPUB 0095  
                __CFG_WRT$OFF 0000             ?_LCD_Write_String 0070                          _jahr 0048  
                        _main 0C00                          _gota 0706                          _hora 004C  
                        btemp 007E                 _uint_to_array 0F7B                          start 000C  
          ??_LCD_Write_String 0074                 __CFG_IESO$OFF 0000            __size_of_LCD_clear 0016  
           ___bmul@multiplier 0075                         ??_ISR 0070              ?_I2C_Master_Init 0026  
            ?_I2C_Master_Read 0072              ?_I2C_Master_Wait 0070              ?_I2C_Master_Stop 0070  
            __end_of_LCD_init 0F7B                         ?_main 0070               __end_of___awdiv 0E52  
                       STR_10 0786                         STR_11 074C                         STR_12 0776  
                       STR_20 076C                         STR_13 0772                         STR_14 074C  
                       STR_15 0776                         STR_16 0772                         STR_17 074C  
               __CFG_WDTE$OFF 0000                         STR_18 0776                         STR_19 0772  
             __end_of___awmod 0DA4            uint_to_char@numChr 0075               __end_of___lldiv 0EB2  
             ___awdiv@divisor 0020                         i1l101 0B68            uint_to_char@numero 0074  
             ___awdiv@counter 0024                         _PORTD 0008                         _TRISB 0086  
                       _TRISD 0088                         _SSPIE 0463                         _SSPIF 0063  
              __CFG_FCMEN$OFF 0000        __end_of_LCD_Set_Cursor 0CA9                         _SetUp 0788  
                       _datum 004A                __CFG_BOREN$OFF 0000                   ?_OSC_config 0072  
                       pclath 000A             __end_of_BCD_a_DEC 0BBD                ?_uint_to_array 0070  
                       status 0003                         wtemp0 007E                __CFG_MCLRE$OFF 0000  
             __initialization 000F                  __end_of_main 0C25                  __end_of_gota 070E  
            ?_LCD_Create_Char 0075                        ??_main 003B                     ??_LCD_Cmd 0072  
             ??_display_Datum 0029              ?_display_Uhrzeit 0028             ?_I2C_Master_Start 0070  
           ?_I2C_Master_Write 0072             __end_of_LCD_clear 0BA7                        ?_SetUp 0070  
             ?_LCD_Set_Cursor 0075            ??_I2C_Master_Start 0072            ??_I2C_Master_Write 0074  
                _banderaPUSH1 007A                  _banderaPUSH2 0042              ___awdiv@dividend 0022  
                      _ANSELH 0189                  _banderaBoton 007B                        _SSPADD 0093  
                      _TRISC0 0438                        _TRISC1 0439                        _TRISC3 043B  
                      _TRISC4 043C            uint_to_array@F1348 003C                        _SSPCON 0014  
                      _SSPBUF 0013   LCD_Write_Character@caracter 0073                __CFG_PWRTE$OFF 0000  
            __end_of_get_Temp 0D59              __end_of_get_Time 041C                        ___bmul 0B6F  
                      ___wmul 0BBD                     ??___awdiv 0078                     ??___awmod 0076  
                   ??___lldiv 0020                        _atilde 0716                        _arrowr 0726  
                      _estado 0046              ___awdiv@quotient 0026               ___awmod@divisor 0072  
                      _tiempo 0047           __size_of_OSC_config 00AC               ___awmod@counter 0077  
                ?_pressBoton1 0070                  ?_pressBoton2 0070                        saved_w 007E  
             ??_uint_to_array 0028       __end_of__initialization 0028                     ?_LCD_init 0070  
         ___bmul@multiplicand 0072                __pcstackCOMMON 0070                 __end_of_SetUp 07FC  
         _LCD_Write_Character 0B4E                  __pidataBANK0 0B36          display_Datum@columna 0028  
              _OPTION_REGbits 0081                       ??_SetUp 002E          ?_LCD_Write_Character 0070  
              LCD_Cmd@comando 0074                    __pbssBANK0 003C     LCD_Set_Cursor@corrimiento 0079  
                  ??_LCD_init 0075          __end_of_arrowr_vacio 0726                    __pmaintext 0C00  
                     ?___bmul 0072                       ?___wmul 0072                    __pintentry 0004  
   __size_of_LCD_Write_String 0022          OSC_config@frecuencia 0072           display_Uhrzeit@fila 002C  
                     _LCD_Cmd 0CA9         ??_LCD_Write_Character 0072                     ?_get_Temp 0070  
                   ?_get_Time 0070                       _SSPCON2 0091                       _SSPSTAT 0094  
                  __stringtab 0700                  ??_OSC_config 0076                     _BCD_a_DEC 0BA7  
      uint_to_array@resultado 002F               __size_of___bmul 0011                       ___awdiv 0DF7  
                     ___awmod 0D59                       ___lldiv 0E52               __size_of___wmul 0021  
           display_Datum@fila 002C              ??_LCD_Set_Cursor 0076                       __ptext1 0672  
                     __ptext2 0DA4                       __ptext3 002C                       __ptext4 0EB2  
                     __ptext5 0F7B                       __ptext6 0BBD                       __ptext7 04F4  
                     __ptext8 041C                       __ptext9 0D59            __end_of_OSC_config 0672  
                __size_of_ISR 0011           uint_to_array@numero 0036              ___awmod@dividend 0074  
    __size_of_I2C_Master_Init 0036      __size_of_I2C_Master_Read 002C      __size_of_I2C_Master_Wait 0009  
    __size_of_I2C_Master_Stop 0007          __size_of_pressBoton1 0053          __size_of_pressBoton2 008E  
                  ??_get_Temp 0078                    ??_get_Time 0020                     _LCD_clear 0B91  
        end_of_initialization 0028     __size_of_I2C_Master_Start 0007     __size_of_I2C_Master_Write 0008  
             ___lldiv@divisor 0072                    ?_BCD_a_DEC 0070               ___lldiv@counter 0025  
            I2C_Master_Init@c 0026              I2C_Master_Read@a 0072                    _temp_array 0043  
                  _mostrarLCD 002C                     _PORTBbits 0006                     _PORTCbits 0007  
                  _termometro 070E      __size_of_LCD_Create_Char 002C                     _TRISCbits 0087  
       __end_of_display_Datum 04F4                    ?_LCD_clear 0070             LCD_Write_String@a 0076  
           LCD_Write_String@n 0074      __size_of_display_Uhrzeit 00D2             __size_of_LCD_init 0066  
              __end_of___bmul 0B80         LCD_Set_Cursor@columna 0075                __end_of___wmul 0BDE  
            _LCD_Write_String 0BDE                __end_of_atilde 071E                __end_of_arrowr 072E  
               ?_uint_to_char 0070                  _arrowr_vacio 071E           start_initialization 000F  
                 __end_of_ISR 0B6F               get_Temp@TempMSB 0021             ??_I2C_Master_Init 002A  
           ??_I2C_Master_Read 0074             ??_I2C_Master_Wait 0072         __end_of_uint_to_array 1000  
           ??_I2C_Master_Stop 0072      __CFG_FOSC$INTRC_NOCLKOUT 0000                   ??_BCD_a_DEC 0076  
                    ??___bmul 0073       LCD_Create_Char@chardata 0075                      ??___wmul 0076  
                  init_fetch0 0B80                   ?_mostrarLCD 0070                   __pdataBANK0 0047  
             BCD_a_DEC@numBCD 0079                ??_uint_to_char 0072                      ?_LCD_Cmd 0070  
             mostrarLCD@signo 003A                   __pbssCOMMON 007A                     ___latbits 0002  
               __pcstackBANK0 0020           display_Datum@jahr_d 0032           display_Datum@jahr_u 0031  
                 ??_LCD_clear 0075             __size_of_get_Temp 0047             __size_of_get_Time 01CC  
           ??_LCD_Create_Char 0076              _I2C_Master_Start 0B28              _I2C_Master_Write 0B3D  
       uint_to_array@centenas 0035             ??_display_Uhrzeit 0029                      ?___awdiv 0020  
                    ?___awmod 0072                      ?___lldiv 0072                     __pstrings 0700  
 __end_of_LCD_Write_Character 0B5E                __size_of_SetUp 0074          display_Uhrzeit@Uhr_d 0032  
        display_Uhrzeit@Uhr_u 0031           __size_of_mostrarLCD 0224          display_Uhrzeit@min_d 0030  
        display_Uhrzeit@min_u 002F          display_Uhrzeit@seg_d 002E          display_Uhrzeit@seg_u 002D  
           interrupt_function 0004                ___wmul@product 0076                      _LCD_init 0F15  
            LCD_Create_Char@n 0078                   __stringbase 0705             ___wmul@multiplier 0072  
               ??_pressBoton1 0077                 ??_pressBoton2 0020              __size_of_LCD_Cmd 0033  
         I2C_Master_Read@temp 0076      __end_of_LCD_Write_String 0C00          __end_of_uint_to_char 0F15  
      LCD_Create_Char@charnum 0077              __size_of___awdiv 005B              __size_of___awmod 004B  
            __size_of___lldiv 0060            display_Datum@dia_d 002E            display_Datum@dia_u 002D  
          __end_of__stringtab 0706            display_Datum@mes_d 0030            display_Datum@mes_u 002F  
             _I2C_Master_Init 0CDC               _I2C_Master_Read 0C51          uint_to_array@decenas 002E  
             _I2C_Master_Wait 0B45               _I2C_Master_Stop 0B2F                      __ptext10 0DF7  
                    __ptext11 0BDE                      __ptext20 0C51                      __ptext12 0C7D  
                    __ptext21 0B45                      __ptext13 0250                      __ptext30 0E52  
                    __ptext22 0788                      __ptext14 0BA7                      __ptext31 0B5E  
                    __ptext23 05C6                      __ptext15 0B6F                      __ptext24 0F15  
                    __ptext16 0D12                      __ptext25 0B91                      __ptext17 0B3D  
                    __ptext26 0C25                      __ptext18 0B2F                      __ptext27 0B4E  
                    __ptext19 0B28                      __ptext28 0CA9                      __ptext29 0CDC  
                    _get_Temp 0D12                      _get_Time 0250             __CFG_BOR4V$BOR40V 0000  
     __size_of_LCD_Set_Cursor 002C           __end_of_pressBoton1 0DF7           __end_of_pressBoton2 0700  
               __size_of_main 0025        display_Uhrzeit@columna 0028        __size_of_display_Datum 00D8  
                ??_mostrarLCD 0037           LCD_Set_Cursor@linea 0078               _LCD_Create_Char 0C25  
    __end_of_I2C_Master_Start 0B2F      __end_of_I2C_Master_Write 0B45                    _INTCONbits 000B  
                    init_ram0 0B84               _display_Uhrzeit 04F4                      intlevel1 0000  
          __end_of_mostrarLCD 0250              ___lldiv@dividend 0076                     stringcode 0700  
                  _OSCCONbits 008F            __end_of_termometro 0716       __end_of_I2C_Master_Init 0D12  
     __end_of_I2C_Master_Read 0C7D       __end_of_I2C_Master_Wait 0B4E       __end_of_I2C_Master_Stop 0B36  
                 _temperatura 0044        __size_of_uint_to_array 0085              ___lldiv@quotient 0021  
           I2C_Master_Write@d 0072                   _pressBoton1 0DA4                   _pressBoton2 0672  
                    stringdir 0700                      stringtab 0700                   _SSPCON2bits 0091  
               _display_Datum 041C         __size_of_uint_to_char 0063                    _OSC_config 05C6  
