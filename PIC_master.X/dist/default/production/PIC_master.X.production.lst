

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Mar 08 17:56:45 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     
    47                           ; Version 2.05
    48                           ; Generated 20/12/2018 GMT
    49                           ; 
    50                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F887 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0008                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000D                     	;# 
    95  000E                     	;# 
    96  000E                     	;# 
    97  000F                     	;# 
    98  0010                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0013                     	;# 
   102  0014                     	;# 
   103  0015                     	;# 
   104  0015                     	;# 
   105  0016                     	;# 
   106  0017                     	;# 
   107  0018                     	;# 
   108  0019                     	;# 
   109  001A                     	;# 
   110  001B                     	;# 
   111  001B                     	;# 
   112  001C                     	;# 
   113  001D                     	;# 
   114  001E                     	;# 
   115  001F                     	;# 
   116  0081                     	;# 
   117  0085                     	;# 
   118  0086                     	;# 
   119  0087                     	;# 
   120  0088                     	;# 
   121  0089                     	;# 
   122  008C                     	;# 
   123  008D                     	;# 
   124  008E                     	;# 
   125  008F                     	;# 
   126  0090                     	;# 
   127  0091                     	;# 
   128  0092                     	;# 
   129  0093                     	;# 
   130  0093                     	;# 
   131  0093                     	;# 
   132  0094                     	;# 
   133  0095                     	;# 
   134  0096                     	;# 
   135  0097                     	;# 
   136  0098                     	;# 
   137  0099                     	;# 
   138  009A                     	;# 
   139  009B                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  0105                     	;# 
   145  0107                     	;# 
   146  0108                     	;# 
   147  0109                     	;# 
   148  010C                     	;# 
   149  010C                     	;# 
   150  010D                     	;# 
   151  010E                     	;# 
   152  010F                     	;# 
   153  0185                     	;# 
   154  0187                     	;# 
   155  0188                     	;# 
   156  0189                     	;# 
   157  018C                     	;# 
   158  018D                     	;# 
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  000E                     	;# 
   175  000F                     	;# 
   176  0010                     	;# 
   177  0011                     	;# 
   178  0012                     	;# 
   179  0013                     	;# 
   180  0014                     	;# 
   181  0015                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  001D                     	;# 
   192  001E                     	;# 
   193  001F                     	;# 
   194  0081                     	;# 
   195  0085                     	;# 
   196  0086                     	;# 
   197  0087                     	;# 
   198  0088                     	;# 
   199  0089                     	;# 
   200  008C                     	;# 
   201  008D                     	;# 
   202  008E                     	;# 
   203  008F                     	;# 
   204  0090                     	;# 
   205  0091                     	;# 
   206  0092                     	;# 
   207  0093                     	;# 
   208  0093                     	;# 
   209  0093                     	;# 
   210  0094                     	;# 
   211  0095                     	;# 
   212  0096                     	;# 
   213  0097                     	;# 
   214  0098                     	;# 
   215  0099                     	;# 
   216  009A                     	;# 
   217  009B                     	;# 
   218  009C                     	;# 
   219  009D                     	;# 
   220  009E                     	;# 
   221  009F                     	;# 
   222  0105                     	;# 
   223  0107                     	;# 
   224  0108                     	;# 
   225  0109                     	;# 
   226  010C                     	;# 
   227  010C                     	;# 
   228  010D                     	;# 
   229  010E                     	;# 
   230  010F                     	;# 
   231  0185                     	;# 
   232  0187                     	;# 
   233  0188                     	;# 
   234  0189                     	;# 
   235  018C                     	;# 
   236  018D                     	;# 
   237  0000                     	;# 
   238  0001                     	;# 
   239  0002                     	;# 
   240  0003                     	;# 
   241  0004                     	;# 
   242  0005                     	;# 
   243  0006                     	;# 
   244  0007                     	;# 
   245  0008                     	;# 
   246  0009                     	;# 
   247  000A                     	;# 
   248  000B                     	;# 
   249  000C                     	;# 
   250  000D                     	;# 
   251  000E                     	;# 
   252  000E                     	;# 
   253  000F                     	;# 
   254  0010                     	;# 
   255  0011                     	;# 
   256  0012                     	;# 
   257  0013                     	;# 
   258  0014                     	;# 
   259  0015                     	;# 
   260  0015                     	;# 
   261  0016                     	;# 
   262  0017                     	;# 
   263  0018                     	;# 
   264  0019                     	;# 
   265  001A                     	;# 
   266  001B                     	;# 
   267  001B                     	;# 
   268  001C                     	;# 
   269  001D                     	;# 
   270  001E                     	;# 
   271  001F                     	;# 
   272  0081                     	;# 
   273  0085                     	;# 
   274  0086                     	;# 
   275  0087                     	;# 
   276  0088                     	;# 
   277  0089                     	;# 
   278  008C                     	;# 
   279  008D                     	;# 
   280  008E                     	;# 
   281  008F                     	;# 
   282  0090                     	;# 
   283  0091                     	;# 
   284  0092                     	;# 
   285  0093                     	;# 
   286  0093                     	;# 
   287  0093                     	;# 
   288  0094                     	;# 
   289  0095                     	;# 
   290  0096                     	;# 
   291  0097                     	;# 
   292  0098                     	;# 
   293  0099                     	;# 
   294  009A                     	;# 
   295  009B                     	;# 
   296  009C                     	;# 
   297  009D                     	;# 
   298  009E                     	;# 
   299  009F                     	;# 
   300  0105                     	;# 
   301  0107                     	;# 
   302  0108                     	;# 
   303  0109                     	;# 
   304  010C                     	;# 
   305  010C                     	;# 
   306  010D                     	;# 
   307  010E                     	;# 
   308  010F                     	;# 
   309  0185                     	;# 
   310  0187                     	;# 
   311  0188                     	;# 
   312  0189                     	;# 
   313  018C                     	;# 
   314  018D                     	;# 
   315  0000                     	;# 
   316  0001                     	;# 
   317  0002                     	;# 
   318  0003                     	;# 
   319  0004                     	;# 
   320  0005                     	;# 
   321  0006                     	;# 
   322  0007                     	;# 
   323  0008                     	;# 
   324  0009                     	;# 
   325  000A                     	;# 
   326  000B                     	;# 
   327  000C                     	;# 
   328  000D                     	;# 
   329  000E                     	;# 
   330  000E                     	;# 
   331  000F                     	;# 
   332  0010                     	;# 
   333  0011                     	;# 
   334  0012                     	;# 
   335  0013                     	;# 
   336  0014                     	;# 
   337  0015                     	;# 
   338  0015                     	;# 
   339  0016                     	;# 
   340  0017                     	;# 
   341  0018                     	;# 
   342  0019                     	;# 
   343  001A                     	;# 
   344  001B                     	;# 
   345  001B                     	;# 
   346  001C                     	;# 
   347  001D                     	;# 
   348  001E                     	;# 
   349  001F                     	;# 
   350  0081                     	;# 
   351  0085                     	;# 
   352  0086                     	;# 
   353  0087                     	;# 
   354  0088                     	;# 
   355  0089                     	;# 
   356  008C                     	;# 
   357  008D                     	;# 
   358  008E                     	;# 
   359  008F                     	;# 
   360  0090                     	;# 
   361  0091                     	;# 
   362  0092                     	;# 
   363  0093                     	;# 
   364  0093                     	;# 
   365  0093                     	;# 
   366  0094                     	;# 
   367  0095                     	;# 
   368  0096                     	;# 
   369  0097                     	;# 
   370  0098                     	;# 
   371  0099                     	;# 
   372  009A                     	;# 
   373  009B                     	;# 
   374  009C                     	;# 
   375  009D                     	;# 
   376  009E                     	;# 
   377  009F                     	;# 
   378  0105                     	;# 
   379  0107                     	;# 
   380  0108                     	;# 
   381  0109                     	;# 
   382  010C                     	;# 
   383  010C                     	;# 
   384  010D                     	;# 
   385  010E                     	;# 
   386  010F                     	;# 
   387  0185                     	;# 
   388  0187                     	;# 
   389  0188                     	;# 
   390  0189                     	;# 
   391  018C                     	;# 
   392  018D                     	;# 
   393  0000                     	;# 
   394  0001                     	;# 
   395  0002                     	;# 
   396  0003                     	;# 
   397  0004                     	;# 
   398  0005                     	;# 
   399  0006                     	;# 
   400  0007                     	;# 
   401  0008                     	;# 
   402  0009                     	;# 
   403  000A                     	;# 
   404  000B                     	;# 
   405  000C                     	;# 
   406  000D                     	;# 
   407  000E                     	;# 
   408  000E                     	;# 
   409  000F                     	;# 
   410  0010                     	;# 
   411  0011                     	;# 
   412  0012                     	;# 
   413  0013                     	;# 
   414  0014                     	;# 
   415  0015                     	;# 
   416  0015                     	;# 
   417  0016                     	;# 
   418  0017                     	;# 
   419  0018                     	;# 
   420  0019                     	;# 
   421  001A                     	;# 
   422  001B                     	;# 
   423  001B                     	;# 
   424  001C                     	;# 
   425  001D                     	;# 
   426  001E                     	;# 
   427  001F                     	;# 
   428  0081                     	;# 
   429  0085                     	;# 
   430  0086                     	;# 
   431  0087                     	;# 
   432  0088                     	;# 
   433  0089                     	;# 
   434  008C                     	;# 
   435  008D                     	;# 
   436  008E                     	;# 
   437  008F                     	;# 
   438  0090                     	;# 
   439  0091                     	;# 
   440  0092                     	;# 
   441  0093                     	;# 
   442  0093                     	;# 
   443  0093                     	;# 
   444  0094                     	;# 
   445  0095                     	;# 
   446  0096                     	;# 
   447  0097                     	;# 
   448  0098                     	;# 
   449  0099                     	;# 
   450  009A                     	;# 
   451  009B                     	;# 
   452  009C                     	;# 
   453  009D                     	;# 
   454  009E                     	;# 
   455  009F                     	;# 
   456  0105                     	;# 
   457  0107                     	;# 
   458  0108                     	;# 
   459  0109                     	;# 
   460  010C                     	;# 
   461  010C                     	;# 
   462  010D                     	;# 
   463  010E                     	;# 
   464  010F                     	;# 
   465  0185                     	;# 
   466  0187                     	;# 
   467  0188                     	;# 
   468  0189                     	;# 
   469  018C                     	;# 
   470  018D                     	;# 
   471                           
   472                           	psect	idataBANK0
   473  0C24                     __pidataBANK0:	
   474                           
   475                           ;initializer for _jahr
   476  0C24  3414               	retlw	20
   477                           
   478                           ;initializer for _mes
   479  0C25  3403               	retlw	3
   480                           
   481                           ;initializer for _datum
   482  0C26  3406               	retlw	6
   483                           
   484                           ;initializer for _dia
   485  0C27  3405               	retlw	5
   486                           
   487                           ;initializer for _hora
   488  0C28  3410               	retlw	16
   489                           
   490                           ;initializer for _min
   491  0C29  3415               	retlw	21
   492                           
   493                           	psect	strings
   494  0700                     __pstrings:	
   495  0700                     stringtab:	
   496  0700                     __stringtab:	
   497  0700                     stringcode:	
   498                           ;	String table - string pointers are 1 byte each
   499                           
   500  0700                     stringdir:	
   501  0700  3007               	movlw	high stringdir
   502  0701  008A               	movwf	10
   503  0702  0804               	movf	4,w
   504  0703  0A84               	incf	4,f
   505  0704  0782               	addwf	2,f
   506  0705                     __stringbase:	
   507  0705  3400               	retlw	0
   508  0706                     __end_of__stringtab:	
   509  0706                     _gota:	
   510  0706  3404               	retlw	4
   511  0707  340A               	retlw	10
   512  0708  340A               	retlw	10
   513  0709  3411               	retlw	17
   514  070A  3411               	retlw	17
   515  070B  3411               	retlw	17
   516  070C  340E               	retlw	14
   517  070D  3400               	retlw	0
   518  070E                     __end_of_gota:	
   519  070E                     _termometro:	
   520  070E  3404               	retlw	4
   521  070F  340A               	retlw	10
   522  0710  340A               	retlw	10
   523  0711  340E               	retlw	14
   524  0712  340E               	retlw	14
   525  0713  341F               	retlw	31
   526  0714  341F               	retlw	31
   527  0715  340E               	retlw	14
   528  0716                     __end_of_termometro:	
   529  0716                     _atilde:	
   530  0716  3402               	retlw	2
   531  0717  3404               	retlw	4
   532  0718  3400               	retlw	0
   533  0719  340E               	retlw	14
   534  071A  3401               	retlw	1
   535  071B  340F               	retlw	15
   536  071C  3411               	retlw	17
   537  071D  340F               	retlw	15
   538  071E                     __end_of_atilde:	
   539  071E                     _arrowr:	
   540  071E  3400               	retlw	0
   541  071F  3408               	retlw	8
   542  0720  340C               	retlw	12
   543  0721  340E               	retlw	14
   544  0722  340F               	retlw	15
   545  0723  340E               	retlw	14
   546  0724  340C               	retlw	12
   547  0725  3408               	retlw	8
   548  0726                     __end_of_arrowr:	
   549  0008                     _PORTD	set	8
   550  0007                     _PORTCbits	set	7
   551  0013                     _SSPBUF	set	19
   552  0014                     _SSPCON	set	20
   553  0006                     _PORTBbits	set	6
   554  000B                     _INTCONbits	set	11
   555  0063                     _SSPIF	set	99
   556  005E                     _PEIE	set	94
   557  005F                     _GIE	set	95
   558  0091                     _SSPCON2bits	set	145
   559  0087                     _TRISCbits	set	135
   560  0094                     _SSPSTAT	set	148
   561  0093                     _SSPADD	set	147
   562  0091                     _SSPCON2	set	145
   563  008F                     _OSCCONbits	set	143
   564  0088                     _TRISD	set	136
   565  0096                     _IOCB	set	150
   566  0081                     _OPTION_REGbits	set	129
   567  0095                     _WPUB	set	149
   568  0086                     _TRISB	set	134
   569  0463                     _SSPIE	set	1123
   570  043C                     _TRISC4	set	1084
   571  043B                     _TRISC3	set	1083
   572  0439                     _TRISC1	set	1081
   573  0438                     _TRISC0	set	1080
   574  0189                     _ANSELH	set	393
   575  0726                     STR_3:	
   576  0726  3454               	retlw	84	;'T'
   577  0727  3465               	retlw	101	;'e'
   578  0728  346D               	retlw	109	;'m'
   579  0729  3470               	retlw	112	;'p'
   580  072A  342E               	retlw	46	;'.'
   581  072B  3420               	retlw	32	;' '
   582  072C  3464               	retlw	100	;'d'
   583  072D  3465               	retlw	101	;'e'
   584  072E  346C               	retlw	108	;'l'
   585  072F  3420               	retlw	32	;' '
   586  0730  3453               	retlw	83	;'S'
   587  0731  3475               	retlw	117	;'u'
   588  0732  3465               	retlw	101	;'e'
   589  0733  346C               	retlw	108	;'l'
   590  0734  346F               	retlw	111	;'o'
   591  0735  343A               	retlw	58	;':'
   592  0736  3400               	retlw	0
   593  0737                     STR_8:	
   594  0737  3473               	retlw	115	;'s'
   595  0738  343A               	retlw	58	;':'
   596  0739  3420               	retlw	32	;' '
   597  073A  347C               	retlw	124	;'|'
   598  073B  3420               	retlw	32	;' '
   599  073C  3446               	retlw	70	;'F'
   600  073D  3472               	retlw	114	;'r'
   601  073E  3465               	retlw	101	;'e'
   602  073F  346E               	retlw	110	;'n'
   603  0740  3474               	retlw	116	;'t'
   604  0741  3465               	retlw	101	;'e'
   605  0742  343A               	retlw	58	;':'
   606  0743  3400               	retlw	0
   607  0744                     STR_11:	
   608  0744  3454               	retlw	84	;'T'
   609  0745  346F               	retlw	111	;'o'
   610  0746  346D               	retlw	109	;'m'
   611  0747  3461               	retlw	97	;'a'
   612  0748  3472               	retlw	114	;'r'
   613  0749  3420               	retlw	32	;' '
   614  074A  3464               	retlw	100	;'d'
   615  074B  3461               	retlw	97	;'a'
   616  074C  3474               	retlw	116	;'t'
   617  074D  346F               	retlw	111	;'o'
   618  074E  3473               	retlw	115	;'s'
   619  074F  343A               	retlw	58	;':'
   620  0750  3400               	retlw	0
   621  0751                     STR_2:	
   622  0751  3441               	retlw	65	;'A'
   623  0752  346D               	retlw	109	;'m'
   624  0753  3462               	retlw	98	;'b'
   625  0754  3469               	retlw	105	;'i'
   626  0755  3465               	retlw	101	;'e'
   627  0756  346E               	retlw	110	;'n'
   628  0757  3474               	retlw	116	;'t'
   629  0758  3465               	retlw	101	;'e'
   630  0759  343A               	retlw	58	;':'
   631  075A  3400               	retlw	0
   632  075B                     STR_5:	
   633  075B  3448               	retlw	72	;'H'
   634  075C  3475               	retlw	117	;'u'
   635  075D  346D               	retlw	109	;'m'
   636  075E  3465               	retlw	101	;'e'
   637  075F  3464               	retlw	100	;'d'
   638  0760  3461               	retlw	97	;'a'
   639  0761  3464               	retlw	100	;'d'
   640  0762  343A               	retlw	58	;':'
   641  0763  3400               	retlw	0
   642  0764                     STR_14:	
   643  0764  3445               	retlw	69	;'E'
   644  0765  3452               	retlw	82	;'R'
   645  0766  3452               	retlw	82	;'R'
   646  0767  344F               	retlw	79	;'O'
   647  0768  3452               	retlw	82	;'R'
   648  0769  3400               	retlw	0
   649  076A                     STR_12:	
   650  076A  3431               	retlw	49	;'1'
   651  076B  3430               	retlw	48	;'0'
   652  076C  346D               	retlw	109	;'m'
   653  076D  3469               	retlw	105	;'i'
   654  076E  346E               	retlw	110	;'n'
   655  076F  3400               	retlw	0
   656  0770                     STR_13:	
   657  0770  3435               	retlw	53	;'5'
   658  0771  3478               	retlw	120	;'x'
   659  0772  3435               	retlw	53	;'5'
   660  0773  3400               	retlw	0
   661  0774                     STR_7:	
   662  0774  3441               	retlw	65	;'A'
   663  0775  3474               	retlw	116	;'t'
   664  0776  3472               	retlw	114	;'r'
   665  0777  3400               	retlw	0
   666  0778                     STR_1:	
   667  0778  3432               	retlw	50	;'2'
   668  0779  3430               	retlw	48	;'0'
   669  077A  3400               	retlw	0
   670  077B                     STR_6:	
   671  077B  3438               	retlw	56	;'8'
   672  077C  3430               	retlw	48	;'0'
   673  077D  3400               	retlw	0
   674  077E                     STR_9:	
   675  077E  3433               	retlw	51	;'3'
   676  077F  3400               	retlw	0
   677  0780                     STR_10:	
   678  0780  3434               	retlw	52	;'4'
   679  0781  3400               	retlw	0
   680  0778                     
   681                           ; #config settings
   682  0000                     
   683                           	psect	cinit
   684  000F                     start_initialization:	
   685  000F                     __initialization:	
   686                           
   687                           ; Initialize objects allocated to BANK0
   688  000F  120A  158A  2424  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   689  0014  00C7               	movwf	__pdataBANK0& (0+127)
   690  0015  120A  158A  2425  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   691  001A  00C8               	movwf	(__pdataBANK0+1)& (0+127)
   692  001B  120A  158A  2426  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   693  0020  00C9               	movwf	(__pdataBANK0+2)& (0+127)
   694  0021  120A  158A  2427  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   695  0026  00CA               	movwf	(__pdataBANK0+3)& (0+127)
   696  0027  120A  158A  2428  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   697  002C  00CB               	movwf	(__pdataBANK0+4)& (0+127)
   698  002D  120A  158A  2429   	fcall	__pidataBANK0+5	;fetch initializer
   699  0030  00CC               	movwf	(__pdataBANK0+5)& (0+127)
   700                           
   701                           ; Clear objects allocated to BANK0
   702  0031  01BC               	clrf	__pbssBANK0& (0+127)
   703  0032  01BD               	clrf	(__pbssBANK0+1)& (0+127)
   704  0033  01BE               	clrf	(__pbssBANK0+2)& (0+127)
   705  0034  01BF               	clrf	(__pbssBANK0+3)& (0+127)
   706  0035  01C0               	clrf	(__pbssBANK0+4)& (0+127)
   707  0036  01C1               	clrf	(__pbssBANK0+5)& (0+127)
   708  0037  01C2               	clrf	(__pbssBANK0+6)& (0+127)
   709  0038  01C3               	clrf	(__pbssBANK0+7)& (0+127)
   710  0039  01C4               	clrf	(__pbssBANK0+8)& (0+127)
   711  003A  01C5               	clrf	(__pbssBANK0+9)& (0+127)
   712  003B  01C6               	clrf	(__pbssBANK0+10)& (0+127)
   713                           
   714                           ; Clear objects allocated to COMMON
   715  003C  01FA               	clrf	__pbssCOMMON& (0+127)
   716  003D  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   717  003E                     end_of_initialization:	
   718                           ;End of C runtime variable initialization code
   719                           
   720  003E                     __end_of__initialization:	
   721  003E  0183               	clrf	3
   722  003F  120A  158A  2CCB   	ljmp	_main	;jump to C main() function
   723                           
   724                           	psect	bssCOMMON
   725  007A                     __pbssCOMMON:	
   726  007A                     _banderaPUSH1:	
   727  007A                     	ds	1
   728  007B                     _banderaBoton:	
   729  007B                     	ds	1
   730                           
   731                           	psect	bssBANK0
   732  003C                     __pbssBANK0:	
   733  003C                     uint_to_array@F1348:	
   734  003C                     	ds	6
   735  0042                     _banderaPUSH2:	
   736  0042                     	ds	1
   737  0043                     _temp_array:	
   738  0043                     	ds	1
   739  0044                     _temperatura:	
   740  0044                     	ds	1
   741  0045                     _seg:	
   742  0045                     	ds	1
   743  0046                     _estado:	
   744  0046                     	ds	1
   745                           
   746                           	psect	dataBANK0
   747  0047                     __pdataBANK0:	
   748  0047                     _jahr:	
   749  0047                     	ds	1
   750  0048                     _mes:	
   751  0048                     	ds	1
   752  0049                     _datum:	
   753  0049                     	ds	1
   754  004A                     _dia:	
   755  004A                     	ds	1
   756  004B                     _hora:	
   757  004B                     	ds	1
   758  004C                     _min:	
   759  004C                     	ds	1
   760                           
   761                           	psect	cstackCOMMON
   762  0070                     __pcstackCOMMON:	
   763  0070                     ?_SetUp:	
   764  0070                     ?_get_Time:	
   765                           ; 1 bytes @ 0x0
   766                           
   767  0070                     ?_get_Temp:	
   768                           ; 1 bytes @ 0x0
   769                           
   770  0070                     ?_mostrarLCD:	
   771                           ; 1 bytes @ 0x0
   772                           
   773  0070                     ?_pressBoton1:	
   774                           ; 1 bytes @ 0x0
   775                           
   776  0070                     ?_pressBoton2:	
   777                           ; 1 bytes @ 0x0
   778                           
   779  0070                     ?_LCD_init:	
   780                           ; 1 bytes @ 0x0
   781                           
   782  0070                     ?_LCD_clear:	
   783                           ; 1 bytes @ 0x0
   784                           
   785  0070                     ?_LCD_Write_Character:	
   786                           ; 1 bytes @ 0x0
   787                           
   788  0070                     ?_LCD_Write_String:	
   789                           ; 1 bytes @ 0x0
   790                           
   791  0070                     ?_uint_to_array:	
   792                           ; 1 bytes @ 0x0
   793                           
   794  0070                     ?_uint_to_char:	
   795                           ; 1 bytes @ 0x0
   796                           
   797  0070                     ?_I2C_Master_Start:	
   798                           ; 1 bytes @ 0x0
   799                           
   800  0070                     ?_I2C_Master_Stop:	
   801                           ; 1 bytes @ 0x0
   802                           
   803  0070                     ?_ISR:	
   804                           ; 1 bytes @ 0x0
   805                           
   806  0070                     ??_ISR:	
   807                           ; 1 bytes @ 0x0
   808                           
   809  0070                     ?_main:	
   810                           ; 1 bytes @ 0x0
   811                           
   812  0070                     ?_BCD_a_DEC:	
   813                           ; 1 bytes @ 0x0
   814                           
   815  0070                     ?_I2C_Master_Wait:	
   816                           ; 1 bytes @ 0x0
   817                           
   818  0070                     ?_LCD_Cmd:	
   819                           ; 1 bytes @ 0x0
   820                           
   821                           
   822                           ; 1 bytes @ 0x0
   823  0070                     	ds	2
   824  0072                     ?_OSC_config:	
   825  0072                     ??_LCD_Write_Character:	
   826                           ; 1 bytes @ 0x2
   827                           
   828  0072                     ??_uint_to_char:	
   829                           ; 1 bytes @ 0x2
   830                           
   831  0072                     ??_I2C_Master_Start:	
   832                           ; 1 bytes @ 0x2
   833                           
   834  0072                     ?_I2C_Master_Write:	
   835                           ; 1 bytes @ 0x2
   836                           
   837  0072                     ??_I2C_Master_Stop:	
   838                           ; 1 bytes @ 0x2
   839                           
   840  0072                     ??_I2C_Master_Wait:	
   841                           ; 1 bytes @ 0x2
   842                           
   843  0072                     ??_LCD_Cmd:	
   844                           ; 1 bytes @ 0x2
   845                           
   846  0072                     ?___bmul:	
   847                           ; 1 bytes @ 0x2
   848                           
   849  0072                     ?_I2C_Master_Read:	
   850                           ; 1 bytes @ 0x2
   851                           
   852  0072                     ?___wmul:	
   853                           ; 2 bytes @ 0x2
   854                           
   855  0072                     ?___awmod:	
   856                           ; 2 bytes @ 0x2
   857                           
   858  0072                     ?___lldiv:	
   859                           ; 2 bytes @ 0x2
   860                           
   861  0072                     ___bmul@multiplicand:	
   862                           ; 4 bytes @ 0x2
   863                           
   864  0072                     I2C_Master_Write@d:	
   865                           ; 1 bytes @ 0x2
   866                           
   867  0072                     I2C_Master_Read@a:	
   868                           ; 2 bytes @ 0x2
   869                           
   870  0072                     ___wmul@multiplier:	
   871                           ; 2 bytes @ 0x2
   872                           
   873  0072                     ___awmod@divisor:	
   874                           ; 2 bytes @ 0x2
   875                           
   876  0072                     OSC_config@frecuencia:	
   877                           ; 2 bytes @ 0x2
   878                           
   879  0072                     ___lldiv@divisor:	
   880                           ; 4 bytes @ 0x2
   881                           
   882                           
   883                           ; 4 bytes @ 0x2
   884  0072                     	ds	1
   885  0073                     ??___bmul:	
   886  0073                     LCD_Write_Character@caracter:	
   887                           ; 1 bytes @ 0x3
   888                           
   889                           
   890                           ; 1 bytes @ 0x3
   891  0073                     	ds	1
   892  0074                     ??_LCD_Write_String:	
   893  0074                     ??_I2C_Master_Write:	
   894                           ; 1 bytes @ 0x4
   895                           
   896  0074                     ??_I2C_Master_Read:	
   897                           ; 1 bytes @ 0x4
   898                           
   899  0074                     LCD_Cmd@comando:	
   900                           ; 1 bytes @ 0x4
   901                           
   902  0074                     uint_to_char@numero:	
   903                           ; 1 bytes @ 0x4
   904                           
   905  0074                     ___bmul@product:	
   906                           ; 1 bytes @ 0x4
   907                           
   908  0074                     LCD_Write_String@n:	
   909                           ; 1 bytes @ 0x4
   910                           
   911  0074                     ___wmul@multiplicand:	
   912                           ; 2 bytes @ 0x4
   913                           
   914  0074                     ___awmod@dividend:	
   915                           ; 2 bytes @ 0x4
   916                           
   917                           
   918                           ; 2 bytes @ 0x4
   919  0074                     	ds	1
   920  0075                     ??_LCD_init:	
   921  0075                     ?_LCD_Create_Char:	
   922                           ; 1 bytes @ 0x5
   923                           
   924  0075                     ??_LCD_clear:	
   925                           ; 1 bytes @ 0x5
   926                           
   927  0075                     ?_LCD_Set_Cursor:	
   928                           ; 1 bytes @ 0x5
   929                           
   930  0075                     LCD_Set_Cursor@columna:	
   931                           ; 1 bytes @ 0x5
   932                           
   933  0075                     LCD_Create_Char@chardata:	
   934                           ; 1 bytes @ 0x5
   935                           
   936  0075                     uint_to_char@numChr:	
   937                           ; 1 bytes @ 0x5
   938                           
   939  0075                     ___bmul@multiplier:	
   940                           ; 1 bytes @ 0x5
   941                           
   942                           
   943                           ; 1 bytes @ 0x5
   944  0075                     	ds	1
   945  0076                     ??_OSC_config:	
   946  0076                     ??_LCD_Create_Char:	
   947                           ; 1 bytes @ 0x6
   948                           
   949  0076                     ??_LCD_Set_Cursor:	
   950                           ; 1 bytes @ 0x6
   951                           
   952  0076                     ??_BCD_a_DEC:	
   953                           ; 1 bytes @ 0x6
   954                           
   955  0076                     ??___wmul:	
   956                           ; 1 bytes @ 0x6
   957                           
   958  0076                     ??___awmod:	
   959                           ; 1 bytes @ 0x6
   960                           
   961  0076                     LCD_Write_String@a:	
   962                           ; 1 bytes @ 0x6
   963                           
   964  0076                     I2C_Master_Read@temp:	
   965                           ; 1 bytes @ 0x6
   966                           
   967  0076                     ___wmul@product:	
   968                           ; 2 bytes @ 0x6
   969                           
   970  0076                     ___lldiv@dividend:	
   971                           ; 2 bytes @ 0x6
   972                           
   973                           
   974                           ; 4 bytes @ 0x6
   975  0076                     	ds	1
   976  0077                     ??_pressBoton1:	
   977  0077                     ??_pressBoton2:	
   978                           ; 1 bytes @ 0x7
   979                           
   980  0077                     LCD_Create_Char@charnum:	
   981                           ; 1 bytes @ 0x7
   982                           
   983  0077                     ___awmod@counter:	
   984                           ; 1 bytes @ 0x7
   985                           
   986                           
   987                           ; 1 bytes @ 0x7
   988  0077                     	ds	1
   989  0078                     ??_get_Temp:	
   990  0078                     ??___awdiv:	
   991                           ; 1 bytes @ 0x8
   992                           
   993  0078                     LCD_Set_Cursor@linea:	
   994                           ; 1 bytes @ 0x8
   995                           
   996  0078                     LCD_Create_Char@n:	
   997                           ; 1 bytes @ 0x8
   998                           
   999  0078                     ___awmod@sign:	
  1000                           ; 1 bytes @ 0x8
  1001                           
  1002                           
  1003                           ; 1 bytes @ 0x8
  1004  0078                     	ds	1
  1005  0079                     BCD_a_DEC@numBCD:	
  1006  0079                     LCD_Set_Cursor@corrimiento:	
  1007                           ; 1 bytes @ 0x9
  1008                           
  1009                           
  1010                           ; 1 bytes @ 0x9
  1011  0079                     	ds	1
  1012                           
  1013                           	psect	cstackBANK0
  1014  0020                     __pcstackBANK0:	
  1015  0020                     ??_get_Time:	
  1016  0020                     ??___lldiv:	
  1017                           ; 1 bytes @ 0x0
  1018                           
  1019  0020                     ?___awdiv:	
  1020                           ; 1 bytes @ 0x0
  1021                           
  1022  0020                     ___awdiv@divisor:	
  1023                           ; 2 bytes @ 0x0
  1024                           
  1025                           
  1026                           ; 2 bytes @ 0x0
  1027  0020                     	ds	1
  1028  0021                     get_Temp@TempMSB:	
  1029  0021                     ___lldiv@quotient:	
  1030                           ; 1 bytes @ 0x1
  1031                           
  1032                           
  1033                           ; 4 bytes @ 0x1
  1034  0021                     	ds	1
  1035  0022                     ___awdiv@dividend:	
  1036                           
  1037                           ; 2 bytes @ 0x2
  1038  0022                     	ds	2
  1039  0024                     ___awdiv@counter:	
  1040                           
  1041                           ; 1 bytes @ 0x4
  1042  0024                     	ds	1
  1043  0025                     ___lldiv@counter:	
  1044  0025                     ___awdiv@sign:	
  1045                           ; 1 bytes @ 0x5
  1046                           
  1047                           
  1048                           ; 1 bytes @ 0x5
  1049  0025                     	ds	1
  1050  0026                     ?_I2C_Master_Init:	
  1051  0026                     ___awdiv@quotient:	
  1052                           ; 1 bytes @ 0x6
  1053                           
  1054  0026                     I2C_Master_Init@c:	
  1055                           ; 2 bytes @ 0x6
  1056                           
  1057                           
  1058                           ; 4 bytes @ 0x6
  1059  0026                     	ds	2
  1060  0028                     ??_uint_to_array:	
  1061  0028                     ?_display_Uhrzeit:	
  1062                           ; 1 bytes @ 0x8
  1063                           
  1064  0028                     ?_display_Datum:	
  1065                           ; 1 bytes @ 0x8
  1066                           
  1067  0028                     display_Uhrzeit@columna:	
  1068                           ; 1 bytes @ 0x8
  1069                           
  1070  0028                     display_Datum@columna:	
  1071                           ; 1 bytes @ 0x8
  1072                           
  1073                           
  1074                           ; 1 bytes @ 0x8
  1075  0028                     	ds	1
  1076  0029                     ??_display_Uhrzeit:	
  1077  0029                     ??_display_Datum:	
  1078                           ; 1 bytes @ 0x9
  1079                           
  1080                           
  1081                           ; 1 bytes @ 0x9
  1082  0029                     	ds	1
  1083  002A                     ??_I2C_Master_Init:	
  1084                           
  1085                           ; 1 bytes @ 0xA
  1086  002A                     	ds	2
  1087  002C                     display_Uhrzeit@fila:	
  1088  002C                     display_Datum@fila:	
  1089                           ; 1 bytes @ 0xC
  1090                           
  1091                           
  1092                           ; 1 bytes @ 0xC
  1093  002C                     	ds	1
  1094  002D                     display_Uhrzeit@seg_u:	
  1095  002D                     display_Datum@dia_u:	
  1096                           ; 1 bytes @ 0xD
  1097                           
  1098                           
  1099                           ; 1 bytes @ 0xD
  1100  002D                     	ds	1
  1101  002E                     ??_SetUp:	
  1102  002E                     display_Uhrzeit@seg_d:	
  1103                           ; 1 bytes @ 0xE
  1104                           
  1105  002E                     display_Datum@dia_d:	
  1106                           ; 1 bytes @ 0xE
  1107                           
  1108  002E                     uint_to_array@decenas:	
  1109                           ; 1 bytes @ 0xE
  1110                           
  1111                           
  1112                           ; 1 bytes @ 0xE
  1113  002E                     	ds	1
  1114  002F                     display_Uhrzeit@min_u:	
  1115  002F                     display_Datum@mes_u:	
  1116                           ; 1 bytes @ 0xF
  1117                           
  1118  002F                     uint_to_array@resultado:	
  1119                           ; 1 bytes @ 0xF
  1120                           
  1121                           
  1122                           ; 6 bytes @ 0xF
  1123  002F                     	ds	1
  1124  0030                     display_Uhrzeit@min_d:	
  1125  0030                     display_Datum@mes_d:	
  1126                           ; 1 bytes @ 0x10
  1127                           
  1128                           
  1129                           ; 1 bytes @ 0x10
  1130  0030                     	ds	1
  1131  0031                     display_Uhrzeit@Uhr_u:	
  1132  0031                     display_Datum@jahr_u:	
  1133                           ; 1 bytes @ 0x11
  1134                           
  1135                           
  1136                           ; 1 bytes @ 0x11
  1137  0031                     	ds	1
  1138  0032                     display_Uhrzeit@Uhr_d:	
  1139  0032                     display_Datum@jahr_d:	
  1140                           ; 1 bytes @ 0x12
  1141                           
  1142                           
  1143                           ; 1 bytes @ 0x12
  1144  0032                     	ds	3
  1145  0035                     uint_to_array@centenas:	
  1146                           
  1147                           ; 1 bytes @ 0x15
  1148  0035                     	ds	1
  1149  0036                     uint_to_array@numero:	
  1150                           
  1151                           ; 1 bytes @ 0x16
  1152  0036                     	ds	1
  1153  0037                     ??_mostrarLCD:	
  1154                           
  1155                           ; 1 bytes @ 0x17
  1156  0037                     	ds	2
  1157  0039                     mostrarLCD@pantalla:	
  1158                           
  1159                           ; 1 bytes @ 0x19
  1160  0039                     	ds	1
  1161  003A                     mostrarLCD@signo:	
  1162                           
  1163                           ; 1 bytes @ 0x1A
  1164  003A                     	ds	1
  1165  003B                     ??_main:	
  1166                           
  1167                           ; 1 bytes @ 0x1B
  1168  003B                     	ds	1
  1169                           
  1170                           	psect	maintext
  1171  0CCB                     __pmaintext:	
  1172 ;;
  1173 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1174 ;;
  1175 ;; *************** function _main *****************
  1176 ;; Defined at:
  1177 ;;		line 103 in file "main_Master.c"
  1178 ;; Parameters:    Size  Location     Type
  1179 ;;		None
  1180 ;; Auto vars:     Size  Location     Type
  1181 ;;		None
  1182 ;; Return value:  Size  Location     Type
  1183 ;;                  1    wreg      void 
  1184 ;; Registers used:
  1185 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1186 ;; Tracked objects:
  1187 ;;		On entry : B00/0
  1188 ;;		On exit  : 0/0
  1189 ;;		Unchanged: 0/0
  1190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1191 ;;      Params:         0       0       0       0       0
  1192 ;;      Locals:         0       0       0       0       0
  1193 ;;      Temps:          0       1       0       0       0
  1194 ;;      Totals:         0       1       0       0       0
  1195 ;;Total ram usage:        1 bytes
  1196 ;; Hardware stack levels required when called:    5
  1197 ;; This function calls:
  1198 ;;		_SetUp
  1199 ;;		_get_Temp
  1200 ;;		_get_Time
  1201 ;;		_mostrarLCD
  1202 ;;		_pressBoton1
  1203 ;;		_pressBoton2
  1204 ;; This function is called by:
  1205 ;;		Startup code after reset
  1206 ;; This function uses a non-reentrant model
  1207 ;;
  1208                           
  1209                           
  1210                           ;psect for function _main
  1211  0CCB                     _main:	
  1212                           
  1213                           ;main_Master.c: 104:     SetUp();
  1214                           
  1215                           ;incstack = 0
  1216                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1217  0CCB  120A  118A  2782  120A  158A  	fcall	_SetUp
  1218  0CD0                     l3448:	
  1219                           
  1220                           ;main_Master.c: 107:         get_Time();
  1221  0CD0  120A  118A  2042  120A  158A  	fcall	_get_Time
  1222                           
  1223                           ;main_Master.c: 108:         temperatura = get_Temp();
  1224  0CD5  120A  158A  2650  120A  158A  	fcall	_get_Temp
  1225  0CDA  1283               	bcf	3,5	;RP0=0, select bank0
  1226  0CDB  1303               	bcf	3,6	;RP1=0, select bank0
  1227  0CDC  00BB               	movwf	??_main
  1228  0CDD  083B               	movf	??_main,w
  1229  0CDE  00C4               	movwf	_temperatura
  1230                           
  1231                           ;main_Master.c: 111:         mostrarLCD(estado);
  1232  0CDF  0846               	movf	_estado,w
  1233  0CE0  120A  118A  220E  120A  158A  	fcall	_mostrarLCD
  1234                           
  1235                           ;main_Master.c: 112:         pressBoton1();
  1236  0CE5  120A  158A  25DD  120A  158A  	fcall	_pressBoton1
  1237                           
  1238                           ;main_Master.c: 113:         pressBoton2();
  1239  0CEA  120A  158A  2615  120A  158A  	fcall	_pressBoton2
  1240  0CEF  2CD0               	goto	l3448
  1241  0CF0                     __end_of_main:	
  1242                           
  1243                           	psect	text1
  1244  0E15                     __ptext1:	
  1245 ;; *************** function _pressBoton2 *****************
  1246 ;; Defined at:
  1247 ;;		line 311 in file "main_Master.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;		None
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;		None
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, status,2, status,0, pclath, cstack
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1261 ;;      Params:         0       0       0       0       0
  1262 ;;      Locals:         0       0       0       0       0
  1263 ;;      Temps:          2       0       0       0       0
  1264 ;;      Totals:         2       0       0       0       0
  1265 ;;Total ram usage:        2 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; Hardware stack levels required when called:    3
  1268 ;; This function calls:
  1269 ;;		_LCD_clear
  1270 ;; This function is called by:
  1271 ;;		_main
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           
  1276                           ;psect for function _pressBoton2
  1277  0E15                     _pressBoton2:	
  1278                           
  1279                           ;main_Master.c: 312:     if (banderaBoton == 1){
  1280                           
  1281                           ;incstack = 0
  1282                           ; Regs used in _pressBoton2: [wreg+status,2+status,0+pclath+cstack]
  1283  0E15  037B               	decf	_banderaBoton,w
  1284  0E16  1D03               	btfss	3,2
  1285  0E17  2E3C               	goto	l2686
  1286                           
  1287                           ;main_Master.c: 313:         if (banderaPUSH2 == 0){
  1288  0E18  1283               	bcf	3,5	;RP0=0, select bank0
  1289  0E19  1303               	bcf	3,6	;RP1=0, select bank0
  1290  0E1A  0842               	movf	_banderaPUSH2,w
  1291  0E1B  1903               	btfsc	3,2
  1292                           
  1293                           ;main_Master.c: 314:             if (PORTBbits.RB2 == 0){
  1294  0E1C  1906               	btfsc	6,2	;volatile
  1295  0E1D  2E3C               	goto	l2686
  1296                           
  1297                           ;main_Master.c: 315:                 LCD_clear();
  1298  0E1E  120A  158A  2472  120A  158A  	fcall	_LCD_clear
  1299                           
  1300                           ;main_Master.c: 316:                 _delay((unsigned long)((10)*(8000000/4000.0)));
  1301  0E23  301A               	movlw	26
  1302  0E24  00F8               	movwf	??_pressBoton2+1
  1303  0E25  30F8               	movlw	248
  1304  0E26  00F7               	movwf	??_pressBoton2
  1305  0E27                     u1427:	
  1306  0E27  0BF7               	decfsz	??_pressBoton2,f
  1307  0E28  2E27               	goto	u1427
  1308  0E29  0BF8               	decfsz	??_pressBoton2+1,f
  1309  0E2A  2E27               	goto	u1427
  1310  0E2B  0000               	nop
  1311                           
  1312                           ;main_Master.c: 317:                 estado --;
  1313  0E2C  3001               	movlw	1
  1314  0E2D  1283               	bcf	3,5	;RP0=0, select bank0
  1315  0E2E  1303               	bcf	3,6	;RP1=0, select bank0
  1316  0E2F  02C6               	subwf	_estado,f
  1317                           
  1318                           ;main_Master.c: 318:                 if (estado <= 255 && estado > 250){
  1319  0E30  30FB               	movlw	251
  1320  0E31  0246               	subwf	_estado,w
  1321  0E32  1C03               	skipc
  1322  0E33  2E38               	goto	l2680
  1323                           
  1324                           ;main_Master.c: 319:                     estado = 5;
  1325  0E34  3005               	movlw	5
  1326  0E35  00F7               	movwf	??_pressBoton2
  1327  0E36  0877               	movf	??_pressBoton2,w
  1328  0E37  00C6               	movwf	_estado
  1329  0E38                     l2680:	
  1330                           
  1331                           ;main_Master.c: 321:                 banderaBoton = 0;
  1332  0E38  01FB               	clrf	_banderaBoton
  1333                           
  1334                           ;main_Master.c: 322:                 banderaPUSH2 = 1;
  1335  0E39  01C2               	clrf	_banderaPUSH2
  1336  0E3A  0AC2               	incf	_banderaPUSH2,f
  1337                           
  1338                           ;main_Master.c: 323:                 INTCONbits.RBIE = 1;
  1339  0E3B  158B               	bsf	11,3	;volatile
  1340  0E3C                     l2686:	
  1341                           
  1342                           ;main_Master.c: 327:     if (banderaPUSH2 == 1){
  1343  0E3C  1283               	bcf	3,5	;RP0=0, select bank0
  1344  0E3D  1303               	bcf	3,6	;RP1=0, select bank0
  1345  0E3E  0342               	decf	_banderaPUSH2,w
  1346  0E3F  1D03               	btfss	3,2
  1347  0E40  0008               	return
  1348                           
  1349                           ;main_Master.c: 328:         if (PORTBbits.RB2 == 1){
  1350  0E41  1D06               	btfss	6,2	;volatile
  1351  0E42  0008               	return
  1352                           
  1353                           ;main_Master.c: 329:         _delay((unsigned long)((10)*(8000000/4000.0)));
  1354  0E43  301A               	movlw	26
  1355  0E44  00F8               	movwf	??_pressBoton2+1
  1356  0E45  30F8               	movlw	248
  1357  0E46  00F7               	movwf	??_pressBoton2
  1358  0E47                     u1437:	
  1359  0E47  0BF7               	decfsz	??_pressBoton2,f
  1360  0E48  2E47               	goto	u1437
  1361  0E49  0BF8               	decfsz	??_pressBoton2+1,f
  1362  0E4A  2E47               	goto	u1437
  1363  0E4B  0000               	nop
  1364                           
  1365                           ;main_Master.c: 330:         banderaPUSH2 = 0;
  1366  0E4C  1283               	bcf	3,5	;RP0=0, select bank0
  1367  0E4D  1303               	bcf	3,6	;RP1=0, select bank0
  1368  0E4E  01C2               	clrf	_banderaPUSH2
  1369  0E4F  0008               	return
  1370  0E50                     __end_of_pressBoton2:	
  1371                           
  1372                           	psect	text2
  1373  0DDD                     __ptext2:	
  1374 ;; *************** function _pressBoton1 *****************
  1375 ;; Defined at:
  1376 ;;		line 287 in file "main_Master.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;		None
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;		None
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      void 
  1383 ;; Registers used:
  1384 ;;		wreg, status,2, status,0, pclath, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1390 ;;      Params:         0       0       0       0       0
  1391 ;;      Locals:         0       0       0       0       0
  1392 ;;      Temps:          2       0       0       0       0
  1393 ;;      Totals:         2       0       0       0       0
  1394 ;;Total ram usage:        2 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    3
  1397 ;; This function calls:
  1398 ;;		_LCD_clear
  1399 ;; This function is called by:
  1400 ;;		_main
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404                           
  1405                           ;psect for function _pressBoton1
  1406  0DDD                     _pressBoton1:	
  1407                           
  1408                           ;main_Master.c: 288:     if (banderaBoton == 1){
  1409                           
  1410                           ;incstack = 0
  1411                           ; Regs used in _pressBoton1: [wreg+status,2+status,0+pclath+cstack]
  1412  0DDD  037B               	decf	_banderaBoton,w
  1413  0DDE  1D03               	btfss	3,2
  1414  0DDF  2E03               	goto	l2656
  1415                           
  1416                           ;main_Master.c: 289:         if (banderaPUSH1 == 0){
  1417  0DE0  087A               	movf	_banderaPUSH1,w
  1418  0DE1  1D03               	btfss	3,2
  1419  0DE2  2E03               	goto	l2656
  1420                           
  1421                           ;main_Master.c: 290:             if (PORTBbits.RB1 == 0){
  1422  0DE3  1283               	bcf	3,5	;RP0=0, select bank0
  1423  0DE4  1303               	bcf	3,6	;RP1=0, select bank0
  1424  0DE5  1886               	btfsc	6,1	;volatile
  1425  0DE6  2E03               	goto	l2656
  1426                           
  1427                           ;main_Master.c: 291:                 LCD_clear();
  1428  0DE7  120A  158A  2472  120A  158A  	fcall	_LCD_clear
  1429                           
  1430                           ;main_Master.c: 292:                 _delay((unsigned long)((10)*(8000000/4000.0)));
  1431  0DEC  301A               	movlw	26
  1432  0DED  00F8               	movwf	??_pressBoton1+1
  1433  0DEE  30F8               	movlw	248
  1434  0DEF  00F7               	movwf	??_pressBoton1
  1435  0DF0                     u1447:	
  1436  0DF0  0BF7               	decfsz	??_pressBoton1,f
  1437  0DF1  2DF0               	goto	u1447
  1438  0DF2  0BF8               	decfsz	??_pressBoton1+1,f
  1439  0DF3  2DF0               	goto	u1447
  1440  0DF4  0000               	nop
  1441                           
  1442                           ;main_Master.c: 293:                 estado ++;
  1443  0DF5  3001               	movlw	1
  1444  0DF6  00F7               	movwf	??_pressBoton1
  1445  0DF7  0877               	movf	??_pressBoton1,w
  1446  0DF8  1283               	bcf	3,5	;RP0=0, select bank0
  1447  0DF9  1303               	bcf	3,6	;RP1=0, select bank0
  1448  0DFA  07C6               	addwf	_estado,f
  1449                           
  1450                           ;main_Master.c: 294:                 if (estado > 5){
  1451  0DFB  3006               	movlw	6
  1452  0DFC  0246               	subwf	_estado,w
  1453  0DFD  1803               	btfsc	3,0
  1454                           
  1455                           ;main_Master.c: 295:                     estado = 0;
  1456  0DFE  01C6               	clrf	_estado
  1457                           
  1458                           ;main_Master.c: 297:                 banderaBoton = 0;
  1459                           
  1460                           ;main_Master.c: 296:                 }
  1461  0DFF  01FB               	clrf	_banderaBoton
  1462                           
  1463                           ;main_Master.c: 298:                 banderaPUSH1 = 1;
  1464  0E00  01FA               	clrf	_banderaPUSH1
  1465  0E01  0AFA               	incf	_banderaPUSH1,f
  1466                           
  1467                           ;main_Master.c: 299:                 INTCONbits.RBIE = 1;
  1468  0E02  158B               	bsf	11,3	;volatile
  1469  0E03                     l2656:	
  1470                           
  1471                           ;main_Master.c: 303:     if (banderaPUSH1 == 1){
  1472  0E03  037A               	decf	_banderaPUSH1,w
  1473  0E04  1D03               	btfss	3,2
  1474  0E05  0008               	return
  1475                           
  1476                           ;main_Master.c: 304:         if (PORTBbits.RB1 == 1){
  1477  0E06  1283               	bcf	3,5	;RP0=0, select bank0
  1478  0E07  1303               	bcf	3,6	;RP1=0, select bank0
  1479  0E08  1C86               	btfss	6,1	;volatile
  1480  0E09  0008               	return
  1481                           
  1482                           ;main_Master.c: 305:         _delay((unsigned long)((10)*(8000000/4000.0)));
  1483  0E0A  301A               	movlw	26
  1484  0E0B  00F8               	movwf	??_pressBoton1+1
  1485  0E0C  30F8               	movlw	248
  1486  0E0D  00F7               	movwf	??_pressBoton1
  1487  0E0E                     u1457:	
  1488  0E0E  0BF7               	decfsz	??_pressBoton1,f
  1489  0E0F  2E0E               	goto	u1457
  1490  0E10  0BF8               	decfsz	??_pressBoton1+1,f
  1491  0E11  2E0E               	goto	u1457
  1492  0E12  0000               	nop
  1493                           
  1494                           ;main_Master.c: 306:         banderaPUSH1 = 0;
  1495  0E13  01FA               	clrf	_banderaPUSH1
  1496  0E14  0008               	return
  1497  0E15                     __end_of_pressBoton1:	
  1498                           
  1499                           	psect	text3
  1500  020E                     __ptext3:	
  1501 ;; *************** function _mostrarLCD *****************
  1502 ;; Defined at:
  1503 ;;		line 215 in file "main_Master.c"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;  pantalla        1    wreg     unsigned char 
  1506 ;; Auto vars:     Size  Location     Type
  1507 ;;  pantalla        1   25[BANK0 ] unsigned char 
  1508 ;;  signo           1   26[BANK0 ] unsigned char 
  1509 ;; Return value:  Size  Location     Type
  1510 ;;                  1    wreg      void 
  1511 ;; Registers used:
  1512 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1513 ;; Tracked objects:
  1514 ;;		On entry : 0/0
  1515 ;;		On exit  : 0/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1518 ;;      Params:         0       0       0       0       0
  1519 ;;      Locals:         0       2       0       0       0
  1520 ;;      Temps:          0       2       0       0       0
  1521 ;;      Totals:         0       4       0       0       0
  1522 ;;Total ram usage:        4 bytes
  1523 ;; Hardware stack levels used:    1
  1524 ;; Hardware stack levels required when called:    4
  1525 ;; This function calls:
  1526 ;;		_LCD_Set_Cursor
  1527 ;;		_LCD_Write_Character
  1528 ;;		_LCD_Write_String
  1529 ;;		_display_Datum
  1530 ;;		_display_Uhrzeit
  1531 ;;		_uint_to_array
  1532 ;;		_uint_to_char
  1533 ;; This function is called by:
  1534 ;;		_main
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           
  1539                           ;psect for function _mostrarLCD
  1540  020E                     _mostrarLCD:	
  1541                           
  1542                           ;incstack = 0
  1543                           ; Regs used in _mostrarLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1544                           ;mostrarLCD@pantalla stored from wreg
  1545  020E  1283               	bcf	3,5	;RP0=0, select bank0
  1546  020F  1303               	bcf	3,6	;RP1=0, select bank0
  1547  0210  00B9               	movwf	mostrarLCD@pantalla
  1548                           
  1549                           ;main_Master.c: 216:     switch(pantalla){
  1550  0211  2B99               	goto	l3434
  1551  0212                     l3364:	
  1552                           
  1553                           ;main_Master.c: 218:             display_Uhrzeit(2,4);
  1554  0212  3004               	movlw	4
  1555  0213  00B7               	movwf	??_mostrarLCD
  1556  0214  0837               	movf	??_mostrarLCD,w
  1557  0215  00A8               	movwf	display_Uhrzeit@columna
  1558  0216  3002               	movlw	2
  1559  0217  120A  118A  248E  120A  118A  	fcall	_display_Uhrzeit
  1560                           
  1561                           ;main_Master.c: 219:             display_Datum(1,3);
  1562  021C  3003               	movlw	3
  1563  021D  1283               	bcf	3,5	;RP0=0, select bank0
  1564  021E  1303               	bcf	3,6	;RP1=0, select bank0
  1565  021F  00B7               	movwf	??_mostrarLCD
  1566  0220  0837               	movf	??_mostrarLCD,w
  1567  0221  00A8               	movwf	display_Datum@columna
  1568  0222  3001               	movlw	1
  1569  0223  120A  118A  23B6  120A  118A  	fcall	_display_Datum
  1570                           
  1571                           ;main_Master.c: 220:             LCD_Set_Cursor(2, 15);
  1572  0228  300F               	movlw	15
  1573  0229  1283               	bcf	3,5	;RP0=0, select bank0
  1574  022A  1303               	bcf	3,6	;RP1=0, select bank0
  1575  022B  00B7               	movwf	??_mostrarLCD
  1576  022C  0837               	movf	??_mostrarLCD,w
  1577  022D  00F5               	movwf	LCD_Set_Cursor@columna
  1578  022E  3002               	movlw	2
  1579  022F  120A  158A  2548   	fcall	_LCD_Set_Cursor
  1580                           
  1581                           ;main_Master.c: 221:             break;
  1582  0232  0008               	return
  1583  0233                     l3366:	
  1584                           
  1585                           ;main_Master.c: 223:             LCD_Set_Cursor(1,0);
  1586  0233  01F5               	clrf	LCD_Set_Cursor@columna
  1587  0234  3001               	movlw	1
  1588  0235  120A  158A  2548  120A  118A  	fcall	_LCD_Set_Cursor
  1589                           
  1590                           ;main_Master.c: 224:             LCD_Write_String("Ambiente:");
  1591  023A  304C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1592  023B  120A  158A  24A9  120A  118A  	fcall	_LCD_Write_String
  1593                           
  1594                           ;main_Master.c: 225:             uint8_t signo = temperatura & 0b10000000;
  1595  0240  1283               	bcf	3,5	;RP0=0, select bank0
  1596  0241  1303               	bcf	3,6	;RP1=0, select bank0
  1597  0242  0844               	movf	_temperatura,w
  1598  0243  3980               	andlw	128
  1599  0244  00B7               	movwf	??_mostrarLCD
  1600  0245  0837               	movf	??_mostrarLCD,w
  1601  0246  00BA               	movwf	mostrarLCD@signo
  1602                           
  1603                           ;main_Master.c: 226:             LCD_Set_Cursor(2,5);
  1604  0247  3005               	movlw	5
  1605  0248  00B7               	movwf	??_mostrarLCD
  1606  0249  0837               	movf	??_mostrarLCD,w
  1607  024A  00F5               	movwf	LCD_Set_Cursor@columna
  1608  024B  3002               	movlw	2
  1609  024C  120A  158A  2548  120A  118A  	fcall	_LCD_Set_Cursor
  1610                           
  1611                           ;main_Master.c: 227:             LCD_Write_Character(2);
  1612  0251  3002               	movlw	2
  1613  0252  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  1614                           
  1615                           ;main_Master.c: 228:             if (signo){
  1616  0257  1283               	bcf	3,5	;RP0=0, select bank0
  1617  0258  1303               	bcf	3,6	;RP1=0, select bank0
  1618  0259  083A               	movf	mostrarLCD@signo,w
  1619  025A  1903               	btfsc	3,2
  1620  025B  2A5E               	goto	l3378
  1621                           
  1622                           ;main_Master.c: 229:                 LCD_Write_Character('-');
  1623  025C  302D               	movlw	45
  1624  025D  2A5F               	goto	L1
  1625  025E                     l3378:	
  1626                           ;main_Master.c: 230:             }
  1627                           
  1628                           
  1629                           ;main_Master.c: 232:                 LCD_Write_Character(' ');
  1630  025E  3020               	movlw	32
  1631  025F                     L1:	
  1632  025F  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  1633                           
  1634                           ;main_Master.c: 234:             temp_array = uint_to_array(temperatura & 0b01111111);
  1635  0264  1283               	bcf	3,5	;RP0=0, select bank0
  1636  0265  1303               	bcf	3,6	;RP1=0, select bank0
  1637  0266  0844               	movf	_temperatura,w
  1638  0267  397F               	andlw	127
  1639  0268  120A  118A  260C  120A  118A  	fcall	_uint_to_array
  1640  026D  1283               	bcf	3,5	;RP0=0, select bank0
  1641  026E  1303               	bcf	3,6	;RP1=0, select bank0
  1642  026F  00B7               	movwf	??_mostrarLCD
  1643  0270  0837               	movf	??_mostrarLCD,w
  1644  0271  00C3               	movwf	_temp_array
  1645                           
  1646                           ;main_Master.c: 235:             LCD_Write_Character(uint_to_char(temp_array[1]));
  1647  0272  0843               	movf	_temp_array,w
  1648  0273  3E02               	addlw	2
  1649  0274  0084               	movwf	4
  1650  0275  1383               	bcf	3,7	;select IRP bank0
  1651  0276  0800               	movf	0,w
  1652  0277  120A  158A  279D  120A  118A  	fcall	_uint_to_char
  1653  027C  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  1654                           
  1655                           ;main_Master.c: 236:             LCD_Write_Character(uint_to_char(temp_array[2]));
  1656  0281  1283               	bcf	3,5	;RP0=0, select bank0
  1657  0282  1303               	bcf	3,6	;RP1=0, select bank0
  1658  0283  0843               	movf	_temp_array,w
  1659  0284  3E04               	addlw	4
  1660  0285  0084               	movwf	4
  1661  0286  1383               	bcf	3,7	;select IRP bank0
  1662  0287  0800               	movf	0,w
  1663  0288  120A  158A  279D  120A  118A  	fcall	_uint_to_char
  1664  028D  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  1665                           
  1666                           ;main_Master.c: 237:             LCD_Write_Character(223);
  1667  0292  30DF               	movlw	223
  1668  0293  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  1669                           
  1670                           ;main_Master.c: 238:             LCD_Write_Character('C');
  1671  0298  3043               	movlw	67
  1672  0299  120A  158A  2440   	fcall	_LCD_Write_Character
  1673                           
  1674                           ;main_Master.c: 239:             break;
  1675  029C  0008               	return
  1676  029D                     l3390:	
  1677                           
  1678                           ;main_Master.c: 241:             LCD_Set_Cursor(1,0);
  1679  029D  01F5               	clrf	LCD_Set_Cursor@columna
  1680  029E  3001               	movlw	1
  1681  029F  120A  158A  2548  120A  118A  	fcall	_LCD_Set_Cursor
  1682                           
  1683                           ;main_Master.c: 242:             LCD_Write_String("Temp. del Suelo:");
  1684  02A4  3021               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1685  02A5  120A  158A  24A9  120A  118A  	fcall	_LCD_Write_String
  1686                           
  1687                           ;main_Master.c: 243:             LCD_Set_Cursor(2,6);
  1688  02AA  3006               	movlw	6
  1689  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  1690  02AC  1303               	bcf	3,6	;RP1=0, select bank0
  1691  02AD  00B7               	movwf	??_mostrarLCD
  1692  02AE  0837               	movf	??_mostrarLCD,w
  1693  02AF  00F5               	movwf	LCD_Set_Cursor@columna
  1694  02B0  3002               	movlw	2
  1695  02B1  120A  158A  2548  120A  118A  	fcall	_LCD_Set_Cursor
  1696                           
  1697                           ;main_Master.c: 244:             LCD_Write_String("20");
  1698  02B6  3073               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1699  02B7  120A  158A  24A9  120A  118A  	fcall	_LCD_Write_String
  1700                           
  1701                           ;main_Master.c: 245:             LCD_Write_Character(223);
  1702  02BC  30DF               	movlw	223
  1703  02BD  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  1704                           
  1705                           ;main_Master.c: 246:             LCD_Write_Character('C');
  1706  02C2  3043               	movlw	67
  1707  02C3  120A  158A  2440   	fcall	_LCD_Write_Character
  1708                           
  1709                           ;main_Master.c: 247:             break;
  1710  02C6  0008               	return
  1711  02C7                     l3396:	
  1712                           
  1713                           ;main_Master.c: 249:             LCD_Set_Cursor(1,0);
  1714  02C7  01F5               	clrf	LCD_Set_Cursor@columna
  1715  02C8  3001               	movlw	1
  1716  02C9  120A  158A  2548  120A  118A  	fcall	_LCD_Set_Cursor
  1717                           
  1718                           ;main_Master.c: 250:             LCD_Write_String("Humedad:");
  1719  02CE  3056               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1720  02CF  120A  158A  24A9  120A  118A  	fcall	_LCD_Write_String
  1721                           
  1722                           ;main_Master.c: 251:             LCD_Set_Cursor(2,4);
  1723  02D4  3004               	movlw	4
  1724  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  1725  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  1726  02D7  00B7               	movwf	??_mostrarLCD
  1727  02D8  0837               	movf	??_mostrarLCD,w
  1728  02D9  00F5               	movwf	LCD_Set_Cursor@columna
  1729  02DA  3002               	movlw	2
  1730  02DB  120A  158A  2548  120A  118A  	fcall	_LCD_Set_Cursor
  1731                           
  1732                           ;main_Master.c: 252:             LCD_Write_Character(3);
  1733  02E0  3003               	movlw	3
  1734  02E1  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  1735                           
  1736                           ;main_Master.c: 253:             LCD_Write_Character(' ');
  1737  02E6  3020               	movlw	32
  1738  02E7  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  1739                           
  1740                           ;main_Master.c: 254:             LCD_Write_String("80");
  1741  02EC  3076               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1742  02ED  120A  158A  24A9  120A  118A  	fcall	_LCD_Write_String
  1743                           
  1744                           ;main_Master.c: 255:             LCD_Write_Character('%');
  1745  02F2  3025               	movlw	37
  1746  02F3  120A  158A  2440   	fcall	_LCD_Write_Character
  1747                           
  1748                           ;main_Master.c: 256:             break;
  1749  02F6  0008               	return
  1750  02F7                     l3404:	
  1751                           
  1752                           ;main_Master.c: 258:             LCD_Set_Cursor(1,0);
  1753  02F7  01F5               	clrf	LCD_Set_Cursor@columna
  1754  02F8  3001               	movlw	1
  1755  02F9  120A  158A  2548  120A  118A  	fcall	_LCD_Set_Cursor
  1756                           
  1757                           ;main_Master.c: 259:             LCD_Write_String("Atr");
  1758  02FE  306F               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1759  02FF  120A  158A  24A9  120A  118A  	fcall	_LCD_Write_String
  1760                           
  1761                           ;main_Master.c: 260:             LCD_Write_Character(0);
  1762  0304  3000               	movlw	0
  1763  0305  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  1764                           
  1765                           ;main_Master.c: 261:             LCD_Write_String("s: | Frente:");
  1766  030A  3032               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1767  030B  120A  158A  24A9  120A  118A  	fcall	_LCD_Write_String
  1768                           
  1769                           ;main_Master.c: 262:             LCD_Set_Cursor(2,2);
  1770  0310  3002               	movlw	2
  1771  0311  1283               	bcf	3,5	;RP0=0, select bank0
  1772  0312  1303               	bcf	3,6	;RP1=0, select bank0
  1773  0313  00B7               	movwf	??_mostrarLCD
  1774  0314  0837               	movf	??_mostrarLCD,w
  1775  0315  00F5               	movwf	LCD_Set_Cursor@columna
  1776  0316  3002               	movlw	2
  1777  0317  120A  158A  2548  120A  118A  	fcall	_LCD_Set_Cursor
  1778                           
  1779                           ;main_Master.c: 263:             LCD_Write_String("3");
  1780  031C  3079               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1781  031D  120A  158A  24A9  120A  118A  	fcall	_LCD_Write_String
  1782                           
  1783                           ;main_Master.c: 264:             LCD_Write_Character('m');
  1784  0322  306D               	movlw	109
  1785  0323  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  1786                           
  1787                           ;main_Master.c: 265:             LCD_Set_Cursor(2,7);
  1788  0328  3007               	movlw	7
  1789  0329  1283               	bcf	3,5	;RP0=0, select bank0
  1790  032A  1303               	bcf	3,6	;RP1=0, select bank0
  1791  032B  00B7               	movwf	??_mostrarLCD
  1792  032C  0837               	movf	??_mostrarLCD,w
  1793  032D  00F5               	movwf	LCD_Set_Cursor@columna
  1794  032E  3002               	movlw	2
  1795  032F  120A  158A  2548  120A  118A  	fcall	_LCD_Set_Cursor
  1796                           
  1797                           ;main_Master.c: 266:             LCD_Write_Character('|');
  1798  0334  307C               	movlw	124
  1799  0335  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  1800                           
  1801                           ;main_Master.c: 267:             LCD_Set_Cursor(2,11);
  1802  033A  300B               	movlw	11
  1803  033B  1283               	bcf	3,5	;RP0=0, select bank0
  1804  033C  1303               	bcf	3,6	;RP1=0, select bank0
  1805  033D  00B7               	movwf	??_mostrarLCD
  1806  033E  0837               	movf	??_mostrarLCD,w
  1807  033F  00F5               	movwf	LCD_Set_Cursor@columna
  1808  0340  3002               	movlw	2
  1809  0341  120A  158A  2548  120A  118A  	fcall	_LCD_Set_Cursor
  1810                           
  1811                           ;main_Master.c: 268:             LCD_Write_String("4");
  1812  0346  307B               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1813  0347  120A  158A  24A9  120A  118A  	fcall	_LCD_Write_String
  1814                           
  1815                           ;main_Master.c: 269:             LCD_Write_Character('m');
  1816  034C  306D               	movlw	109
  1817  034D  120A  158A  2440   	fcall	_LCD_Write_Character
  1818                           
  1819                           ;main_Master.c: 270:             break;
  1820  0350  0008               	return
  1821  0351                     l3420:	
  1822                           
  1823                           ;main_Master.c: 272:             LCD_Set_Cursor(1, 0);
  1824  0351  01F5               	clrf	LCD_Set_Cursor@columna
  1825  0352  3001               	movlw	1
  1826  0353  120A  158A  2548  120A  118A  	fcall	_LCD_Set_Cursor
  1827                           
  1828                           ;main_Master.c: 273:             LCD_Write_String("Tomar datos:");
  1829  0358  303F               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1830  0359  120A  158A  24A9  120A  118A  	fcall	_LCD_Write_String
  1831                           
  1832                           ;main_Master.c: 274:             LCD_Set_Cursor(2,0);
  1833  035E  01F5               	clrf	LCD_Set_Cursor@columna
  1834  035F  3002               	movlw	2
  1835  0360  120A  158A  2548  120A  118A  	fcall	_LCD_Set_Cursor
  1836                           
  1837                           ;main_Master.c: 275:             LCD_Write_Character(1);
  1838  0365  3001               	movlw	1
  1839  0366  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  1840                           
  1841                           ;main_Master.c: 276:             LCD_Set_Cursor(2,1);
  1842  036B  01F5               	clrf	LCD_Set_Cursor@columna
  1843  036C  0AF5               	incf	LCD_Set_Cursor@columna,f
  1844  036D  3002               	movlw	2
  1845  036E  120A  158A  2548  120A  118A  	fcall	_LCD_Set_Cursor
  1846                           
  1847                           ;main_Master.c: 277:             LCD_Write_String("10min");
  1848  0373  3065               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1849  0374  120A  158A  24A9  120A  118A  	fcall	_LCD_Write_String
  1850                           
  1851                           ;main_Master.c: 278:             LCD_Set_Cursor(2,8);
  1852  0379  3008               	movlw	8
  1853  037A  1283               	bcf	3,5	;RP0=0, select bank0
  1854  037B  1303               	bcf	3,6	;RP1=0, select bank0
  1855  037C  00B7               	movwf	??_mostrarLCD
  1856  037D  0837               	movf	??_mostrarLCD,w
  1857  037E  00F5               	movwf	LCD_Set_Cursor@columna
  1858  037F  3002               	movlw	2
  1859  0380  120A  158A  2548  120A  118A  	fcall	_LCD_Set_Cursor
  1860                           
  1861                           ;main_Master.c: 279:             LCD_Write_String("5x5");
  1862  0385  306B               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1863  0386  120A  158A  24A9   	fcall	_LCD_Write_String
  1864                           
  1865                           ;main_Master.c: 280:             break;
  1866  0389  0008               	return
  1867  038A                     l3432:	
  1868                           
  1869                           ;main_Master.c: 282:             LCD_Set_Cursor(1,9);
  1870  038A  3009               	movlw	9
  1871  038B  00B7               	movwf	??_mostrarLCD
  1872  038C  0837               	movf	??_mostrarLCD,w
  1873  038D  00F5               	movwf	LCD_Set_Cursor@columna
  1874  038E  3001               	movlw	1
  1875  038F  120A  158A  2548  120A  118A  	fcall	_LCD_Set_Cursor
  1876                           
  1877                           ;main_Master.c: 283:             LCD_Write_String("ERROR");
  1878  0394  305F               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  1879  0395  120A  158A  24A9   	fcall	_LCD_Write_String
  1880                           
  1881                           ;main_Master.c: 284:     }
  1882  0398  0008               	return
  1883  0399                     l3434:	
  1884  0399  0839               	movf	mostrarLCD@pantalla,w
  1885  039A  00B7               	movwf	??_mostrarLCD
  1886  039B  01B8               	clrf	??_mostrarLCD+1
  1887                           
  1888                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1889                           ; Switch size 1, requested type "simple"
  1890                           ; Number of cases is 1, Range of values is 0 to 0
  1891                           ; switch strategies available:
  1892                           ; Name         Instructions Cycles
  1893                           ; simple_byte            4     3 (average)
  1894                           ; direct_byte           11     8 (fixed)
  1895                           ; jumptable            260     6 (fixed)
  1896                           ;	Chosen strategy is simple_byte
  1897  039C  0838               	movf	??_mostrarLCD+1,w
  1898  039D  3A00               	xorlw	0	; case 0
  1899  039E  1903               	skipnz
  1900  039F  2BA1               	goto	l3876
  1901  03A0  2B8A               	goto	l3432
  1902  03A1                     l3876:	
  1903                           
  1904                           ; Switch size 1, requested type "simple"
  1905                           ; Number of cases is 6, Range of values is 0 to 5
  1906                           ; switch strategies available:
  1907                           ; Name         Instructions Cycles
  1908                           ; simple_byte           19    10 (average)
  1909                           ; direct_byte           26     8 (fixed)
  1910                           ; jumptable            260     6 (fixed)
  1911                           ;	Chosen strategy is simple_byte
  1912  03A1  0837               	movf	??_mostrarLCD,w
  1913  03A2  3A00               	xorlw	0	; case 0
  1914  03A3  1903               	skipnz
  1915  03A4  2A12               	goto	l3364
  1916  03A5  3A01               	xorlw	1	; case 1
  1917  03A6  1903               	skipnz
  1918  03A7  2A33               	goto	l3366
  1919  03A8  3A03               	xorlw	3	; case 2
  1920  03A9  1903               	skipnz
  1921  03AA  2A9D               	goto	l3390
  1922  03AB  3A01               	xorlw	1	; case 3
  1923  03AC  1903               	skipnz
  1924  03AD  2AC7               	goto	l3396
  1925  03AE  3A07               	xorlw	7	; case 4
  1926  03AF  1903               	skipnz
  1927  03B0  2AF7               	goto	l3404
  1928  03B1  3A01               	xorlw	1	; case 5
  1929  03B2  1903               	skipnz
  1930  03B3  2B51               	goto	l3420
  1931  03B4  2B8A               	goto	l3432
  1932  03B5  0008               	return
  1933  03B6                     __end_of_mostrarLCD:	
  1934                           
  1935                           	psect	text4
  1936  0F9D                     __ptext4:	
  1937 ;; *************** function _uint_to_char *****************
  1938 ;; Defined at:
  1939 ;;		line 124 in file "LCD_8bits.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;  numero          1    wreg     unsigned char 
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;  numero          1    4[COMMON] unsigned char 
  1944 ;;  numChr          1    5[COMMON] unsigned char 
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  1    wreg      unsigned char 
  1947 ;; Registers used:
  1948 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1954 ;;      Params:         0       0       0       0       0
  1955 ;;      Locals:         2       0       0       0       0
  1956 ;;      Temps:          2       0       0       0       0
  1957 ;;      Totals:         4       0       0       0       0
  1958 ;;Total ram usage:        4 bytes
  1959 ;; Hardware stack levels used:    1
  1960 ;; Hardware stack levels required when called:    1
  1961 ;; This function calls:
  1962 ;;		Nothing
  1963 ;; This function is called by:
  1964 ;;		_mostrarLCD
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           
  1969                           ;psect for function _uint_to_char
  1970  0F9D                     _uint_to_char:	
  1971                           
  1972                           ;incstack = 0
  1973                           ; Regs used in _uint_to_char: [wreg-fsr0h+status,2+status,0]
  1974                           ;uint_to_char@numero stored from wreg
  1975  0F9D  00F4               	movwf	uint_to_char@numero
  1976                           
  1977                           ;LCD_8bits.c: 126:     switch (numero){
  1978  0F9E  2FC4               	goto	l2470
  1979  0F9F                     l2436:	
  1980                           
  1981                           ;LCD_8bits.c: 128:             numChr = 48;
  1982  0F9F  3030               	movlw	48
  1983  0FA0  2FC0               	goto	L17
  1984  0FA1                     l2438:	
  1985                           ;LCD_8bits.c: 129:             break;
  1986                           
  1987                           
  1988                           ;LCD_8bits.c: 131:             numChr = 49;
  1989  0FA1  3031               	movlw	49
  1990  0FA2  2FC0               	goto	L17
  1991  0FA3                     l2440:	
  1992                           ;LCD_8bits.c: 132:             break;
  1993                           
  1994                           
  1995                           ;LCD_8bits.c: 134:             numChr = 50;
  1996  0FA3  3032               	movlw	50
  1997  0FA4  2FC0               	goto	L17
  1998  0FA5                     l2442:	
  1999                           ;LCD_8bits.c: 135:             break;
  2000                           
  2001                           
  2002                           ;LCD_8bits.c: 137:             numChr = 51;
  2003  0FA5  3033               	movlw	51
  2004  0FA6  2FC0               	goto	L17
  2005  0FA7                     l2444:	
  2006                           ;LCD_8bits.c: 138:             break;
  2007                           
  2008                           
  2009                           ;LCD_8bits.c: 140:             numChr = 52;
  2010  0FA7  3034               	movlw	52
  2011  0FA8  2FC0               	goto	L17
  2012  0FA9                     l2446:	
  2013                           ;LCD_8bits.c: 141:             break;
  2014                           
  2015                           
  2016                           ;LCD_8bits.c: 143:             numChr = 53;
  2017  0FA9  3035               	movlw	53
  2018  0FAA  2FC0               	goto	L17
  2019  0FAB                     l2448:	
  2020                           ;LCD_8bits.c: 144:             break;
  2021                           
  2022                           
  2023                           ;LCD_8bits.c: 146:             numChr = 54;
  2024  0FAB  3036               	movlw	54
  2025  0FAC  2FC0               	goto	L17
  2026  0FAD                     l2450:	
  2027                           ;LCD_8bits.c: 147:             break;
  2028                           
  2029                           
  2030                           ;LCD_8bits.c: 149:             numChr = 55;
  2031  0FAD  3037               	movlw	55
  2032  0FAE  2FC0               	goto	L17
  2033  0FAF                     l2452:	
  2034                           ;LCD_8bits.c: 150:             break;
  2035                           
  2036                           
  2037                           ;LCD_8bits.c: 152:             numChr = 56;
  2038  0FAF  3038               	movlw	56
  2039  0FB0  2FC0               	goto	L17
  2040  0FB1                     l2454:	
  2041                           ;LCD_8bits.c: 153:             break;
  2042                           
  2043                           
  2044                           ;LCD_8bits.c: 155:             numChr = 57;
  2045  0FB1  3039               	movlw	57
  2046  0FB2  2FC0               	goto	L17
  2047  0FB3                     l2456:	
  2048                           ;LCD_8bits.c: 156:             break;
  2049                           
  2050                           
  2051                           ;LCD_8bits.c: 158:             numChr = 65;
  2052  0FB3  3041               	movlw	65
  2053  0FB4  2FC0               	goto	L17
  2054  0FB5                     l2458:	
  2055                           ;LCD_8bits.c: 159:             break;
  2056                           
  2057                           
  2058                           ;LCD_8bits.c: 161:             numChr = 66;
  2059  0FB5  3042               	movlw	66
  2060  0FB6  2FC0               	goto	L17
  2061  0FB7                     l2460:	
  2062                           ;LCD_8bits.c: 162:             break;
  2063                           
  2064                           
  2065                           ;LCD_8bits.c: 164:             numChr = 67;
  2066  0FB7  3043               	movlw	67
  2067  0FB8  2FC0               	goto	L17
  2068  0FB9                     l2462:	
  2069                           ;LCD_8bits.c: 165:             break;
  2070                           
  2071                           
  2072                           ;LCD_8bits.c: 167:             numChr = 68;
  2073  0FB9  3044               	movlw	68
  2074  0FBA  2FC0               	goto	L17
  2075  0FBB                     l2464:	
  2076                           ;LCD_8bits.c: 168:             break;
  2077                           
  2078                           
  2079                           ;LCD_8bits.c: 170:             numChr = 69;
  2080  0FBB  3045               	movlw	69
  2081  0FBC  2FC0               	goto	L17
  2082  0FBD                     l2466:	
  2083                           ;LCD_8bits.c: 171:             break;
  2084                           
  2085                           
  2086                           ;LCD_8bits.c: 173:             numChr = 70;
  2087  0FBD  3046               	movlw	70
  2088  0FBE  2FC0               	goto	L17
  2089  0FBF                     l2468:	
  2090                           ;LCD_8bits.c: 174:             break;
  2091                           
  2092                           
  2093                           ;LCD_8bits.c: 176:             numChr = 214;
  2094  0FBF  30D6               	movlw	214
  2095  0FC0                     L17:	
  2096  0FC0  00F2               	movwf	??_uint_to_char
  2097  0FC1  0872               	movf	??_uint_to_char,w
  2098  0FC2  00F5               	movwf	uint_to_char@numChr
  2099                           
  2100                           ;LCD_8bits.c: 177:     }
  2101  0FC3  2FFE               	goto	l2472
  2102  0FC4                     l2470:	
  2103  0FC4  0874               	movf	uint_to_char@numero,w
  2104  0FC5  00F2               	movwf	??_uint_to_char
  2105  0FC6  01F3               	clrf	??_uint_to_char+1
  2106                           
  2107                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2108                           ; Switch size 1, requested type "simple"
  2109                           ; Number of cases is 1, Range of values is 0 to 0
  2110                           ; switch strategies available:
  2111                           ; Name         Instructions Cycles
  2112                           ; simple_byte            4     3 (average)
  2113                           ; direct_byte           11     8 (fixed)
  2114                           ; jumptable            260     6 (fixed)
  2115                           ;	Chosen strategy is simple_byte
  2116  0FC7  0873               	movf	??_uint_to_char+1,w
  2117  0FC8  3A00               	xorlw	0	; case 0
  2118  0FC9  1903               	skipnz
  2119  0FCA  2FCC               	goto	l3878
  2120  0FCB  2FBF               	goto	l2468
  2121  0FCC                     l3878:	
  2122                           
  2123                           ; Switch size 1, requested type "simple"
  2124                           ; Number of cases is 16, Range of values is 0 to 15
  2125                           ; switch strategies available:
  2126                           ; Name         Instructions Cycles
  2127                           ; simple_byte           49    25 (average)
  2128                           ; direct_byte           56     8 (fixed)
  2129                           ; jumptable            260     6 (fixed)
  2130                           ;	Chosen strategy is simple_byte
  2131  0FCC  0872               	movf	??_uint_to_char,w
  2132  0FCD  3A00               	xorlw	0	; case 0
  2133  0FCE  1903               	skipnz
  2134  0FCF  2F9F               	goto	l2436
  2135  0FD0  3A01               	xorlw	1	; case 1
  2136  0FD1  1903               	skipnz
  2137  0FD2  2FA1               	goto	l2438
  2138  0FD3  3A03               	xorlw	3	; case 2
  2139  0FD4  1903               	skipnz
  2140  0FD5  2FA3               	goto	l2440
  2141  0FD6  3A01               	xorlw	1	; case 3
  2142  0FD7  1903               	skipnz
  2143  0FD8  2FA5               	goto	l2442
  2144  0FD9  3A07               	xorlw	7	; case 4
  2145  0FDA  1903               	skipnz
  2146  0FDB  2FA7               	goto	l2444
  2147  0FDC  3A01               	xorlw	1	; case 5
  2148  0FDD  1903               	skipnz
  2149  0FDE  2FA9               	goto	l2446
  2150  0FDF  3A03               	xorlw	3	; case 6
  2151  0FE0  1903               	skipnz
  2152  0FE1  2FAB               	goto	l2448
  2153  0FE2  3A01               	xorlw	1	; case 7
  2154  0FE3  1903               	skipnz
  2155  0FE4  2FAD               	goto	l2450
  2156  0FE5  3A0F               	xorlw	15	; case 8
  2157  0FE6  1903               	skipnz
  2158  0FE7  2FAF               	goto	l2452
  2159  0FE8  3A01               	xorlw	1	; case 9
  2160  0FE9  1903               	skipnz
  2161  0FEA  2FB1               	goto	l2454
  2162  0FEB  3A03               	xorlw	3	; case 10
  2163  0FEC  1903               	skipnz
  2164  0FED  2FB3               	goto	l2456
  2165  0FEE  3A01               	xorlw	1	; case 11
  2166  0FEF  1903               	skipnz
  2167  0FF0  2FB5               	goto	l2458
  2168  0FF1  3A07               	xorlw	7	; case 12
  2169  0FF2  1903               	skipnz
  2170  0FF3  2FB7               	goto	l2460
  2171  0FF4  3A01               	xorlw	1	; case 13
  2172  0FF5  1903               	skipnz
  2173  0FF6  2FB9               	goto	l2462
  2174  0FF7  3A03               	xorlw	3	; case 14
  2175  0FF8  1903               	skipnz
  2176  0FF9  2FBB               	goto	l2464
  2177  0FFA  3A01               	xorlw	1	; case 15
  2178  0FFB  1903               	skipnz
  2179  0FFC  2FBD               	goto	l2466
  2180  0FFD  2FBF               	goto	l2468
  2181  0FFE                     l2472:	
  2182                           
  2183                           ;LCD_8bits.c: 178:     return(numChr);
  2184  0FFE  0875               	movf	uint_to_char@numChr,w
  2185  0FFF  0008               	return
  2186  1000                     __end_of_uint_to_char:	
  2187                           
  2188                           	psect	text5
  2189  060C                     __ptext5:	
  2190 ;; *************** function _uint_to_array *****************
  2191 ;; Defined at:
  2192 ;;		line 181 in file "LCD_8bits.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;  numero          1    wreg     unsigned char 
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;  numero          1   22[BANK0 ] unsigned char 
  2197 ;;  resultado       6   15[BANK0 ] unsigned int [3]
  2198 ;;  centenas        1   21[BANK0 ] unsigned char 
  2199 ;;  decenas         1   14[BANK0 ] unsigned char 
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  1    wreg      PTR unsigned int 
  2202 ;; Registers used:
  2203 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2209 ;;      Params:         0       0       0       0       0
  2210 ;;      Locals:         0       9       0       0       0
  2211 ;;      Temps:          0       6       0       0       0
  2212 ;;      Totals:         0      15       0       0       0
  2213 ;;Total ram usage:       15 bytes
  2214 ;; Hardware stack levels used:    1
  2215 ;; Hardware stack levels required when called:    2
  2216 ;; This function calls:
  2217 ;;		___awdiv
  2218 ;;		___wmul
  2219 ;; This function is called by:
  2220 ;;		_mostrarLCD
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           
  2225                           ;psect for function _uint_to_array
  2226  060C                     _uint_to_array:	
  2227                           
  2228                           ;incstack = 0
  2229                           ; Regs used in _uint_to_array: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2230                           ;uint_to_array@numero stored from wreg
  2231  060C  1283               	bcf	3,5	;RP0=0, select bank0
  2232  060D  1303               	bcf	3,6	;RP1=0, select bank0
  2233  060E  00B6               	movwf	uint_to_array@numero
  2234                           
  2235                           ;LCD_8bits.c: 182:     uint16_t resultado[3] = {0,0,0};
  2236  060F  302F               	movlw	uint_to_array@resultado& (0+255)
  2237  0610  0084               	movwf	4
  2238  0611  3006               	movlw	6
  2239  0612  00FF               	movwf	127
  2240  0613                     u1380:	
  2241  0613  1383               	bcf	3,7	;select IRP bank0
  2242  0614  0180               	clrf	0
  2243  0615  0A84               	incf	4,f
  2244  0616  0BFF               	decfsz	127,f
  2245  0617  2E13               	goto	u1380
  2246                           
  2247                           ;LCD_8bits.c: 183:     resultado[0] = numero/100;
  2248  0618  3064               	movlw	100
  2249  0619  00A0               	movwf	___awdiv@divisor
  2250  061A  3000               	movlw	0
  2251  061B  00A1               	movwf	___awdiv@divisor+1
  2252  061C  0836               	movf	uint_to_array@numero,w
  2253  061D  00A8               	movwf	??_uint_to_array
  2254  061E  01A9               	clrf	??_uint_to_array+1
  2255  061F  0828               	movf	??_uint_to_array,w
  2256  0620  00A2               	movwf	___awdiv@dividend
  2257  0621  0829               	movf	??_uint_to_array+1,w
  2258  0622  00A3               	movwf	___awdiv@dividend+1
  2259  0623  120A  158A  26E2  120A  118A  	fcall	___awdiv
  2260  0628  1283               	bcf	3,5	;RP0=0, select bank0
  2261  0629  1303               	bcf	3,6	;RP1=0, select bank0
  2262  062A  0821               	movf	?___awdiv+1,w
  2263  062B  00B0               	movwf	uint_to_array@resultado+1
  2264  062C  0820               	movf	?___awdiv,w
  2265  062D  00AF               	movwf	uint_to_array@resultado
  2266                           
  2267                           ;LCD_8bits.c: 184:     uint8_t centenas = resultado[0];
  2268  062E  082F               	movf	uint_to_array@resultado,w
  2269  062F  00A8               	movwf	??_uint_to_array
  2270  0630  0828               	movf	??_uint_to_array,w
  2271  0631  00B5               	movwf	uint_to_array@centenas
  2272                           
  2273                           ;LCD_8bits.c: 185:     resultado[1] = (numero - (centenas *100))/10;
  2274  0632  300A               	movlw	10
  2275  0633  00A0               	movwf	___awdiv@divisor
  2276  0634  3000               	movlw	0
  2277  0635  00A1               	movwf	___awdiv@divisor+1
  2278  0636  0835               	movf	uint_to_array@centenas,w
  2279  0637  00A8               	movwf	??_uint_to_array
  2280  0638  01A9               	clrf	??_uint_to_array+1
  2281  0639  0828               	movf	??_uint_to_array,w
  2282  063A  00F2               	movwf	___wmul@multiplier
  2283  063B  0829               	movf	??_uint_to_array+1,w
  2284  063C  00F3               	movwf	___wmul@multiplier+1
  2285  063D  309C               	movlw	156
  2286  063E  00F4               	movwf	___wmul@multiplicand
  2287  063F  30FF               	movlw	255
  2288  0640  00F5               	movwf	___wmul@multiplicand+1
  2289  0641  120A  158A  2488  120A  118A  	fcall	___wmul
  2290  0646  1283               	bcf	3,5	;RP0=0, select bank0
  2291  0647  1303               	bcf	3,6	;RP1=0, select bank0
  2292  0648  0836               	movf	uint_to_array@numero,w
  2293  0649  0772               	addwf	?___wmul,w
  2294  064A  00A2               	movwf	___awdiv@dividend
  2295  064B  0873               	movf	?___wmul+1,w
  2296  064C  1803               	skipnc
  2297  064D  0A73               	incf	?___wmul+1,w
  2298  064E  00A3               	movwf	___awdiv@dividend+1
  2299  064F  120A  158A  26E2  120A  118A  	fcall	___awdiv
  2300  0654  1283               	bcf	3,5	;RP0=0, select bank0
  2301  0655  1303               	bcf	3,6	;RP1=0, select bank0
  2302  0656  0821               	movf	?___awdiv+1,w
  2303  0657  00B2               	movwf	uint_to_array@resultado+3
  2304  0658  0820               	movf	?___awdiv,w
  2305  0659  00B1               	movwf	uint_to_array@resultado+2
  2306                           
  2307                           ;LCD_8bits.c: 186:     uint8_t decenas = resultado[1];
  2308  065A  0831               	movf	uint_to_array@resultado+2,w
  2309  065B  00A8               	movwf	??_uint_to_array
  2310  065C  0828               	movf	??_uint_to_array,w
  2311  065D  00AE               	movwf	uint_to_array@decenas
  2312                           
  2313                           ;LCD_8bits.c: 187:     resultado[2] = numero -(centenas*100+decenas*10);
  2314  065E  0835               	movf	uint_to_array@centenas,w
  2315  065F  00A8               	movwf	??_uint_to_array
  2316  0660  01A9               	clrf	??_uint_to_array+1
  2317  0661  0828               	movf	??_uint_to_array,w
  2318  0662  00F2               	movwf	___wmul@multiplier
  2319  0663  0829               	movf	??_uint_to_array+1,w
  2320  0664  00F3               	movwf	___wmul@multiplier+1
  2321  0665  309C               	movlw	156
  2322  0666  00F4               	movwf	___wmul@multiplicand
  2323  0667  30FF               	movlw	255
  2324  0668  00F5               	movwf	___wmul@multiplicand+1
  2325  0669  120A  158A  2488  120A  118A  	fcall	___wmul
  2326  066E  1283               	bcf	3,5	;RP0=0, select bank0
  2327  066F  1303               	bcf	3,6	;RP1=0, select bank0
  2328  0670  0836               	movf	uint_to_array@numero,w
  2329  0671  0772               	addwf	?___wmul,w
  2330  0672  00AA               	movwf	??_uint_to_array+2
  2331  0673  0873               	movf	?___wmul+1,w
  2332  0674  1803               	skipnc
  2333  0675  0A73               	incf	?___wmul+1,w
  2334  0676  00AB               	movwf	??_uint_to_array+3
  2335  0677  082E               	movf	uint_to_array@decenas,w
  2336  0678  00AC               	movwf	??_uint_to_array+4
  2337  0679  01AD               	clrf	??_uint_to_array+5
  2338  067A  082C               	movf	??_uint_to_array+4,w
  2339  067B  00F2               	movwf	___wmul@multiplier
  2340  067C  082D               	movf	??_uint_to_array+5,w
  2341  067D  00F3               	movwf	___wmul@multiplier+1
  2342  067E  30F6               	movlw	246
  2343  067F  00F4               	movwf	___wmul@multiplicand
  2344  0680  30FF               	movlw	255
  2345  0681  00F5               	movwf	___wmul@multiplicand+1
  2346  0682  120A  158A  2488   	fcall	___wmul
  2347  0685  0872               	movf	?___wmul,w
  2348  0686  1283               	bcf	3,5	;RP0=0, select bank0
  2349  0687  1303               	bcf	3,6	;RP1=0, select bank0
  2350  0688  072A               	addwf	??_uint_to_array+2,w
  2351  0689  00B3               	movwf	uint_to_array@resultado+4
  2352  068A  0873               	movf	?___wmul+1,w
  2353  068B  1803               	skipnc
  2354  068C  0A73               	incf	?___wmul+1,w
  2355  068D  072B               	addwf	??_uint_to_array+3,w
  2356  068E  00B4               	movwf	uint_to_array@resultado+5
  2357                           
  2358                           ;LCD_8bits.c: 188:     return(resultado);
  2359  068F  302F               	movlw	(low (uint_to_array@resultado| 0))& (0+255)
  2360  0690  0008               	return
  2361  0691                     __end_of_uint_to_array:	
  2362                           
  2363                           	psect	text6
  2364  0C88                     __ptext6:	
  2365 ;; *************** function ___wmul *****************
  2366 ;; Defined at:
  2367 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  2368 ;; Parameters:    Size  Location     Type
  2369 ;;  multiplier      2    2[COMMON] unsigned int 
  2370 ;;  multiplicand    2    4[COMMON] unsigned int 
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;  product         2    6[COMMON] unsigned int 
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  2    2[COMMON] unsigned int 
  2375 ;; Registers used:
  2376 ;;		wreg, status,2, status,0
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2382 ;;      Params:         4       0       0       0       0
  2383 ;;      Locals:         2       0       0       0       0
  2384 ;;      Temps:          0       0       0       0       0
  2385 ;;      Totals:         6       0       0       0       0
  2386 ;;Total ram usage:        6 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    1
  2389 ;; This function calls:
  2390 ;;		Nothing
  2391 ;; This function is called by:
  2392 ;;		_uint_to_array
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           
  2397                           ;psect for function ___wmul
  2398  0C88                     ___wmul:	
  2399                           
  2400                           ;incstack = 0
  2401                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2402  0C88  01F6               	clrf	___wmul@product
  2403  0C89  01F7               	clrf	___wmul@product+1
  2404  0C8A                     l2102:	
  2405  0C8A  1C72               	btfss	___wmul@multiplier,0
  2406  0C8B  2C92               	goto	l426
  2407  0C8C  0874               	movf	___wmul@multiplicand,w
  2408  0C8D  07F6               	addwf	___wmul@product,f
  2409  0C8E  1803               	skipnc
  2410  0C8F  0AF7               	incf	___wmul@product+1,f
  2411  0C90  0875               	movf	___wmul@multiplicand+1,w
  2412  0C91  07F7               	addwf	___wmul@product+1,f
  2413  0C92                     l426:	
  2414  0C92  3001               	movlw	1
  2415  0C93                     u655:	
  2416  0C93  1003               	clrc
  2417  0C94  0DF4               	rlf	___wmul@multiplicand,f
  2418  0C95  0DF5               	rlf	___wmul@multiplicand+1,f
  2419  0C96  3EFF               	addlw	-1
  2420  0C97  1D03               	skipz
  2421  0C98  2C93               	goto	u655
  2422  0C99  3001               	movlw	1
  2423  0C9A                     u665:	
  2424  0C9A  1003               	clrc
  2425  0C9B  0CF3               	rrf	___wmul@multiplier+1,f
  2426  0C9C  0CF2               	rrf	___wmul@multiplier,f
  2427  0C9D  3EFF               	addlw	-1
  2428  0C9E  1D03               	skipz
  2429  0C9F  2C9A               	goto	u665
  2430  0CA0  0872               	movf	___wmul@multiplier,w
  2431  0CA1  0473               	iorwf	___wmul@multiplier+1,w
  2432  0CA2  1D03               	btfss	3,2
  2433  0CA3  2C8A               	goto	l2102
  2434  0CA4  0877               	movf	___wmul@product+1,w
  2435  0CA5  00F3               	movwf	?___wmul+1
  2436  0CA6  0876               	movf	___wmul@product,w
  2437  0CA7  00F2               	movwf	?___wmul
  2438  0CA8  0008               	return
  2439  0CA9                     __end_of___wmul:	
  2440                           
  2441                           	psect	text7
  2442  048E                     __ptext7:	
  2443 ;; *************** function _display_Uhrzeit *****************
  2444 ;; Defined at:
  2445 ;;		line 174 in file "main_Master.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;  fila            1    wreg     unsigned char 
  2448 ;;  columna         1    8[BANK0 ] unsigned char 
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;  fila            1   12[BANK0 ] unsigned char 
  2451 ;;  Uhr_d           1   18[BANK0 ] unsigned char 
  2452 ;;  Uhr_u           1   17[BANK0 ] unsigned char 
  2453 ;;  min_d           1   16[BANK0 ] unsigned char 
  2454 ;;  min_u           1   15[BANK0 ] unsigned char 
  2455 ;;  seg_d           1   14[BANK0 ] unsigned char 
  2456 ;;  seg_u           1   13[BANK0 ] unsigned char 
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  1    wreg      void 
  2459 ;; Registers used:
  2460 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2461 ;; Tracked objects:
  2462 ;;		On entry : 0/0
  2463 ;;		On exit  : 0/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2466 ;;      Params:         0       1       0       0       0
  2467 ;;      Locals:         0       7       0       0       0
  2468 ;;      Temps:          0       3       0       0       0
  2469 ;;      Totals:         0      11       0       0       0
  2470 ;;Total ram usage:       11 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; Hardware stack levels required when called:    3
  2473 ;; This function calls:
  2474 ;;		_LCD_Set_Cursor
  2475 ;;		_LCD_Write_Character
  2476 ;;		___awdiv
  2477 ;;		___awmod
  2478 ;; This function is called by:
  2479 ;;		_mostrarLCD
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           
  2484                           ;psect for function _display_Uhrzeit
  2485  048E                     _display_Uhrzeit:	
  2486                           
  2487                           ;incstack = 0
  2488                           ; Regs used in _display_Uhrzeit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2489                           ;display_Uhrzeit@fila stored from wreg
  2490  048E  1283               	bcf	3,5	;RP0=0, select bank0
  2491  048F  1303               	bcf	3,6	;RP1=0, select bank0
  2492  0490  00AC               	movwf	display_Uhrzeit@fila
  2493                           
  2494                           ;main_Master.c: 175:     char seg_u = seg%10;
  2495  0491  300A               	movlw	10
  2496  0492  00F2               	movwf	___awmod@divisor
  2497  0493  3000               	movlw	0
  2498  0494  00F3               	movwf	___awmod@divisor+1
  2499  0495  0845               	movf	_seg,w
  2500  0496  00A9               	movwf	??_display_Uhrzeit
  2501  0497  01AA               	clrf	??_display_Uhrzeit+1
  2502  0498  0829               	movf	??_display_Uhrzeit,w
  2503  0499  00F4               	movwf	___awmod@dividend
  2504  049A  082A               	movf	??_display_Uhrzeit+1,w
  2505  049B  00F5               	movwf	___awmod@dividend+1
  2506  049C  120A  158A  2697  120A  118A  	fcall	___awmod
  2507  04A1  0872               	movf	?___awmod,w
  2508  04A2  1283               	bcf	3,5	;RP0=0, select bank0
  2509  04A3  1303               	bcf	3,6	;RP1=0, select bank0
  2510  04A4  00AB               	movwf	??_display_Uhrzeit+2
  2511  04A5  082B               	movf	??_display_Uhrzeit+2,w
  2512  04A6  00AD               	movwf	display_Uhrzeit@seg_u
  2513                           
  2514                           ;main_Master.c: 176:     char seg_d = seg/10;
  2515  04A7  300A               	movlw	10
  2516  04A8  00A0               	movwf	___awdiv@divisor
  2517  04A9  3000               	movlw	0
  2518  04AA  00A1               	movwf	___awdiv@divisor+1
  2519  04AB  0845               	movf	_seg,w
  2520  04AC  00A9               	movwf	??_display_Uhrzeit
  2521  04AD  01AA               	clrf	??_display_Uhrzeit+1
  2522  04AE  0829               	movf	??_display_Uhrzeit,w
  2523  04AF  00A2               	movwf	___awdiv@dividend
  2524  04B0  082A               	movf	??_display_Uhrzeit+1,w
  2525  04B1  00A3               	movwf	___awdiv@dividend+1
  2526  04B2  120A  158A  26E2  120A  118A  	fcall	___awdiv
  2527  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  2528  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  2529  04B9  0820               	movf	?___awdiv,w
  2530  04BA  00AB               	movwf	??_display_Uhrzeit+2
  2531  04BB  082B               	movf	??_display_Uhrzeit+2,w
  2532  04BC  00AE               	movwf	display_Uhrzeit@seg_d
  2533                           
  2534                           ;main_Master.c: 177:     char min_u = min%10;
  2535  04BD  300A               	movlw	10
  2536  04BE  00F2               	movwf	___awmod@divisor
  2537  04BF  3000               	movlw	0
  2538  04C0  00F3               	movwf	___awmod@divisor+1
  2539  04C1  084C               	movf	_min,w
  2540  04C2  00A9               	movwf	??_display_Uhrzeit
  2541  04C3  01AA               	clrf	??_display_Uhrzeit+1
  2542  04C4  0829               	movf	??_display_Uhrzeit,w
  2543  04C5  00F4               	movwf	___awmod@dividend
  2544  04C6  082A               	movf	??_display_Uhrzeit+1,w
  2545  04C7  00F5               	movwf	___awmod@dividend+1
  2546  04C8  120A  158A  2697  120A  118A  	fcall	___awmod
  2547  04CD  0872               	movf	?___awmod,w
  2548  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  2549  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  2550  04D0  00AB               	movwf	??_display_Uhrzeit+2
  2551  04D1  082B               	movf	??_display_Uhrzeit+2,w
  2552  04D2  00AF               	movwf	display_Uhrzeit@min_u
  2553                           
  2554                           ;main_Master.c: 178:     char min_d = min/10;
  2555  04D3  300A               	movlw	10
  2556  04D4  00A0               	movwf	___awdiv@divisor
  2557  04D5  3000               	movlw	0
  2558  04D6  00A1               	movwf	___awdiv@divisor+1
  2559  04D7  084C               	movf	_min,w
  2560  04D8  00A9               	movwf	??_display_Uhrzeit
  2561  04D9  01AA               	clrf	??_display_Uhrzeit+1
  2562  04DA  0829               	movf	??_display_Uhrzeit,w
  2563  04DB  00A2               	movwf	___awdiv@dividend
  2564  04DC  082A               	movf	??_display_Uhrzeit+1,w
  2565  04DD  00A3               	movwf	___awdiv@dividend+1
  2566  04DE  120A  158A  26E2  120A  118A  	fcall	___awdiv
  2567  04E3  1283               	bcf	3,5	;RP0=0, select bank0
  2568  04E4  1303               	bcf	3,6	;RP1=0, select bank0
  2569  04E5  0820               	movf	?___awdiv,w
  2570  04E6  00AB               	movwf	??_display_Uhrzeit+2
  2571  04E7  082B               	movf	??_display_Uhrzeit+2,w
  2572  04E8  00B0               	movwf	display_Uhrzeit@min_d
  2573                           
  2574                           ;main_Master.c: 179:     char Uhr_u = hora%10;
  2575  04E9  300A               	movlw	10
  2576  04EA  00F2               	movwf	___awmod@divisor
  2577  04EB  3000               	movlw	0
  2578  04EC  00F3               	movwf	___awmod@divisor+1
  2579  04ED  084B               	movf	_hora,w
  2580  04EE  00A9               	movwf	??_display_Uhrzeit
  2581  04EF  01AA               	clrf	??_display_Uhrzeit+1
  2582  04F0  0829               	movf	??_display_Uhrzeit,w
  2583  04F1  00F4               	movwf	___awmod@dividend
  2584  04F2  082A               	movf	??_display_Uhrzeit+1,w
  2585  04F3  00F5               	movwf	___awmod@dividend+1
  2586  04F4  120A  158A  2697  120A  118A  	fcall	___awmod
  2587  04F9  0872               	movf	?___awmod,w
  2588  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  2589  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  2590  04FC  00AB               	movwf	??_display_Uhrzeit+2
  2591  04FD  082B               	movf	??_display_Uhrzeit+2,w
  2592  04FE  00B1               	movwf	display_Uhrzeit@Uhr_u
  2593                           
  2594                           ;main_Master.c: 180:     char Uhr_d = hora/10;
  2595  04FF  300A               	movlw	10
  2596  0500  00A0               	movwf	___awdiv@divisor
  2597  0501  3000               	movlw	0
  2598  0502  00A1               	movwf	___awdiv@divisor+1
  2599  0503  084B               	movf	_hora,w
  2600  0504  00A9               	movwf	??_display_Uhrzeit
  2601  0505  01AA               	clrf	??_display_Uhrzeit+1
  2602  0506  0829               	movf	??_display_Uhrzeit,w
  2603  0507  00A2               	movwf	___awdiv@dividend
  2604  0508  082A               	movf	??_display_Uhrzeit+1,w
  2605  0509  00A3               	movwf	___awdiv@dividend+1
  2606  050A  120A  158A  26E2  120A  118A  	fcall	___awdiv
  2607  050F  1283               	bcf	3,5	;RP0=0, select bank0
  2608  0510  1303               	bcf	3,6	;RP1=0, select bank0
  2609  0511  0820               	movf	?___awdiv,w
  2610  0512  00AB               	movwf	??_display_Uhrzeit+2
  2611  0513  082B               	movf	??_display_Uhrzeit+2,w
  2612  0514  00B2               	movwf	display_Uhrzeit@Uhr_d
  2613                           
  2614                           ;main_Master.c: 182:     LCD_Set_Cursor(fila, columna);
  2615  0515  0828               	movf	display_Uhrzeit@columna,w
  2616  0516  00A9               	movwf	??_display_Uhrzeit
  2617  0517  0829               	movf	??_display_Uhrzeit,w
  2618  0518  00F5               	movwf	LCD_Set_Cursor@columna
  2619  0519  082C               	movf	display_Uhrzeit@fila,w
  2620  051A  120A  158A  2548  120A  118A  	fcall	_LCD_Set_Cursor
  2621                           
  2622                           ;main_Master.c: 183:     LCD_Write_Character(Uhr_d + '0');
  2623  051F  1283               	bcf	3,5	;RP0=0, select bank0
  2624  0520  1303               	bcf	3,6	;RP1=0, select bank0
  2625  0521  0832               	movf	display_Uhrzeit@Uhr_d,w
  2626  0522  3E30               	addlw	48
  2627  0523  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  2628                           
  2629                           ;main_Master.c: 184:     LCD_Write_Character(Uhr_u + '0');
  2630  0528  1283               	bcf	3,5	;RP0=0, select bank0
  2631  0529  1303               	bcf	3,6	;RP1=0, select bank0
  2632  052A  0831               	movf	display_Uhrzeit@Uhr_u,w
  2633  052B  3E30               	addlw	48
  2634  052C  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  2635                           
  2636                           ;main_Master.c: 185:     LCD_Write_Character(':');
  2637  0531  303A               	movlw	58
  2638  0532  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  2639                           
  2640                           ;main_Master.c: 186:     LCD_Write_Character(min_d + '0');
  2641  0537  1283               	bcf	3,5	;RP0=0, select bank0
  2642  0538  1303               	bcf	3,6	;RP1=0, select bank0
  2643  0539  0830               	movf	display_Uhrzeit@min_d,w
  2644  053A  3E30               	addlw	48
  2645  053B  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  2646                           
  2647                           ;main_Master.c: 187:     LCD_Write_Character(min_u + '0');
  2648  0540  1283               	bcf	3,5	;RP0=0, select bank0
  2649  0541  1303               	bcf	3,6	;RP1=0, select bank0
  2650  0542  082F               	movf	display_Uhrzeit@min_u,w
  2651  0543  3E30               	addlw	48
  2652  0544  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  2653                           
  2654                           ;main_Master.c: 188:     LCD_Write_Character(':');
  2655  0549  303A               	movlw	58
  2656  054A  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  2657                           
  2658                           ;main_Master.c: 189:     LCD_Write_Character(seg_d + '0');
  2659  054F  1283               	bcf	3,5	;RP0=0, select bank0
  2660  0550  1303               	bcf	3,6	;RP1=0, select bank0
  2661  0551  082E               	movf	display_Uhrzeit@seg_d,w
  2662  0552  3E30               	addlw	48
  2663  0553  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  2664                           
  2665                           ;main_Master.c: 190:     LCD_Write_Character(seg_u + '0');
  2666  0558  1283               	bcf	3,5	;RP0=0, select bank0
  2667  0559  1303               	bcf	3,6	;RP1=0, select bank0
  2668  055A  082D               	movf	display_Uhrzeit@seg_u,w
  2669  055B  3E30               	addlw	48
  2670  055C  120A  158A  2440   	fcall	_LCD_Write_Character
  2671  055F  0008               	return
  2672  0560                     __end_of_display_Uhrzeit:	
  2673                           
  2674                           	psect	text8
  2675  03B6                     __ptext8:	
  2676 ;; *************** function _display_Datum *****************
  2677 ;; Defined at:
  2678 ;;		line 194 in file "main_Master.c"
  2679 ;; Parameters:    Size  Location     Type
  2680 ;;  fila            1    wreg     unsigned char 
  2681 ;;  columna         1    8[BANK0 ] unsigned char 
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;  fila            1   12[BANK0 ] unsigned char 
  2684 ;;  jahr_d          1   18[BANK0 ] unsigned char 
  2685 ;;  jahr_u          1   17[BANK0 ] unsigned char 
  2686 ;;  mes_d           1   16[BANK0 ] unsigned char 
  2687 ;;  mes_u           1   15[BANK0 ] unsigned char 
  2688 ;;  dia_d           1   14[BANK0 ] unsigned char 
  2689 ;;  dia_u           1   13[BANK0 ] unsigned char 
  2690 ;; Return value:  Size  Location     Type
  2691 ;;                  1    wreg      void 
  2692 ;; Registers used:
  2693 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2699 ;;      Params:         0       1       0       0       0
  2700 ;;      Locals:         0       7       0       0       0
  2701 ;;      Temps:          0       3       0       0       0
  2702 ;;      Totals:         0      11       0       0       0
  2703 ;;Total ram usage:       11 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; Hardware stack levels required when called:    3
  2706 ;; This function calls:
  2707 ;;		_LCD_Set_Cursor
  2708 ;;		_LCD_Write_Character
  2709 ;;		_LCD_Write_String
  2710 ;;		___awdiv
  2711 ;;		___awmod
  2712 ;; This function is called by:
  2713 ;;		_mostrarLCD
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717                           
  2718                           ;psect for function _display_Datum
  2719  03B6                     _display_Datum:	
  2720                           
  2721                           ;incstack = 0
  2722                           ; Regs used in _display_Datum: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2723                           ;display_Datum@fila stored from wreg
  2724  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  2725  03B7  1303               	bcf	3,6	;RP1=0, select bank0
  2726  03B8  00AC               	movwf	display_Datum@fila
  2727                           
  2728                           ;main_Master.c: 195:     char dia_u = datum%10;
  2729  03B9  300A               	movlw	10
  2730  03BA  00F2               	movwf	___awmod@divisor
  2731  03BB  3000               	movlw	0
  2732  03BC  00F3               	movwf	___awmod@divisor+1
  2733  03BD  0849               	movf	_datum,w
  2734  03BE  00A9               	movwf	??_display_Datum
  2735  03BF  01AA               	clrf	??_display_Datum+1
  2736  03C0  0829               	movf	??_display_Datum,w
  2737  03C1  00F4               	movwf	___awmod@dividend
  2738  03C2  082A               	movf	??_display_Datum+1,w
  2739  03C3  00F5               	movwf	___awmod@dividend+1
  2740  03C4  120A  158A  2697  120A  118A  	fcall	___awmod
  2741  03C9  0872               	movf	?___awmod,w
  2742  03CA  1283               	bcf	3,5	;RP0=0, select bank0
  2743  03CB  1303               	bcf	3,6	;RP1=0, select bank0
  2744  03CC  00AB               	movwf	??_display_Datum+2
  2745  03CD  082B               	movf	??_display_Datum+2,w
  2746  03CE  00AD               	movwf	display_Datum@dia_u
  2747                           
  2748                           ;main_Master.c: 196:     char dia_d = datum/10;
  2749  03CF  300A               	movlw	10
  2750  03D0  00A0               	movwf	___awdiv@divisor
  2751  03D1  3000               	movlw	0
  2752  03D2  00A1               	movwf	___awdiv@divisor+1
  2753  03D3  0849               	movf	_datum,w
  2754  03D4  00A9               	movwf	??_display_Datum
  2755  03D5  01AA               	clrf	??_display_Datum+1
  2756  03D6  0829               	movf	??_display_Datum,w
  2757  03D7  00A2               	movwf	___awdiv@dividend
  2758  03D8  082A               	movf	??_display_Datum+1,w
  2759  03D9  00A3               	movwf	___awdiv@dividend+1
  2760  03DA  120A  158A  26E2  120A  118A  	fcall	___awdiv
  2761  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  2762  03E0  1303               	bcf	3,6	;RP1=0, select bank0
  2763  03E1  0820               	movf	?___awdiv,w
  2764  03E2  00AB               	movwf	??_display_Datum+2
  2765  03E3  082B               	movf	??_display_Datum+2,w
  2766  03E4  00AE               	movwf	display_Datum@dia_d
  2767                           
  2768                           ;main_Master.c: 197:     char mes_u = mes%10;
  2769  03E5  300A               	movlw	10
  2770  03E6  00F2               	movwf	___awmod@divisor
  2771  03E7  3000               	movlw	0
  2772  03E8  00F3               	movwf	___awmod@divisor+1
  2773  03E9  0848               	movf	_mes,w
  2774  03EA  00A9               	movwf	??_display_Datum
  2775  03EB  01AA               	clrf	??_display_Datum+1
  2776  03EC  0829               	movf	??_display_Datum,w
  2777  03ED  00F4               	movwf	___awmod@dividend
  2778  03EE  082A               	movf	??_display_Datum+1,w
  2779  03EF  00F5               	movwf	___awmod@dividend+1
  2780  03F0  120A  158A  2697  120A  118A  	fcall	___awmod
  2781  03F5  0872               	movf	?___awmod,w
  2782  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  2783  03F7  1303               	bcf	3,6	;RP1=0, select bank0
  2784  03F8  00AB               	movwf	??_display_Datum+2
  2785  03F9  082B               	movf	??_display_Datum+2,w
  2786  03FA  00AF               	movwf	display_Datum@mes_u
  2787                           
  2788                           ;main_Master.c: 198:     char mes_d = mes/10;
  2789  03FB  300A               	movlw	10
  2790  03FC  00A0               	movwf	___awdiv@divisor
  2791  03FD  3000               	movlw	0
  2792  03FE  00A1               	movwf	___awdiv@divisor+1
  2793  03FF  0848               	movf	_mes,w
  2794  0400  00A9               	movwf	??_display_Datum
  2795  0401  01AA               	clrf	??_display_Datum+1
  2796  0402  0829               	movf	??_display_Datum,w
  2797  0403  00A2               	movwf	___awdiv@dividend
  2798  0404  082A               	movf	??_display_Datum+1,w
  2799  0405  00A3               	movwf	___awdiv@dividend+1
  2800  0406  120A  158A  26E2  120A  118A  	fcall	___awdiv
  2801  040B  1283               	bcf	3,5	;RP0=0, select bank0
  2802  040C  1303               	bcf	3,6	;RP1=0, select bank0
  2803  040D  0820               	movf	?___awdiv,w
  2804  040E  00AB               	movwf	??_display_Datum+2
  2805  040F  082B               	movf	??_display_Datum+2,w
  2806  0410  00B0               	movwf	display_Datum@mes_d
  2807                           
  2808                           ;main_Master.c: 199:     char jahr_u = jahr%10;
  2809  0411  300A               	movlw	10
  2810  0412  00F2               	movwf	___awmod@divisor
  2811  0413  3000               	movlw	0
  2812  0414  00F3               	movwf	___awmod@divisor+1
  2813  0415  0847               	movf	_jahr,w
  2814  0416  00A9               	movwf	??_display_Datum
  2815  0417  01AA               	clrf	??_display_Datum+1
  2816  0418  0829               	movf	??_display_Datum,w
  2817  0419  00F4               	movwf	___awmod@dividend
  2818  041A  082A               	movf	??_display_Datum+1,w
  2819  041B  00F5               	movwf	___awmod@dividend+1
  2820  041C  120A  158A  2697  120A  118A  	fcall	___awmod
  2821  0421  0872               	movf	?___awmod,w
  2822  0422  1283               	bcf	3,5	;RP0=0, select bank0
  2823  0423  1303               	bcf	3,6	;RP1=0, select bank0
  2824  0424  00AB               	movwf	??_display_Datum+2
  2825  0425  082B               	movf	??_display_Datum+2,w
  2826  0426  00B1               	movwf	display_Datum@jahr_u
  2827                           
  2828                           ;main_Master.c: 200:     char jahr_d = jahr/10;
  2829  0427  300A               	movlw	10
  2830  0428  00A0               	movwf	___awdiv@divisor
  2831  0429  3000               	movlw	0
  2832  042A  00A1               	movwf	___awdiv@divisor+1
  2833  042B  0847               	movf	_jahr,w
  2834  042C  00A9               	movwf	??_display_Datum
  2835  042D  01AA               	clrf	??_display_Datum+1
  2836  042E  0829               	movf	??_display_Datum,w
  2837  042F  00A2               	movwf	___awdiv@dividend
  2838  0430  082A               	movf	??_display_Datum+1,w
  2839  0431  00A3               	movwf	___awdiv@dividend+1
  2840  0432  120A  158A  26E2  120A  118A  	fcall	___awdiv
  2841  0437  1283               	bcf	3,5	;RP0=0, select bank0
  2842  0438  1303               	bcf	3,6	;RP1=0, select bank0
  2843  0439  0820               	movf	?___awdiv,w
  2844  043A  00AB               	movwf	??_display_Datum+2
  2845  043B  082B               	movf	??_display_Datum+2,w
  2846  043C  00B2               	movwf	display_Datum@jahr_d
  2847                           
  2848                           ;main_Master.c: 202:     LCD_Set_Cursor(fila, columna);
  2849  043D  0828               	movf	display_Datum@columna,w
  2850  043E  00A9               	movwf	??_display_Datum
  2851  043F  0829               	movf	??_display_Datum,w
  2852  0440  00F5               	movwf	LCD_Set_Cursor@columna
  2853  0441  082C               	movf	display_Datum@fila,w
  2854  0442  120A  158A  2548  120A  118A  	fcall	_LCD_Set_Cursor
  2855                           
  2856                           ;main_Master.c: 203:     LCD_Write_Character(dia_d + '0');
  2857  0447  1283               	bcf	3,5	;RP0=0, select bank0
  2858  0448  1303               	bcf	3,6	;RP1=0, select bank0
  2859  0449  082E               	movf	display_Datum@dia_d,w
  2860  044A  3E30               	addlw	48
  2861  044B  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  2862                           
  2863                           ;main_Master.c: 204:     LCD_Write_Character(dia_u + '0');
  2864  0450  1283               	bcf	3,5	;RP0=0, select bank0
  2865  0451  1303               	bcf	3,6	;RP1=0, select bank0
  2866  0452  082D               	movf	display_Datum@dia_u,w
  2867  0453  3E30               	addlw	48
  2868  0454  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  2869                           
  2870                           ;main_Master.c: 205:     LCD_Write_Character('/');
  2871  0459  302F               	movlw	47
  2872  045A  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  2873                           
  2874                           ;main_Master.c: 206:     LCD_Write_Character(mes_d + '0');
  2875  045F  1283               	bcf	3,5	;RP0=0, select bank0
  2876  0460  1303               	bcf	3,6	;RP1=0, select bank0
  2877  0461  0830               	movf	display_Datum@mes_d,w
  2878  0462  3E30               	addlw	48
  2879  0463  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  2880                           
  2881                           ;main_Master.c: 207:     LCD_Write_Character(mes_u + '0');
  2882  0468  1283               	bcf	3,5	;RP0=0, select bank0
  2883  0469  1303               	bcf	3,6	;RP1=0, select bank0
  2884  046A  082F               	movf	display_Datum@mes_u,w
  2885  046B  3E30               	addlw	48
  2886  046C  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  2887                           
  2888                           ;main_Master.c: 208:     LCD_Write_Character('/');
  2889  0471  302F               	movlw	47
  2890  0472  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  2891                           
  2892                           ;main_Master.c: 209:     LCD_Write_String("20");
  2893  0477  3073               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2894  0478  120A  158A  24A9  120A  118A  	fcall	_LCD_Write_String
  2895                           
  2896                           ;main_Master.c: 210:     LCD_Write_Character(jahr_d + '0');
  2897  047D  1283               	bcf	3,5	;RP0=0, select bank0
  2898  047E  1303               	bcf	3,6	;RP1=0, select bank0
  2899  047F  0832               	movf	display_Datum@jahr_d,w
  2900  0480  3E30               	addlw	48
  2901  0481  120A  158A  2440  120A  118A  	fcall	_LCD_Write_Character
  2902                           
  2903                           ;main_Master.c: 211:     LCD_Write_Character(jahr_u + '0');
  2904  0486  1283               	bcf	3,5	;RP0=0, select bank0
  2905  0487  1303               	bcf	3,6	;RP1=0, select bank0
  2906  0488  0831               	movf	display_Datum@jahr_u,w
  2907  0489  3E30               	addlw	48
  2908  048A  120A  158A  2440   	fcall	_LCD_Write_Character
  2909  048D  0008               	return
  2910  048E                     __end_of_display_Datum:	
  2911                           
  2912                           	psect	text9
  2913  0E97                     __ptext9:	
  2914 ;; *************** function ___awmod *****************
  2915 ;; Defined at:
  2916 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;  divisor         2    2[COMMON] int 
  2919 ;;  dividend        2    4[COMMON] int 
  2920 ;; Auto vars:     Size  Location     Type
  2921 ;;  sign            1    8[COMMON] unsigned char 
  2922 ;;  counter         1    7[COMMON] unsigned char 
  2923 ;; Return value:  Size  Location     Type
  2924 ;;                  2    2[COMMON] int 
  2925 ;; Registers used:
  2926 ;;		wreg, status,2, status,0
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2932 ;;      Params:         4       0       0       0       0
  2933 ;;      Locals:         2       0       0       0       0
  2934 ;;      Temps:          1       0       0       0       0
  2935 ;;      Totals:         7       0       0       0       0
  2936 ;;Total ram usage:        7 bytes
  2937 ;; Hardware stack levels used:    1
  2938 ;; Hardware stack levels required when called:    1
  2939 ;; This function calls:
  2940 ;;		Nothing
  2941 ;; This function is called by:
  2942 ;;		_display_Uhrzeit
  2943 ;;		_display_Datum
  2944 ;;		_DEC_a_BCD
  2945 ;; This function uses a non-reentrant model
  2946 ;;
  2947                           
  2948                           
  2949                           ;psect for function ___awmod
  2950  0E97                     ___awmod:	
  2951                           
  2952                           ;incstack = 0
  2953                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2954  0E97  01F8               	clrf	___awmod@sign
  2955  0E98  1FF5               	btfss	___awmod@dividend+1,7
  2956  0E99  2EA1               	goto	l2204
  2957  0E9A  09F4               	comf	___awmod@dividend,f
  2958  0E9B  09F5               	comf	___awmod@dividend+1,f
  2959  0E9C  0AF4               	incf	___awmod@dividend,f
  2960  0E9D  1903               	skipnz
  2961  0E9E  0AF5               	incf	___awmod@dividend+1,f
  2962  0E9F  01F8               	clrf	___awmod@sign
  2963  0EA0  0AF8               	incf	___awmod@sign,f
  2964  0EA1                     l2204:	
  2965  0EA1  1FF3               	btfss	___awmod@divisor+1,7
  2966  0EA2  2EA8               	goto	l2208
  2967  0EA3  09F2               	comf	___awmod@divisor,f
  2968  0EA4  09F3               	comf	___awmod@divisor+1,f
  2969  0EA5  0AF2               	incf	___awmod@divisor,f
  2970  0EA6  1903               	skipnz
  2971  0EA7  0AF3               	incf	___awmod@divisor+1,f
  2972  0EA8                     l2208:	
  2973  0EA8  0872               	movf	___awmod@divisor,w
  2974  0EA9  0473               	iorwf	___awmod@divisor+1,w
  2975  0EAA  1903               	btfsc	3,2
  2976  0EAB  2ED5               	goto	l2226
  2977  0EAC  01F7               	clrf	___awmod@counter
  2978  0EAD  0AF7               	incf	___awmod@counter,f
  2979  0EAE                     l2216:	
  2980  0EAE  1BF3               	btfsc	___awmod@divisor+1,7
  2981  0EAF  2EBC               	goto	l2218
  2982  0EB0  3001               	movlw	1
  2983  0EB1                     u905:	
  2984  0EB1  1003               	clrc
  2985  0EB2  0DF2               	rlf	___awmod@divisor,f
  2986  0EB3  0DF3               	rlf	___awmod@divisor+1,f
  2987  0EB4  3EFF               	addlw	-1
  2988  0EB5  1D03               	skipz
  2989  0EB6  2EB1               	goto	u905
  2990  0EB7  3001               	movlw	1
  2991  0EB8  00F6               	movwf	??___awmod
  2992  0EB9  0876               	movf	??___awmod,w
  2993  0EBA  07F7               	addwf	___awmod@counter,f
  2994  0EBB  2EAE               	goto	l2216
  2995  0EBC                     l2218:	
  2996  0EBC  0873               	movf	___awmod@divisor+1,w
  2997  0EBD  0275               	subwf	___awmod@dividend+1,w
  2998  0EBE  1D03               	skipz
  2999  0EBF  2EC2               	goto	u925
  3000  0EC0  0872               	movf	___awmod@divisor,w
  3001  0EC1  0274               	subwf	___awmod@dividend,w
  3002  0EC2                     u925:	
  3003  0EC2  1C03               	skipc
  3004  0EC3  2ECA               	goto	l2222
  3005  0EC4  0872               	movf	___awmod@divisor,w
  3006  0EC5  02F4               	subwf	___awmod@dividend,f
  3007  0EC6  0873               	movf	___awmod@divisor+1,w
  3008  0EC7  1C03               	skipc
  3009  0EC8  03F5               	decf	___awmod@dividend+1,f
  3010  0EC9  02F5               	subwf	___awmod@dividend+1,f
  3011  0ECA                     l2222:	
  3012  0ECA  3001               	movlw	1
  3013  0ECB                     u935:	
  3014  0ECB  1003               	clrc
  3015  0ECC  0CF3               	rrf	___awmod@divisor+1,f
  3016  0ECD  0CF2               	rrf	___awmod@divisor,f
  3017  0ECE  3EFF               	addlw	-1
  3018  0ECF  1D03               	skipz
  3019  0ED0  2ECB               	goto	u935
  3020  0ED1  3001               	movlw	1
  3021  0ED2  02F7               	subwf	___awmod@counter,f
  3022  0ED3  1D03               	btfss	3,2
  3023  0ED4  2EBC               	goto	l2218
  3024  0ED5                     l2226:	
  3025  0ED5  0878               	movf	___awmod@sign,w
  3026  0ED6  1903               	btfsc	3,2
  3027  0ED7  2EDD               	goto	l2230
  3028  0ED8  09F4               	comf	___awmod@dividend,f
  3029  0ED9  09F5               	comf	___awmod@dividend+1,f
  3030  0EDA  0AF4               	incf	___awmod@dividend,f
  3031  0EDB  1903               	skipnz
  3032  0EDC  0AF5               	incf	___awmod@dividend+1,f
  3033  0EDD                     l2230:	
  3034  0EDD  0875               	movf	___awmod@dividend+1,w
  3035  0EDE  00F3               	movwf	?___awmod+1
  3036  0EDF  0874               	movf	___awmod@dividend,w
  3037  0EE0  00F2               	movwf	?___awmod
  3038  0EE1  0008               	return
  3039  0EE2                     __end_of___awmod:	
  3040                           
  3041                           	psect	text10
  3042  0EE2                     __ptext10:	
  3043 ;; *************** function ___awdiv *****************
  3044 ;; Defined at:
  3045 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;  divisor         2    0[BANK0 ] int 
  3048 ;;  dividend        2    2[BANK0 ] int 
  3049 ;; Auto vars:     Size  Location     Type
  3050 ;;  quotient        2    6[BANK0 ] int 
  3051 ;;  sign            1    5[BANK0 ] unsigned char 
  3052 ;;  counter         1    4[BANK0 ] unsigned char 
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  2    0[BANK0 ] int 
  3055 ;; Registers used:
  3056 ;;		wreg, status,2, status,0
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3062 ;;      Params:         0       4       0       0       0
  3063 ;;      Locals:         0       4       0       0       0
  3064 ;;      Temps:          1       0       0       0       0
  3065 ;;      Totals:         1       8       0       0       0
  3066 ;;Total ram usage:        9 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:    1
  3069 ;; This function calls:
  3070 ;;		Nothing
  3071 ;; This function is called by:
  3072 ;;		_display_Uhrzeit
  3073 ;;		_display_Datum
  3074 ;;		_uint_to_array
  3075 ;;		_DEC_a_BCD
  3076 ;; This function uses a non-reentrant model
  3077 ;;
  3078                           
  3079                           
  3080                           ;psect for function ___awdiv
  3081  0EE2                     ___awdiv:	
  3082                           
  3083                           ;incstack = 0
  3084                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3085  0EE2  1283               	bcf	3,5	;RP0=0, select bank0
  3086  0EE3  1303               	bcf	3,6	;RP1=0, select bank0
  3087  0EE4  01A5               	clrf	___awdiv@sign
  3088  0EE5  1FA1               	btfss	___awdiv@divisor+1,7
  3089  0EE6  2EEE               	goto	l3188
  3090  0EE7  09A0               	comf	___awdiv@divisor,f
  3091  0EE8  09A1               	comf	___awdiv@divisor+1,f
  3092  0EE9  0AA0               	incf	___awdiv@divisor,f
  3093  0EEA  1903               	skipnz
  3094  0EEB  0AA1               	incf	___awdiv@divisor+1,f
  3095  0EEC  01A5               	clrf	___awdiv@sign
  3096  0EED  0AA5               	incf	___awdiv@sign,f
  3097  0EEE                     l3188:	
  3098  0EEE  1FA3               	btfss	___awdiv@dividend+1,7
  3099  0EEF  2EF9               	goto	l3194
  3100  0EF0  09A2               	comf	___awdiv@dividend,f
  3101  0EF1  09A3               	comf	___awdiv@dividend+1,f
  3102  0EF2  0AA2               	incf	___awdiv@dividend,f
  3103  0EF3  1903               	skipnz
  3104  0EF4  0AA3               	incf	___awdiv@dividend+1,f
  3105  0EF5  3001               	movlw	1
  3106  0EF6  00F8               	movwf	??___awdiv
  3107  0EF7  0878               	movf	??___awdiv,w
  3108  0EF8  06A5               	xorwf	___awdiv@sign,f
  3109  0EF9                     l3194:	
  3110  0EF9  01A6               	clrf	___awdiv@quotient
  3111  0EFA  01A7               	clrf	___awdiv@quotient+1
  3112  0EFB  0820               	movf	___awdiv@divisor,w
  3113  0EFC  0421               	iorwf	___awdiv@divisor+1,w
  3114  0EFD  1903               	btfsc	3,2
  3115  0EFE  2F30               	goto	l3216
  3116  0EFF  01A4               	clrf	___awdiv@counter
  3117  0F00  0AA4               	incf	___awdiv@counter,f
  3118  0F01                     l3204:	
  3119  0F01  1BA1               	btfsc	___awdiv@divisor+1,7
  3120  0F02  2F0F               	goto	l3206
  3121  0F03  3001               	movlw	1
  3122  0F04                     u1305:	
  3123  0F04  1003               	clrc
  3124  0F05  0DA0               	rlf	___awdiv@divisor,f
  3125  0F06  0DA1               	rlf	___awdiv@divisor+1,f
  3126  0F07  3EFF               	addlw	-1
  3127  0F08  1D03               	skipz
  3128  0F09  2F04               	goto	u1305
  3129  0F0A  3001               	movlw	1
  3130  0F0B  00F8               	movwf	??___awdiv
  3131  0F0C  0878               	movf	??___awdiv,w
  3132  0F0D  07A4               	addwf	___awdiv@counter,f
  3133  0F0E  2F01               	goto	l3204
  3134  0F0F                     l3206:	
  3135  0F0F  3001               	movlw	1
  3136  0F10                     u1325:	
  3137  0F10  1003               	clrc
  3138  0F11  0DA6               	rlf	___awdiv@quotient,f
  3139  0F12  0DA7               	rlf	___awdiv@quotient+1,f
  3140  0F13  3EFF               	addlw	-1
  3141  0F14  1D03               	skipz
  3142  0F15  2F10               	goto	u1325
  3143  0F16  0821               	movf	___awdiv@divisor+1,w
  3144  0F17  0223               	subwf	___awdiv@dividend+1,w
  3145  0F18  1D03               	skipz
  3146  0F19  2F1C               	goto	u1335
  3147  0F1A  0820               	movf	___awdiv@divisor,w
  3148  0F1B  0222               	subwf	___awdiv@dividend,w
  3149  0F1C                     u1335:	
  3150  0F1C  1C03               	skipc
  3151  0F1D  2F25               	goto	l3212
  3152  0F1E  0820               	movf	___awdiv@divisor,w
  3153  0F1F  02A2               	subwf	___awdiv@dividend,f
  3154  0F20  0821               	movf	___awdiv@divisor+1,w
  3155  0F21  1C03               	skipc
  3156  0F22  03A3               	decf	___awdiv@dividend+1,f
  3157  0F23  02A3               	subwf	___awdiv@dividend+1,f
  3158  0F24  1426               	bsf	___awdiv@quotient,0
  3159  0F25                     l3212:	
  3160  0F25  3001               	movlw	1
  3161  0F26                     u1345:	
  3162  0F26  1003               	clrc
  3163  0F27  0CA1               	rrf	___awdiv@divisor+1,f
  3164  0F28  0CA0               	rrf	___awdiv@divisor,f
  3165  0F29  3EFF               	addlw	-1
  3166  0F2A  1D03               	skipz
  3167  0F2B  2F26               	goto	u1345
  3168  0F2C  3001               	movlw	1
  3169  0F2D  02A4               	subwf	___awdiv@counter,f
  3170  0F2E  1D03               	btfss	3,2
  3171  0F2F  2F0F               	goto	l3206
  3172  0F30                     l3216:	
  3173  0F30  0825               	movf	___awdiv@sign,w
  3174  0F31  1903               	btfsc	3,2
  3175  0F32  2F38               	goto	l3220
  3176  0F33  09A6               	comf	___awdiv@quotient,f
  3177  0F34  09A7               	comf	___awdiv@quotient+1,f
  3178  0F35  0AA6               	incf	___awdiv@quotient,f
  3179  0F36  1903               	skipnz
  3180  0F37  0AA7               	incf	___awdiv@quotient+1,f
  3181  0F38                     l3220:	
  3182  0F38  0827               	movf	___awdiv@quotient+1,w
  3183  0F39  00A1               	movwf	?___awdiv+1
  3184  0F3A  0826               	movf	___awdiv@quotient,w
  3185  0F3B  00A0               	movwf	?___awdiv
  3186  0F3C  0008               	return
  3187  0F3D                     __end_of___awdiv:	
  3188                           
  3189                           	psect	text11
  3190  0CA9                     __ptext11:	
  3191 ;; *************** function _LCD_Write_String *****************
  3192 ;; Defined at:
  3193 ;;		line 73 in file "LCD_8bits.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;  a               1    wreg     PTR unsigned char 
  3196 ;;		 -> STR_14(6), STR_13(4), STR_12(6), STR_11(13), 
  3197 ;;		 -> STR_10(2), STR_9(2), STR_8(13), STR_7(4), 
  3198 ;;		 -> STR_6(3), STR_5(9), STR_4(3), STR_3(17), 
  3199 ;;		 -> STR_2(10), STR_1(3), 
  3200 ;; Auto vars:     Size  Location     Type
  3201 ;;  a               1    6[COMMON] PTR unsigned char 
  3202 ;;		 -> STR_14(6), STR_13(4), STR_12(6), STR_11(13), 
  3203 ;;		 -> STR_10(2), STR_9(2), STR_8(13), STR_7(4), 
  3204 ;;		 -> STR_6(3), STR_5(9), STR_4(3), STR_3(17), 
  3205 ;;		 -> STR_2(10), STR_1(3), 
  3206 ;;  n               2    4[COMMON] int 
  3207 ;; Return value:  Size  Location     Type
  3208 ;;                  1    wreg      void 
  3209 ;; Registers used:
  3210 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3216 ;;      Params:         0       0       0       0       0
  3217 ;;      Locals:         3       0       0       0       0
  3218 ;;      Temps:          0       0       0       0       0
  3219 ;;      Totals:         3       0       0       0       0
  3220 ;;Total ram usage:        3 bytes
  3221 ;; Hardware stack levels used:    1
  3222 ;; Hardware stack levels required when called:    2
  3223 ;; This function calls:
  3224 ;;		_LCD_Write_Character
  3225 ;; This function is called by:
  3226 ;;		_display_Datum
  3227 ;;		_mostrarLCD
  3228 ;; This function uses a non-reentrant model
  3229 ;;
  3230                           
  3231                           
  3232                           ;psect for function _LCD_Write_String
  3233  0CA9                     _LCD_Write_String:	
  3234                           
  3235                           ;incstack = 0
  3236                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3237                           ;LCD_Write_String@a stored from wreg
  3238  0CA9  00F6               	movwf	LCD_Write_String@a
  3239                           
  3240                           ;LCD_8bits.c: 74:     int n;;LCD_8bits.c: 75:     for(n = 0; a[n] != '\0'; n++){
  3241  0CAA  01F4               	clrf	LCD_Write_String@n
  3242  0CAB  01F5               	clrf	LCD_Write_String@n+1
  3243  0CAC                     l2094:	
  3244  0CAC  0874               	movf	LCD_Write_String@n,w
  3245  0CAD  0776               	addwf	LCD_Write_String@a,w
  3246  0CAE  0084               	movwf	4
  3247  0CAF  120A  118A  2700  120A  158A  	fcall	stringdir
  3248  0CB4  3A00               	xorlw	0
  3249  0CB5  1903               	btfsc	3,2
  3250  0CB6  0008               	return
  3251                           
  3252                           ;LCD_8bits.c: 76:         LCD_Write_Character(a[n]);
  3253  0CB7  0874               	movf	LCD_Write_String@n,w
  3254  0CB8  0776               	addwf	LCD_Write_String@a,w
  3255  0CB9  0084               	movwf	4
  3256  0CBA  120A  118A  2700  120A  158A  	fcall	stringdir
  3257  0CBF  120A  158A  2440  120A  158A  	fcall	_LCD_Write_Character
  3258                           
  3259                           ;LCD_8bits.c: 77:     }
  3260  0CC4  3001               	movlw	1
  3261  0CC5  07F4               	addwf	LCD_Write_String@n,f
  3262  0CC6  1803               	skipnc
  3263  0CC7  0AF5               	incf	LCD_Write_String@n+1,f
  3264  0CC8  3000               	movlw	0
  3265  0CC9  07F5               	addwf	LCD_Write_String@n+1,f
  3266  0CCA  2CAC               	goto	l2094
  3267  0CCB                     __end_of_LCD_Write_String:	
  3268                           
  3269                           	psect	text12
  3270  0D48                     __ptext12:	
  3271 ;; *************** function _LCD_Set_Cursor *****************
  3272 ;; Defined at:
  3273 ;;		line 80 in file "LCD_8bits.c"
  3274 ;; Parameters:    Size  Location     Type
  3275 ;;  linea           1    wreg     unsigned char 
  3276 ;;  columna         1    5[COMMON] unsigned char 
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;  linea           1    8[COMMON] unsigned char 
  3279 ;;  corrimiento     1    9[COMMON] unsigned char 
  3280 ;; Return value:  Size  Location     Type
  3281 ;;                  1    wreg      void 
  3282 ;; Registers used:
  3283 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3284 ;; Tracked objects:
  3285 ;;		On entry : 0/0
  3286 ;;		On exit  : 0/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3289 ;;      Params:         1       0       0       0       0
  3290 ;;      Locals:         2       0       0       0       0
  3291 ;;      Temps:          2       0       0       0       0
  3292 ;;      Totals:         5       0       0       0       0
  3293 ;;Total ram usage:        5 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:    2
  3296 ;; This function calls:
  3297 ;;		_LCD_Cmd
  3298 ;; This function is called by:
  3299 ;;		_display_Uhrzeit
  3300 ;;		_display_Datum
  3301 ;;		_mostrarLCD
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           
  3306                           ;psect for function _LCD_Set_Cursor
  3307  0D48                     _LCD_Set_Cursor:	
  3308                           
  3309                           ;incstack = 0
  3310                           ; Regs used in _LCD_Set_Cursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3311                           ;LCD_Set_Cursor@linea stored from wreg
  3312  0D48  00F8               	movwf	LCD_Set_Cursor@linea
  3313                           
  3314                           ;LCD_8bits.c: 82:     switch (linea){
  3315  0D49  2D63               	goto	l2082
  3316  0D4A                     l2072:	
  3317                           
  3318                           ;LCD_8bits.c: 84:             corrimiento = 0x80 + columna;
  3319  0D4A  0875               	movf	LCD_Set_Cursor@columna,w
  3320  0D4B  3E80               	addlw	128
  3321  0D4C  00F6               	movwf	??_LCD_Set_Cursor
  3322  0D4D  0876               	movf	??_LCD_Set_Cursor,w
  3323  0D4E  00F9               	movwf	LCD_Set_Cursor@corrimiento
  3324                           
  3325                           ;LCD_8bits.c: 85:             LCD_Cmd(corrimiento);
  3326  0D4F  0879               	movf	LCD_Set_Cursor@corrimiento,w
  3327  0D50  120A  158A  2574   	fcall	_LCD_Cmd
  3328                           
  3329                           ;LCD_8bits.c: 86:             break;
  3330  0D53  0008               	return
  3331  0D54                     l2076:	
  3332                           
  3333                           ;LCD_8bits.c: 88:             corrimiento = 0x80 + 0x40 + columna;
  3334  0D54  0875               	movf	LCD_Set_Cursor@columna,w
  3335  0D55  3EC0               	addlw	192
  3336  0D56  00F6               	movwf	??_LCD_Set_Cursor
  3337  0D57  0876               	movf	??_LCD_Set_Cursor,w
  3338  0D58  00F9               	movwf	LCD_Set_Cursor@corrimiento
  3339                           
  3340                           ;LCD_8bits.c: 89:             LCD_Cmd(corrimiento);
  3341  0D59  0879               	movf	LCD_Set_Cursor@corrimiento,w
  3342  0D5A  120A  158A  2574   	fcall	_LCD_Cmd
  3343                           
  3344                           ;LCD_8bits.c: 90:             break;
  3345  0D5D  0008               	return
  3346  0D5E                     l2080:	
  3347                           
  3348                           ;LCD_8bits.c: 92:             LCD_Cmd(0x80);
  3349  0D5E  3080               	movlw	128
  3350  0D5F  120A  158A  2574   	fcall	_LCD_Cmd
  3351                           
  3352                           ;LCD_8bits.c: 93:     }
  3353  0D62  0008               	return
  3354  0D63                     l2082:	
  3355  0D63  0878               	movf	LCD_Set_Cursor@linea,w
  3356  0D64  00F6               	movwf	??_LCD_Set_Cursor
  3357  0D65  01F7               	clrf	??_LCD_Set_Cursor+1
  3358                           
  3359                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3360                           ; Switch size 1, requested type "simple"
  3361                           ; Number of cases is 1, Range of values is 0 to 0
  3362                           ; switch strategies available:
  3363                           ; Name         Instructions Cycles
  3364                           ; simple_byte            4     3 (average)
  3365                           ; direct_byte           11     8 (fixed)
  3366                           ; jumptable            260     6 (fixed)
  3367                           ;	Chosen strategy is simple_byte
  3368  0D66  0877               	movf	??_LCD_Set_Cursor+1,w
  3369  0D67  3A00               	xorlw	0	; case 0
  3370  0D68  1903               	skipnz
  3371  0D69  2D6B               	goto	l3880
  3372  0D6A  2D5E               	goto	l2080
  3373  0D6B                     l3880:	
  3374                           
  3375                           ; Switch size 1, requested type "simple"
  3376                           ; Number of cases is 2, Range of values is 1 to 2
  3377                           ; switch strategies available:
  3378                           ; Name         Instructions Cycles
  3379                           ; simple_byte            7     4 (average)
  3380                           ; direct_byte           17    11 (fixed)
  3381                           ; jumptable            263     9 (fixed)
  3382                           ;	Chosen strategy is simple_byte
  3383  0D6B  0876               	movf	??_LCD_Set_Cursor,w
  3384  0D6C  3A01               	xorlw	1	; case 1
  3385  0D6D  1903               	skipnz
  3386  0D6E  2D4A               	goto	l2072
  3387  0D6F  3A03               	xorlw	3	; case 2
  3388  0D70  1903               	skipnz
  3389  0D71  2D54               	goto	l2076
  3390  0D72  2D5E               	goto	l2080
  3391  0D73  0008               	return
  3392  0D74                     __end_of_LCD_Set_Cursor:	
  3393                           
  3394                           	psect	text13
  3395  0042                     __ptext13:	
  3396 ;; *************** function _get_Time *****************
  3397 ;; Defined at:
  3398 ;;		line 78 in file "RTC.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;		None
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;		None
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  1    wreg      void 
  3405 ;; Registers used:
  3406 ;;		wreg, status,2, status,0, pclath, cstack
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3412 ;;      Params:         0       0       0       0       0
  3413 ;;      Locals:         0       0       0       0       0
  3414 ;;      Temps:          0       1       0       0       0
  3415 ;;      Totals:         0       1       0       0       0
  3416 ;;Total ram usage:        1 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; Hardware stack levels required when called:    3
  3419 ;; This function calls:
  3420 ;;		_BCD_a_DEC
  3421 ;;		_I2C_Master_Read
  3422 ;;		_I2C_Master_Start
  3423 ;;		_I2C_Master_Stop
  3424 ;;		_I2C_Master_Write
  3425 ;; This function is called by:
  3426 ;;		_main
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           
  3431                           ;psect for function _get_Time
  3432  0042                     _get_Time:	
  3433                           
  3434                           ;RTC.c: 79:     I2C_Master_Start();
  3435                           
  3436                           ;incstack = 0
  3437                           ; Regs used in _get_Time: [wreg+status,2+status,0+pclath+cstack]
  3438  0042  120A  158A  242A  120A  118A  	fcall	_I2C_Master_Start
  3439                           
  3440                           ;RTC.c: 80:     I2C_Master_Write(0xD0);
  3441  0047  30D0               	movlw	208
  3442  0048  00F2               	movwf	I2C_Master_Write@d
  3443  0049  3000               	movlw	0
  3444  004A  00F3               	movwf	I2C_Master_Write@d+1
  3445  004B  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3446                           
  3447                           ;RTC.c: 81:     I2C_Master_Write(0);
  3448  0050  3000               	movlw	0
  3449  0051  00F2               	movwf	I2C_Master_Write@d
  3450  0052  00F3               	movwf	I2C_Master_Write@d+1
  3451  0053  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3452                           
  3453                           ;RTC.c: 82:     I2C_Master_Stop();
  3454  0058  120A  158A  2431  120A  118A  	fcall	_I2C_Master_Stop
  3455                           
  3456                           ;RTC.c: 83:     I2C_Master_Start();
  3457  005D  120A  158A  242A  120A  118A  	fcall	_I2C_Master_Start
  3458                           
  3459                           ;RTC.c: 84:     I2C_Master_Write(0xD1);
  3460  0062  30D1               	movlw	209
  3461  0063  00F2               	movwf	I2C_Master_Write@d
  3462  0064  3000               	movlw	0
  3463  0065  00F3               	movwf	I2C_Master_Write@d+1
  3464  0066  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3465                           
  3466                           ;RTC.c: 85:     seg = BCD_a_DEC(I2C_Master_Read(0));
  3467  006B  3000               	movlw	0
  3468  006C  00F2               	movwf	I2C_Master_Read@a
  3469  006D  00F3               	movwf	I2C_Master_Read@a+1
  3470  006E  120A  158A  251C  120A  118A  	fcall	_I2C_Master_Read
  3471  0073  0872               	movf	?_I2C_Master_Read,w
  3472  0074  120A  118A  27EA  120A  118A  	fcall	_BCD_a_DEC
  3473  0079  1283               	bcf	3,5	;RP0=0, select bank0
  3474  007A  1303               	bcf	3,6	;RP1=0, select bank0
  3475  007B  00A0               	movwf	??_get_Time
  3476  007C  0820               	movf	??_get_Time,w
  3477  007D  00C5               	movwf	_seg
  3478                           
  3479                           ;RTC.c: 86:     I2C_Master_Stop();
  3480  007E  120A  158A  2431  120A  118A  	fcall	_I2C_Master_Stop
  3481                           
  3482                           ;RTC.c: 88:     I2C_Master_Start();
  3483  0083  120A  158A  242A  120A  118A  	fcall	_I2C_Master_Start
  3484                           
  3485                           ;RTC.c: 89:     I2C_Master_Write(0xD0);
  3486  0088  30D0               	movlw	208
  3487  0089  00F2               	movwf	I2C_Master_Write@d
  3488  008A  3000               	movlw	0
  3489  008B  00F3               	movwf	I2C_Master_Write@d+1
  3490  008C  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3491                           
  3492                           ;RTC.c: 90:     I2C_Master_Write(1);
  3493  0091  3001               	movlw	1
  3494  0092  00F2               	movwf	I2C_Master_Write@d
  3495  0093  3000               	movlw	0
  3496  0094  00F3               	movwf	I2C_Master_Write@d+1
  3497  0095  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3498                           
  3499                           ;RTC.c: 91:     I2C_Master_Stop();
  3500  009A  120A  158A  2431  120A  118A  	fcall	_I2C_Master_Stop
  3501                           
  3502                           ;RTC.c: 92:     I2C_Master_Start();
  3503  009F  120A  158A  242A  120A  118A  	fcall	_I2C_Master_Start
  3504                           
  3505                           ;RTC.c: 93:     I2C_Master_Write(0xD1);
  3506  00A4  30D1               	movlw	209
  3507  00A5  00F2               	movwf	I2C_Master_Write@d
  3508  00A6  3000               	movlw	0
  3509  00A7  00F3               	movwf	I2C_Master_Write@d+1
  3510  00A8  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3511                           
  3512                           ;RTC.c: 94:     min = BCD_a_DEC(I2C_Master_Read(0));
  3513  00AD  3000               	movlw	0
  3514  00AE  00F2               	movwf	I2C_Master_Read@a
  3515  00AF  00F3               	movwf	I2C_Master_Read@a+1
  3516  00B0  120A  158A  251C  120A  118A  	fcall	_I2C_Master_Read
  3517  00B5  0872               	movf	?_I2C_Master_Read,w
  3518  00B6  120A  118A  27EA  120A  118A  	fcall	_BCD_a_DEC
  3519  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  3520  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  3521  00BD  00A0               	movwf	??_get_Time
  3522  00BE  0820               	movf	??_get_Time,w
  3523  00BF  00CC               	movwf	_min
  3524                           
  3525                           ;RTC.c: 95:     I2C_Master_Stop();
  3526  00C0  120A  158A  2431  120A  118A  	fcall	_I2C_Master_Stop
  3527                           
  3528                           ;RTC.c: 97:     I2C_Master_Start();
  3529  00C5  120A  158A  242A  120A  118A  	fcall	_I2C_Master_Start
  3530                           
  3531                           ;RTC.c: 98:     I2C_Master_Write(0xD0);
  3532  00CA  30D0               	movlw	208
  3533  00CB  00F2               	movwf	I2C_Master_Write@d
  3534  00CC  3000               	movlw	0
  3535  00CD  00F3               	movwf	I2C_Master_Write@d+1
  3536  00CE  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3537                           
  3538                           ;RTC.c: 99:     I2C_Master_Write(2);
  3539  00D3  3002               	movlw	2
  3540  00D4  00F2               	movwf	I2C_Master_Write@d
  3541  00D5  3000               	movlw	0
  3542  00D6  00F3               	movwf	I2C_Master_Write@d+1
  3543  00D7  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3544                           
  3545                           ;RTC.c: 100:     I2C_Master_Stop();
  3546  00DC  120A  158A  2431  120A  118A  	fcall	_I2C_Master_Stop
  3547                           
  3548                           ;RTC.c: 101:     I2C_Master_Start();
  3549  00E1  120A  158A  242A  120A  118A  	fcall	_I2C_Master_Start
  3550                           
  3551                           ;RTC.c: 102:     I2C_Master_Write(0xD1);
  3552  00E6  30D1               	movlw	209
  3553  00E7  00F2               	movwf	I2C_Master_Write@d
  3554  00E8  3000               	movlw	0
  3555  00E9  00F3               	movwf	I2C_Master_Write@d+1
  3556  00EA  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3557                           
  3558                           ;RTC.c: 103:     hora = BCD_a_DEC(I2C_Master_Read(0));
  3559  00EF  3000               	movlw	0
  3560  00F0  00F2               	movwf	I2C_Master_Read@a
  3561  00F1  00F3               	movwf	I2C_Master_Read@a+1
  3562  00F2  120A  158A  251C  120A  118A  	fcall	_I2C_Master_Read
  3563  00F7  0872               	movf	?_I2C_Master_Read,w
  3564  00F8  120A  118A  27EA  120A  118A  	fcall	_BCD_a_DEC
  3565  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  3566  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  3567  00FF  00A0               	movwf	??_get_Time
  3568  0100  0820               	movf	??_get_Time,w
  3569  0101  00CB               	movwf	_hora
  3570                           
  3571                           ;RTC.c: 104:     I2C_Master_Stop();
  3572  0102  120A  158A  2431  120A  118A  	fcall	_I2C_Master_Stop
  3573                           
  3574                           ;RTC.c: 107:     I2C_Master_Start();
  3575  0107  120A  158A  242A  120A  118A  	fcall	_I2C_Master_Start
  3576                           
  3577                           ;RTC.c: 108:     I2C_Master_Write(0xD0);
  3578  010C  30D0               	movlw	208
  3579  010D  00F2               	movwf	I2C_Master_Write@d
  3580  010E  3000               	movlw	0
  3581  010F  00F3               	movwf	I2C_Master_Write@d+1
  3582  0110  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3583                           
  3584                           ;RTC.c: 109:     I2C_Master_Write(3);
  3585  0115  3003               	movlw	3
  3586  0116  00F2               	movwf	I2C_Master_Write@d
  3587  0117  3000               	movlw	0
  3588  0118  00F3               	movwf	I2C_Master_Write@d+1
  3589  0119  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3590                           
  3591                           ;RTC.c: 110:     I2C_Master_Stop();
  3592  011E  120A  158A  2431  120A  118A  	fcall	_I2C_Master_Stop
  3593                           
  3594                           ;RTC.c: 111:     I2C_Master_Start();
  3595  0123  120A  158A  242A  120A  118A  	fcall	_I2C_Master_Start
  3596                           
  3597                           ;RTC.c: 112:     I2C_Master_Write(0xD1);
  3598  0128  30D1               	movlw	209
  3599  0129  00F2               	movwf	I2C_Master_Write@d
  3600  012A  3000               	movlw	0
  3601  012B  00F3               	movwf	I2C_Master_Write@d+1
  3602  012C  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3603                           
  3604                           ;RTC.c: 113:     dia = BCD_a_DEC(I2C_Master_Read(0));
  3605  0131  3000               	movlw	0
  3606  0132  00F2               	movwf	I2C_Master_Read@a
  3607  0133  00F3               	movwf	I2C_Master_Read@a+1
  3608  0134  120A  158A  251C  120A  118A  	fcall	_I2C_Master_Read
  3609  0139  0872               	movf	?_I2C_Master_Read,w
  3610  013A  120A  118A  27EA  120A  118A  	fcall	_BCD_a_DEC
  3611  013F  1283               	bcf	3,5	;RP0=0, select bank0
  3612  0140  1303               	bcf	3,6	;RP1=0, select bank0
  3613  0141  00A0               	movwf	??_get_Time
  3614  0142  0820               	movf	??_get_Time,w
  3615  0143  00CA               	movwf	_dia
  3616                           
  3617                           ;RTC.c: 114:     I2C_Master_Stop();
  3618  0144  120A  158A  2431  120A  118A  	fcall	_I2C_Master_Stop
  3619                           
  3620                           ;RTC.c: 116:     I2C_Master_Start();
  3621  0149  120A  158A  242A  120A  118A  	fcall	_I2C_Master_Start
  3622                           
  3623                           ;RTC.c: 117:     I2C_Master_Write(0xD0);
  3624  014E  30D0               	movlw	208
  3625  014F  00F2               	movwf	I2C_Master_Write@d
  3626  0150  3000               	movlw	0
  3627  0151  00F3               	movwf	I2C_Master_Write@d+1
  3628  0152  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3629                           
  3630                           ;RTC.c: 118:     I2C_Master_Write(4);
  3631  0157  3004               	movlw	4
  3632  0158  00F2               	movwf	I2C_Master_Write@d
  3633  0159  3000               	movlw	0
  3634  015A  00F3               	movwf	I2C_Master_Write@d+1
  3635  015B  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3636                           
  3637                           ;RTC.c: 119:     I2C_Master_Stop();
  3638  0160  120A  158A  2431  120A  118A  	fcall	_I2C_Master_Stop
  3639                           
  3640                           ;RTC.c: 120:     I2C_Master_Start();
  3641  0165  120A  158A  242A  120A  118A  	fcall	_I2C_Master_Start
  3642                           
  3643                           ;RTC.c: 121:     I2C_Master_Write(0xD1);
  3644  016A  30D1               	movlw	209
  3645  016B  00F2               	movwf	I2C_Master_Write@d
  3646  016C  3000               	movlw	0
  3647  016D  00F3               	movwf	I2C_Master_Write@d+1
  3648  016E  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3649                           
  3650                           ;RTC.c: 122:     datum = BCD_a_DEC(I2C_Master_Read(0));
  3651  0173  3000               	movlw	0
  3652  0174  00F2               	movwf	I2C_Master_Read@a
  3653  0175  00F3               	movwf	I2C_Master_Read@a+1
  3654  0176  120A  158A  251C  120A  118A  	fcall	_I2C_Master_Read
  3655  017B  0872               	movf	?_I2C_Master_Read,w
  3656  017C  120A  118A  27EA  120A  118A  	fcall	_BCD_a_DEC
  3657  0181  1283               	bcf	3,5	;RP0=0, select bank0
  3658  0182  1303               	bcf	3,6	;RP1=0, select bank0
  3659  0183  00A0               	movwf	??_get_Time
  3660  0184  0820               	movf	??_get_Time,w
  3661  0185  00C9               	movwf	_datum
  3662                           
  3663                           ;RTC.c: 123:     I2C_Master_Stop();
  3664  0186  120A  158A  2431  120A  118A  	fcall	_I2C_Master_Stop
  3665                           
  3666                           ;RTC.c: 125:     I2C_Master_Start();
  3667  018B  120A  158A  242A  120A  118A  	fcall	_I2C_Master_Start
  3668                           
  3669                           ;RTC.c: 126:     I2C_Master_Write(0xD0);
  3670  0190  30D0               	movlw	208
  3671  0191  00F2               	movwf	I2C_Master_Write@d
  3672  0192  3000               	movlw	0
  3673  0193  00F3               	movwf	I2C_Master_Write@d+1
  3674  0194  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3675                           
  3676                           ;RTC.c: 127:     I2C_Master_Write(5);
  3677  0199  3005               	movlw	5
  3678  019A  00F2               	movwf	I2C_Master_Write@d
  3679  019B  3000               	movlw	0
  3680  019C  00F3               	movwf	I2C_Master_Write@d+1
  3681  019D  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3682                           
  3683                           ;RTC.c: 128:     I2C_Master_Stop();
  3684  01A2  120A  158A  2431  120A  118A  	fcall	_I2C_Master_Stop
  3685                           
  3686                           ;RTC.c: 129:     I2C_Master_Start();
  3687  01A7  120A  158A  242A  120A  118A  	fcall	_I2C_Master_Start
  3688                           
  3689                           ;RTC.c: 130:     I2C_Master_Write(0xD1);
  3690  01AC  30D1               	movlw	209
  3691  01AD  00F2               	movwf	I2C_Master_Write@d
  3692  01AE  3000               	movlw	0
  3693  01AF  00F3               	movwf	I2C_Master_Write@d+1
  3694  01B0  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3695                           
  3696                           ;RTC.c: 131:     mes = BCD_a_DEC(I2C_Master_Read(0));
  3697  01B5  3000               	movlw	0
  3698  01B6  00F2               	movwf	I2C_Master_Read@a
  3699  01B7  00F3               	movwf	I2C_Master_Read@a+1
  3700  01B8  120A  158A  251C  120A  118A  	fcall	_I2C_Master_Read
  3701  01BD  0872               	movf	?_I2C_Master_Read,w
  3702  01BE  120A  118A  27EA  120A  118A  	fcall	_BCD_a_DEC
  3703  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  3704  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  3705  01C5  00A0               	movwf	??_get_Time
  3706  01C6  0820               	movf	??_get_Time,w
  3707  01C7  00C8               	movwf	_mes
  3708                           
  3709                           ;RTC.c: 132:     I2C_Master_Stop();
  3710  01C8  120A  158A  2431  120A  118A  	fcall	_I2C_Master_Stop
  3711                           
  3712                           ;RTC.c: 134:     I2C_Master_Start();
  3713  01CD  120A  158A  242A  120A  118A  	fcall	_I2C_Master_Start
  3714                           
  3715                           ;RTC.c: 135:     I2C_Master_Write(0xD0);
  3716  01D2  30D0               	movlw	208
  3717  01D3  00F2               	movwf	I2C_Master_Write@d
  3718  01D4  3000               	movlw	0
  3719  01D5  00F3               	movwf	I2C_Master_Write@d+1
  3720  01D6  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3721                           
  3722                           ;RTC.c: 136:     I2C_Master_Write(6);
  3723  01DB  3006               	movlw	6
  3724  01DC  00F2               	movwf	I2C_Master_Write@d
  3725  01DD  3000               	movlw	0
  3726  01DE  00F3               	movwf	I2C_Master_Write@d+1
  3727  01DF  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3728                           
  3729                           ;RTC.c: 137:     I2C_Master_Stop();
  3730  01E4  120A  158A  2431  120A  118A  	fcall	_I2C_Master_Stop
  3731                           
  3732                           ;RTC.c: 138:     I2C_Master_Start();
  3733  01E9  120A  158A  242A  120A  118A  	fcall	_I2C_Master_Start
  3734                           
  3735                           ;RTC.c: 139:     I2C_Master_Write(0xD1);
  3736  01EE  30D1               	movlw	209
  3737  01EF  00F2               	movwf	I2C_Master_Write@d
  3738  01F0  3000               	movlw	0
  3739  01F1  00F3               	movwf	I2C_Master_Write@d+1
  3740  01F2  120A  158A  2438  120A  118A  	fcall	_I2C_Master_Write
  3741                           
  3742                           ;RTC.c: 140:     jahr = BCD_a_DEC(I2C_Master_Read(0));
  3743  01F7  3000               	movlw	0
  3744  01F8  00F2               	movwf	I2C_Master_Read@a
  3745  01F9  00F3               	movwf	I2C_Master_Read@a+1
  3746  01FA  120A  158A  251C  120A  118A  	fcall	_I2C_Master_Read
  3747  01FF  0872               	movf	?_I2C_Master_Read,w
  3748  0200  120A  118A  27EA  120A  118A  	fcall	_BCD_a_DEC
  3749  0205  1283               	bcf	3,5	;RP0=0, select bank0
  3750  0206  1303               	bcf	3,6	;RP1=0, select bank0
  3751  0207  00A0               	movwf	??_get_Time
  3752  0208  0820               	movf	??_get_Time,w
  3753  0209  00C7               	movwf	_jahr
  3754                           
  3755                           ;RTC.c: 141:     I2C_Master_Stop();
  3756  020A  120A  158A  2431   	fcall	_I2C_Master_Stop
  3757  020D  0008               	return
  3758  020E                     __end_of_get_Time:	
  3759                           
  3760                           	psect	text14
  3761  07EA                     __ptext14:	
  3762 ;; *************** function _BCD_a_DEC *****************
  3763 ;; Defined at:
  3764 ;;		line 27 in file "RTC.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;  numBCD          1    wreg     unsigned char 
  3767 ;; Auto vars:     Size  Location     Type
  3768 ;;  numBCD          1    9[COMMON] unsigned char 
  3769 ;; Return value:  Size  Location     Type
  3770 ;;                  1    wreg      unsigned char 
  3771 ;; Registers used:
  3772 ;;		wreg, status,2, status,0, pclath, cstack
  3773 ;; Tracked objects:
  3774 ;;		On entry : 0/0
  3775 ;;		On exit  : 0/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3778 ;;      Params:         0       0       0       0       0
  3779 ;;      Locals:         1       0       0       0       0
  3780 ;;      Temps:          3       0       0       0       0
  3781 ;;      Totals:         4       0       0       0       0
  3782 ;;Total ram usage:        4 bytes
  3783 ;; Hardware stack levels used:    1
  3784 ;; Hardware stack levels required when called:    2
  3785 ;; This function calls:
  3786 ;;		___bmul
  3787 ;; This function is called by:
  3788 ;;		_get_Time
  3789 ;;		_get_hora
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           
  3794                           ;psect for function _BCD_a_DEC
  3795  07EA                     _BCD_a_DEC:	
  3796                           
  3797                           ;incstack = 0
  3798                           ; Regs used in _BCD_a_DEC: [wreg+status,2+status,0+pclath+cstack]
  3799                           ;BCD_a_DEC@numBCD stored from wreg
  3800  07EA  00F9               	movwf	BCD_a_DEC@numBCD
  3801                           
  3802                           ;RTC.c: 28:     return (numBCD >> 4) * 10 + (numBCD & 0x0F);
  3803  07EB  300F               	movlw	15
  3804  07EC  0579               	andwf	BCD_a_DEC@numBCD,w
  3805  07ED  00F6               	movwf	??_BCD_a_DEC
  3806  07EE  300A               	movlw	10
  3807  07EF  00F7               	movwf	??_BCD_a_DEC+1
  3808  07F0  0877               	movf	??_BCD_a_DEC+1,w
  3809  07F1  00F2               	movwf	___bmul@multiplicand
  3810  07F2  0879               	movf	BCD_a_DEC@numBCD,w
  3811  07F3  00F8               	movwf	??_BCD_a_DEC+2
  3812  07F4  3004               	movlw	4
  3813  07F5                     u1005:	
  3814  07F5  1003               	clrc
  3815  07F6  0CF8               	rrf	??_BCD_a_DEC+2,f
  3816  07F7  3EFF               	addlw	-1
  3817  07F8  1D03               	skipz
  3818  07F9  2FF5               	goto	u1005
  3819  07FA  0878               	movf	??_BCD_a_DEC+2,w
  3820  07FB  120A  158A  2461   	fcall	___bmul
  3821  07FE  0776               	addwf	??_BCD_a_DEC,w
  3822  07FF  0008               	return
  3823  0800                     __end_of_BCD_a_DEC:	
  3824                           
  3825                           	psect	text15
  3826  0C61                     __ptext15:	
  3827 ;; *************** function ___bmul *****************
  3828 ;; Defined at:
  3829 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;  multiplier      1    wreg     unsigned char 
  3832 ;;  multiplicand    1    2[COMMON] unsigned char 
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;  multiplier      1    5[COMMON] unsigned char 
  3835 ;;  product         1    4[COMMON] unsigned char 
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  1    wreg      unsigned char 
  3838 ;; Registers used:
  3839 ;;		wreg, status,2, status,0
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3845 ;;      Params:         1       0       0       0       0
  3846 ;;      Locals:         2       0       0       0       0
  3847 ;;      Temps:          1       0       0       0       0
  3848 ;;      Totals:         4       0       0       0       0
  3849 ;;Total ram usage:        4 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    1
  3852 ;; This function calls:
  3853 ;;		Nothing
  3854 ;; This function is called by:
  3855 ;;		_BCD_a_DEC
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           
  3860                           ;psect for function ___bmul
  3861  0C61                     ___bmul:	
  3862                           
  3863                           ;incstack = 0
  3864                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3865                           ;___bmul@multiplier stored from wreg
  3866  0C61  00F5               	movwf	___bmul@multiplier
  3867  0C62  01F4               	clrf	___bmul@product
  3868  0C63                     l2116:	
  3869  0C63  1C75               	btfss	___bmul@multiplier,0
  3870  0C64  2C69               	goto	l2120
  3871  0C65  0872               	movf	___bmul@multiplicand,w
  3872  0C66  00F3               	movwf	??___bmul
  3873  0C67  0873               	movf	??___bmul,w
  3874  0C68  07F4               	addwf	___bmul@product,f
  3875  0C69                     l2120:	
  3876  0C69  1003               	clrc
  3877  0C6A  0DF2               	rlf	___bmul@multiplicand,f
  3878  0C6B  1003               	clrc
  3879  0C6C  0CF5               	rrf	___bmul@multiplier,f
  3880  0C6D  0875               	movf	___bmul@multiplier,w
  3881  0C6E  1D03               	btfss	3,2
  3882  0C6F  2C63               	goto	l2116
  3883  0C70  0874               	movf	___bmul@product,w
  3884  0C71  0008               	return
  3885  0C72                     __end_of___bmul:	
  3886                           
  3887                           	psect	text16
  3888  0E50                     __ptext16:	
  3889 ;; *************** function _get_Temp *****************
  3890 ;; Defined at:
  3891 ;;		line 144 in file "RTC.c"
  3892 ;; Parameters:    Size  Location     Type
  3893 ;;		None
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;  TempMSB         1    1[BANK0 ] unsigned char 
  3896 ;;  Temp_LSB        1    0        unsigned char 
  3897 ;; Return value:  Size  Location     Type
  3898 ;;                  1    wreg      unsigned char 
  3899 ;; Registers used:
  3900 ;;		wreg, status,2, status,0, pclath, cstack
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3906 ;;      Params:         0       0       0       0       0
  3907 ;;      Locals:         0       2       0       0       0
  3908 ;;      Temps:          1       0       0       0       0
  3909 ;;      Totals:         1       2       0       0       0
  3910 ;;Total ram usage:        3 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; Hardware stack levels required when called:    3
  3913 ;; This function calls:
  3914 ;;		_I2C_Master_Read
  3915 ;;		_I2C_Master_Start
  3916 ;;		_I2C_Master_Stop
  3917 ;;		_I2C_Master_Write
  3918 ;; This function is called by:
  3919 ;;		_main
  3920 ;; This function uses a non-reentrant model
  3921 ;;
  3922                           
  3923                           
  3924                           ;psect for function _get_Temp
  3925  0E50                     _get_Temp:	
  3926                           
  3927                           ;RTC.c: 145:     I2C_Master_Start();
  3928                           
  3929                           ;incstack = 0
  3930                           ; Regs used in _get_Temp: [wreg+status,2+status,0+pclath+cstack]
  3931  0E50  120A  158A  242A  120A  158A  	fcall	_I2C_Master_Start
  3932                           
  3933                           ;RTC.c: 146:     I2C_Master_Write(0xD0);
  3934  0E55  30D0               	movlw	208
  3935  0E56  00F2               	movwf	I2C_Master_Write@d
  3936  0E57  3000               	movlw	0
  3937  0E58  00F3               	movwf	I2C_Master_Write@d+1
  3938  0E59  120A  158A  2438  120A  158A  	fcall	_I2C_Master_Write
  3939                           
  3940                           ;RTC.c: 147:     I2C_Master_Write(0x11);
  3941  0E5E  3011               	movlw	17
  3942  0E5F  00F2               	movwf	I2C_Master_Write@d
  3943  0E60  3000               	movlw	0
  3944  0E61  00F3               	movwf	I2C_Master_Write@d+1
  3945  0E62  120A  158A  2438  120A  158A  	fcall	_I2C_Master_Write
  3946                           
  3947                           ;RTC.c: 148:     I2C_Master_Stop();
  3948  0E67  120A  158A  2431  120A  158A  	fcall	_I2C_Master_Stop
  3949                           
  3950                           ;RTC.c: 150:     I2C_Master_Start();
  3951  0E6C  120A  158A  242A  120A  158A  	fcall	_I2C_Master_Start
  3952                           
  3953                           ;RTC.c: 151:     I2C_Master_Write(0xD1);
  3954  0E71  30D1               	movlw	209
  3955  0E72  00F2               	movwf	I2C_Master_Write@d
  3956  0E73  3000               	movlw	0
  3957  0E74  00F3               	movwf	I2C_Master_Write@d+1
  3958  0E75  120A  158A  2438  120A  158A  	fcall	_I2C_Master_Write
  3959                           
  3960                           ;RTC.c: 152:     uint8_t TempMSB = I2C_Master_Read(0);
  3961  0E7A  3000               	movlw	0
  3962  0E7B  00F2               	movwf	I2C_Master_Read@a
  3963  0E7C  00F3               	movwf	I2C_Master_Read@a+1
  3964  0E7D  120A  158A  251C  120A  158A  	fcall	_I2C_Master_Read
  3965  0E82  0872               	movf	?_I2C_Master_Read,w
  3966  0E83  00F8               	movwf	??_get_Temp
  3967  0E84  0878               	movf	??_get_Temp,w
  3968  0E85  1283               	bcf	3,5	;RP0=0, select bank0
  3969  0E86  1303               	bcf	3,6	;RP1=0, select bank0
  3970  0E87  00A1               	movwf	get_Temp@TempMSB
  3971  0E88  3000               	movlw	0
  3972  0E89  00F2               	movwf	I2C_Master_Read@a
  3973  0E8A  00F3               	movwf	I2C_Master_Read@a+1
  3974  0E8B  120A  158A  251C  120A  158A  	fcall	_I2C_Master_Read
  3975                           
  3976                           ;RTC.c: 154:     I2C_Master_Stop();
  3977  0E90  120A  158A  2431   	fcall	_I2C_Master_Stop
  3978                           
  3979                           ;RTC.c: 156:     return TempMSB;
  3980  0E93  1283               	bcf	3,5	;RP0=0, select bank0
  3981  0E94  1303               	bcf	3,6	;RP1=0, select bank0
  3982  0E95  0821               	movf	get_Temp@TempMSB,w
  3983  0E96  0008               	return
  3984  0E97                     __end_of_get_Temp:	
  3985                           
  3986                           	psect	text17
  3987  0C38                     __ptext17:	
  3988 ;; *************** function _I2C_Master_Write *****************
  3989 ;; Defined at:
  3990 ;;		line 65 in file "I2C.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;  d               2    2[COMMON] unsigned int 
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;		None
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      void 
  3997 ;; Registers used:
  3998 ;;		wreg, status,2, status,0, pclath, cstack
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4004 ;;      Params:         2       0       0       0       0
  4005 ;;      Locals:         0       0       0       0       0
  4006 ;;      Temps:          0       0       0       0       0
  4007 ;;      Totals:         2       0       0       0       0
  4008 ;;Total ram usage:        2 bytes
  4009 ;; Hardware stack levels used:    1
  4010 ;; Hardware stack levels required when called:    2
  4011 ;; This function calls:
  4012 ;;		_I2C_Master_Wait
  4013 ;; This function is called by:
  4014 ;;		_get_Time
  4015 ;;		_get_Temp
  4016 ;;		_get_hora
  4017 ;;		_Zeit_Datum_Set
  4018 ;; This function uses a non-reentrant model
  4019 ;;
  4020                           
  4021                           
  4022                           ;psect for function _I2C_Master_Write
  4023  0C38                     _I2C_Master_Write:	
  4024                           
  4025                           ;I2C.c: 65: void I2C_Master_Write(unsigned d);I2C.c: 66: {;I2C.c: 67:     I2C_Master_Wai
      +                          t();
  4026                           
  4027                           ;incstack = 0
  4028                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  4029  0C38  120A  118A  26F7   	fcall	_I2C_Master_Wait
  4030                           
  4031                           ;I2C.c: 68:     SSPBUF = d;
  4032  0C3B  0872               	movf	I2C_Master_Write@d,w
  4033  0C3C  1283               	bcf	3,5	;RP0=0, select bank0
  4034  0C3D  1303               	bcf	3,6	;RP1=0, select bank0
  4035  0C3E  0093               	movwf	19	;volatile
  4036  0C3F  0008               	return
  4037  0C40                     __end_of_I2C_Master_Write:	
  4038                           
  4039                           	psect	text18
  4040  0C31                     __ptext18:	
  4041 ;; *************** function _I2C_Master_Stop *****************
  4042 ;; Defined at:
  4043 ;;		line 55 in file "I2C.c"
  4044 ;; Parameters:    Size  Location     Type
  4045 ;;		None
  4046 ;; Auto vars:     Size  Location     Type
  4047 ;;		None
  4048 ;; Return value:  Size  Location     Type
  4049 ;;                  1    wreg      void 
  4050 ;; Registers used:
  4051 ;;		wreg, status,2, status,0, pclath, cstack
  4052 ;; Tracked objects:
  4053 ;;		On entry : 0/0
  4054 ;;		On exit  : 0/0
  4055 ;;		Unchanged: 0/0
  4056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4057 ;;      Params:         0       0       0       0       0
  4058 ;;      Locals:         0       0       0       0       0
  4059 ;;      Temps:          0       0       0       0       0
  4060 ;;      Totals:         0       0       0       0       0
  4061 ;;Total ram usage:        0 bytes
  4062 ;; Hardware stack levels used:    1
  4063 ;; Hardware stack levels required when called:    2
  4064 ;; This function calls:
  4065 ;;		_I2C_Master_Wait
  4066 ;; This function is called by:
  4067 ;;		_get_Time
  4068 ;;		_get_Temp
  4069 ;;		_get_hora
  4070 ;;		_Zeit_Datum_Set
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           
  4075                           ;psect for function _I2C_Master_Stop
  4076  0C31                     _I2C_Master_Stop:	
  4077                           
  4078                           ;I2C.c: 57:     I2C_Master_Wait();
  4079                           
  4080                           ;incstack = 0
  4081                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  4082  0C31  120A  118A  26F7   	fcall	_I2C_Master_Wait
  4083                           
  4084                           ;I2C.c: 58:     SSPCON2bits.PEN = 1;
  4085  0C34  1683               	bsf	3,5	;RP0=1, select bank1
  4086  0C35  1303               	bcf	3,6	;RP1=0, select bank1
  4087  0C36  1511               	bsf	17,2	;volatile
  4088  0C37  0008               	return
  4089  0C38                     __end_of_I2C_Master_Stop:	
  4090                           
  4091                           	psect	text19
  4092  0C2A                     __ptext19:	
  4093 ;; *************** function _I2C_Master_Start *****************
  4094 ;; Defined at:
  4095 ;;		line 39 in file "I2C.c"
  4096 ;; Parameters:    Size  Location     Type
  4097 ;;		None
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;		None
  4100 ;; Return value:  Size  Location     Type
  4101 ;;                  1    wreg      void 
  4102 ;; Registers used:
  4103 ;;		wreg, status,2, status,0, pclath, cstack
  4104 ;; Tracked objects:
  4105 ;;		On entry : 0/0
  4106 ;;		On exit  : 0/0
  4107 ;;		Unchanged: 0/0
  4108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4109 ;;      Params:         0       0       0       0       0
  4110 ;;      Locals:         0       0       0       0       0
  4111 ;;      Temps:          0       0       0       0       0
  4112 ;;      Totals:         0       0       0       0       0
  4113 ;;Total ram usage:        0 bytes
  4114 ;; Hardware stack levels used:    1
  4115 ;; Hardware stack levels required when called:    2
  4116 ;; This function calls:
  4117 ;;		_I2C_Master_Wait
  4118 ;; This function is called by:
  4119 ;;		_get_Time
  4120 ;;		_get_Temp
  4121 ;;		_get_hora
  4122 ;;		_Zeit_Datum_Set
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           
  4127                           ;psect for function _I2C_Master_Start
  4128  0C2A                     _I2C_Master_Start:	
  4129                           
  4130                           ;I2C.c: 41:     I2C_Master_Wait();
  4131                           
  4132                           ;incstack = 0
  4133                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  4134  0C2A  120A  118A  26F7   	fcall	_I2C_Master_Wait
  4135                           
  4136                           ;I2C.c: 42:     SSPCON2bits.SEN = 1;
  4137  0C2D  1683               	bsf	3,5	;RP0=1, select bank1
  4138  0C2E  1303               	bcf	3,6	;RP1=0, select bank1
  4139  0C2F  1411               	bsf	17,0	;volatile
  4140  0C30  0008               	return
  4141  0C31                     __end_of_I2C_Master_Start:	
  4142                           
  4143                           	psect	text20
  4144  0D1C                     __ptext20:	
  4145 ;; *************** function _I2C_Master_Read *****************
  4146 ;; Defined at:
  4147 ;;		line 74 in file "I2C.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;  a               2    2[COMMON] unsigned short 
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;  temp            2    6[COMMON] unsigned short 
  4152 ;; Return value:  Size  Location     Type
  4153 ;;                  2    2[COMMON] unsigned short 
  4154 ;; Registers used:
  4155 ;;		wreg, status,2, status,0, pclath, cstack
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4161 ;;      Params:         2       0       0       0       0
  4162 ;;      Locals:         2       0       0       0       0
  4163 ;;      Temps:          2       0       0       0       0
  4164 ;;      Totals:         6       0       0       0       0
  4165 ;;Total ram usage:        6 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:    2
  4168 ;; This function calls:
  4169 ;;		_I2C_Master_Wait
  4170 ;; This function is called by:
  4171 ;;		_get_Time
  4172 ;;		_get_Temp
  4173 ;;		_get_hora
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           
  4178                           ;psect for function _I2C_Master_Read
  4179  0D1C                     _I2C_Master_Read:	
  4180                           
  4181                           ;I2C.c: 74: unsigned short I2C_Master_Read(unsigned short a);I2C.c: 75: {;I2C.c: 76:    
      +                           unsigned short temp;;I2C.c: 77:     I2C_Master_Wait();
  4182                           
  4183                           ;incstack = 0
  4184                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  4185  0D1C  120A  118A  26F7  120A  158A  	fcall	_I2C_Master_Wait
  4186                           
  4187                           ;I2C.c: 78:     SSPCON2bits.RCEN = 1;
  4188  0D21  1683               	bsf	3,5	;RP0=1, select bank1
  4189  0D22  1303               	bcf	3,6	;RP1=0, select bank1
  4190  0D23  1591               	bsf	17,3	;volatile
  4191                           
  4192                           ;I2C.c: 79:     I2C_Master_Wait();
  4193  0D24  120A  118A  26F7  120A  158A  	fcall	_I2C_Master_Wait
  4194                           
  4195                           ;I2C.c: 80:     temp = SSPBUF;
  4196  0D29  1283               	bcf	3,5	;RP0=0, select bank0
  4197  0D2A  1303               	bcf	3,6	;RP1=0, select bank0
  4198  0D2B  0813               	movf	19,w	;volatile
  4199  0D2C  00F4               	movwf	??_I2C_Master_Read
  4200  0D2D  01F5               	clrf	??_I2C_Master_Read+1
  4201  0D2E  0874               	movf	??_I2C_Master_Read,w
  4202  0D2F  00F6               	movwf	I2C_Master_Read@temp
  4203  0D30  0875               	movf	??_I2C_Master_Read+1,w
  4204  0D31  00F7               	movwf	I2C_Master_Read@temp+1
  4205                           
  4206                           ;I2C.c: 81:     I2C_Master_Wait();
  4207  0D32  120A  118A  26F7  120A  158A  	fcall	_I2C_Master_Wait
  4208                           
  4209                           ;I2C.c: 82:     if(a == 1){
  4210  0D37  0372               	decf	I2C_Master_Read@a,w
  4211  0D38  0473               	iorwf	I2C_Master_Read@a+1,w
  4212  0D39  1D03               	btfss	3,2
  4213  0D3A  2D3F               	goto	l250
  4214                           
  4215                           ;I2C.c: 83:         SSPCON2bits.ACKDT = 0;
  4216  0D3B  1683               	bsf	3,5	;RP0=1, select bank1
  4217  0D3C  1303               	bcf	3,6	;RP1=0, select bank1
  4218  0D3D  1291               	bcf	17,5	;volatile
  4219                           
  4220                           ;I2C.c: 84:     }else{
  4221  0D3E  2D42               	goto	l251
  4222  0D3F                     l250:	
  4223                           
  4224                           ;I2C.c: 85:         SSPCON2bits.ACKDT = 1;
  4225  0D3F  1683               	bsf	3,5	;RP0=1, select bank1
  4226  0D40  1303               	bcf	3,6	;RP1=0, select bank1
  4227  0D41  1691               	bsf	17,5	;volatile
  4228  0D42                     l251:	
  4229                           ;I2C.c: 86:     }
  4230                           
  4231                           
  4232                           ;I2C.c: 87:     SSPCON2bits.ACKEN = 1;
  4233  0D42  1611               	bsf	17,4	;volatile
  4234                           
  4235                           ;I2C.c: 88:     return temp;
  4236  0D43  0877               	movf	I2C_Master_Read@temp+1,w
  4237  0D44  00F3               	movwf	?_I2C_Master_Read+1
  4238  0D45  0876               	movf	I2C_Master_Read@temp,w
  4239  0D46  00F2               	movwf	?_I2C_Master_Read
  4240  0D47  0008               	return
  4241  0D48                     __end_of_I2C_Master_Read:	
  4242                           
  4243                           	psect	text21
  4244  06F7                     __ptext21:	
  4245 ;; *************** function _I2C_Master_Wait *****************
  4246 ;; Defined at:
  4247 ;;		line 32 in file "I2C.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;		None
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;		None
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  1    wreg      void 
  4254 ;; Registers used:
  4255 ;;		wreg, status,2
  4256 ;; Tracked objects:
  4257 ;;		On entry : 0/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4261 ;;      Params:         0       0       0       0       0
  4262 ;;      Locals:         0       0       0       0       0
  4263 ;;      Temps:          0       0       0       0       0
  4264 ;;      Totals:         0       0       0       0       0
  4265 ;;Total ram usage:        0 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; Hardware stack levels required when called:    1
  4268 ;; This function calls:
  4269 ;;		Nothing
  4270 ;; This function is called by:
  4271 ;;		_I2C_Master_Start
  4272 ;;		_I2C_Master_Stop
  4273 ;;		_I2C_Master_Write
  4274 ;;		_I2C_Master_Read
  4275 ;;		_I2C_Master_RepeatedStart
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278                           
  4279                           
  4280                           ;psect for function _I2C_Master_Wait
  4281  06F7                     _I2C_Master_Wait:	
  4282  06F7                     l232:	
  4283                           ;I2C.c: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  4284                           
  4285                           ;incstack = 0
  4286                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  4287                           
  4288  06F7  1683               	bsf	3,5	;RP0=1, select bank1
  4289  06F8  1303               	bcf	3,6	;RP1=0, select bank1
  4290  06F9  1914               	btfsc	20,2	;volatile
  4291  06FA  2EF7               	goto	l232
  4292  06FB  0811               	movf	17,w	;volatile
  4293  06FC  391F               	andlw	31
  4294  06FD  1903               	btfsc	3,2
  4295  06FE  0008               	return
  4296  06FF  2EF7               	goto	l232
  4297  0700                     __end_of_I2C_Master_Wait:	
  4298                           
  4299                           	psect	text22
  4300  0782                     __ptext22:	
  4301 ;; *************** function _SetUp *****************
  4302 ;; Defined at:
  4303 ;;		line 120 in file "main_Master.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;		None
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;		None
  4308 ;; Return value:  Size  Location     Type
  4309 ;;                  1    wreg      void 
  4310 ;; Registers used:
  4311 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4317 ;;      Params:         0       0       0       0       0
  4318 ;;      Locals:         0       0       0       0       0
  4319 ;;      Temps:          0       1       0       0       0
  4320 ;;      Totals:         0       1       0       0       0
  4321 ;;Total ram usage:        1 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    3
  4324 ;; This function calls:
  4325 ;;		_I2C_Master_Init
  4326 ;;		_LCD_Create_Char
  4327 ;;		_LCD_clear
  4328 ;;		_LCD_init
  4329 ;;		_OSC_config
  4330 ;; This function is called by:
  4331 ;;		_main
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           
  4336                           ;psect for function _SetUp
  4337  0782                     _SetUp:	
  4338                           
  4339                           ;main_Master.c: 121:     OSC_config(8000000);
  4340                           
  4341                           ;incstack = 0
  4342                           ; Regs used in _SetUp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4343  0782  3000               	movlw	0
  4344  0783  00F5               	movwf	OSC_config@frecuencia+3
  4345  0784  307A               	movlw	122
  4346  0785  00F4               	movwf	OSC_config@frecuencia+2
  4347  0786  3012               	movlw	18
  4348  0787  00F3               	movwf	OSC_config@frecuencia+1
  4349  0788  3000               	movlw	0
  4350  0789  00F2               	movwf	OSC_config@frecuencia
  4351  078A  120A  118A  2560  120A  118A  	fcall	_OSC_config
  4352                           
  4353                           ;main_Master.c: 122:     TRISB = 0b00000110;
  4354  078F  3006               	movlw	6
  4355  0790  1683               	bsf	3,5	;RP0=1, select bank1
  4356  0791  1303               	bcf	3,6	;RP1=0, select bank1
  4357  0792  0086               	movwf	6	;volatile
  4358                           
  4359                           ;main_Master.c: 123:     ANSELH = 0;
  4360  0793  1683               	bsf	3,5	;RP0=1, select bank3
  4361  0794  1703               	bsf	3,6	;RP1=1, select bank3
  4362  0795  0189               	clrf	9	;volatile
  4363                           
  4364                           ;main_Master.c: 124:     WPUB = 0b00000110;
  4365  0796  3006               	movlw	6
  4366  0797  1683               	bsf	3,5	;RP0=1, select bank1
  4367  0798  1303               	bcf	3,6	;RP1=0, select bank1
  4368  0799  0095               	movwf	21	;volatile
  4369                           
  4370                           ;main_Master.c: 125:     OPTION_REGbits.nRBPU = 0;
  4371  079A  1381               	bcf	1,7	;volatile
  4372                           
  4373                           ;main_Master.c: 126:     IOCB = 0b00000110;
  4374  079B  3006               	movlw	6
  4375  079C  0096               	movwf	22	;volatile
  4376                           
  4377                           ;main_Master.c: 127:     INTCONbits.RBIE = 1;
  4378  079D  158B               	bsf	11,3	;volatile
  4379                           
  4380                           ;main_Master.c: 128:     INTCONbits.GIE = 1;
  4381  079E  178B               	bsf	11,7	;volatile
  4382                           
  4383                           ;main_Master.c: 129:     TRISD = 0;
  4384  079F  0188               	clrf	8	;volatile
  4385                           
  4386                           ;main_Master.c: 130:     TRISC0 = 0;
  4387  07A0  1007               	bcf	7,0	;volatile
  4388                           
  4389                           ;main_Master.c: 131:     TRISC1 = 0;
  4390  07A1  1087               	bcf	7,1	;volatile
  4391                           
  4392                           ;main_Master.c: 132:     LCD_init();
  4393  07A2  120A  118A  2691  120A  118A  	fcall	_LCD_init
  4394                           
  4395                           ;main_Master.c: 133:     LCD_Create_Char(0, atilde);
  4396  07A7  3011               	movlw	(low ((_atilde-__stringbase)| (0+32768)))& (0+255)
  4397  07A8  1283               	bcf	3,5	;RP0=0, select bank0
  4398  07A9  1303               	bcf	3,6	;RP1=0, select bank0
  4399  07AA  00AE               	movwf	??_SetUp
  4400  07AB  082E               	movf	??_SetUp,w
  4401  07AC  00F5               	movwf	LCD_Create_Char@chardata
  4402  07AD  3000               	movlw	0
  4403  07AE  120A  158A  24F0  120A  118A  	fcall	_LCD_Create_Char
  4404                           
  4405                           ;main_Master.c: 134:     LCD_Create_Char(1, arrowr);
  4406  07B3  3019               	movlw	(low ((_arrowr-__stringbase)| (0+32768)))& (0+255)
  4407  07B4  1283               	bcf	3,5	;RP0=0, select bank0
  4408  07B5  1303               	bcf	3,6	;RP1=0, select bank0
  4409  07B6  00AE               	movwf	??_SetUp
  4410  07B7  082E               	movf	??_SetUp,w
  4411  07B8  00F5               	movwf	LCD_Create_Char@chardata
  4412  07B9  3001               	movlw	1
  4413  07BA  120A  158A  24F0  120A  118A  	fcall	_LCD_Create_Char
  4414                           
  4415                           ;main_Master.c: 135:     LCD_Create_Char(2, termometro);
  4416  07BF  3009               	movlw	(low ((_termometro-__stringbase)| (0+32768)))& (0+255)
  4417  07C0  1283               	bcf	3,5	;RP0=0, select bank0
  4418  07C1  1303               	bcf	3,6	;RP1=0, select bank0
  4419  07C2  00AE               	movwf	??_SetUp
  4420  07C3  082E               	movf	??_SetUp,w
  4421  07C4  00F5               	movwf	LCD_Create_Char@chardata
  4422  07C5  3002               	movlw	2
  4423  07C6  120A  158A  24F0  120A  118A  	fcall	_LCD_Create_Char
  4424                           
  4425                           ;main_Master.c: 136:     LCD_Create_Char(3, gota);
  4426  07CB  3001               	movlw	(low ((_gota-__stringbase)| (0+32768)))& (0+255)
  4427  07CC  1283               	bcf	3,5	;RP0=0, select bank0
  4428  07CD  1303               	bcf	3,6	;RP1=0, select bank0
  4429  07CE  00AE               	movwf	??_SetUp
  4430  07CF  082E               	movf	??_SetUp,w
  4431  07D0  00F5               	movwf	LCD_Create_Char@chardata
  4432  07D1  3003               	movlw	3
  4433  07D2  120A  158A  24F0  120A  118A  	fcall	_LCD_Create_Char
  4434                           
  4435                           ;main_Master.c: 137:     LCD_clear();
  4436  07D7  120A  158A  2472  120A  118A  	fcall	_LCD_clear
  4437                           
  4438                           ;main_Master.c: 138:     I2C_Master_Init(100000);
  4439  07DC  3000               	movlw	0
  4440  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  4441  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  4442  07DF  00A9               	movwf	I2C_Master_Init@c+3
  4443  07E0  3001               	movlw	1
  4444  07E1  00A8               	movwf	I2C_Master_Init@c+2
  4445  07E2  3086               	movlw	134
  4446  07E3  00A7               	movwf	I2C_Master_Init@c+1
  4447  07E4  30A0               	movlw	160
  4448  07E5  00A6               	movwf	I2C_Master_Init@c
  4449  07E6  120A  158A  25A7   	fcall	_I2C_Master_Init
  4450  07E9  0008               	return
  4451  07EA                     __end_of_SetUp:	
  4452                           
  4453                           	psect	text23
  4454  0560                     __ptext23:	
  4455 ;; *************** function _OSC_config *****************
  4456 ;; Defined at:
  4457 ;;		line 142 in file "main_Master.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;  frecuencia      4    2[COMMON] unsigned long 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;		None
  4462 ;; Return value:  Size  Location     Type
  4463 ;;                  1    wreg      void 
  4464 ;; Registers used:
  4465 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4471 ;;      Params:         4       0       0       0       0
  4472 ;;      Locals:         0       0       0       0       0
  4473 ;;      Temps:          0       0       0       0       0
  4474 ;;      Totals:         4       0       0       0       0
  4475 ;;Total ram usage:        4 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    1
  4478 ;; This function calls:
  4479 ;;		Nothing
  4480 ;; This function is called by:
  4481 ;;		_SetUp
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           
  4486                           ;psect for function _OSC_config
  4487  0560                     _OSC_config:	
  4488                           
  4489                           ;main_Master.c: 143:     switch(frecuencia){
  4490                           
  4491                           ;incstack = 0
  4492                           ; Regs used in _OSC_config: [wreg-fsr0h+status,2+status,0]
  4493  0560  2D9C               	goto	l2254
  4494  0561                     l2236:	
  4495                           
  4496                           ;main_Master.c: 145:             OSCCONbits.IRCF = 0b111;
  4497  0561  3070               	movlw	112
  4498  0562  1683               	bsf	3,5	;RP0=1, select bank1
  4499  0563  1303               	bcf	3,6	;RP1=0, select bank1
  4500  0564  048F               	iorwf	15,f	;volatile
  4501                           
  4502                           ;main_Master.c: 146:             break;
  4503  0565  0008               	return
  4504  0566                     l2238:	
  4505                           
  4506                           ;main_Master.c: 148:             OSCCONbits.IRCF = 0b110;
  4507  0566  1683               	bsf	3,5	;RP0=1, select bank1
  4508  0567  1303               	bcf	3,6	;RP1=0, select bank1
  4509  0568  080F               	movf	15,w	;volatile
  4510  0569  398F               	andlw	-113
  4511  056A  3860               	iorlw	96
  4512  056B  008F               	movwf	15	;volatile
  4513                           
  4514                           ;main_Master.c: 149:             break;
  4515  056C  0008               	return
  4516  056D                     l2240:	
  4517                           
  4518                           ;main_Master.c: 151:             OSCCONbits.IRCF = 0b101;
  4519  056D  1683               	bsf	3,5	;RP0=1, select bank1
  4520  056E  1303               	bcf	3,6	;RP1=0, select bank1
  4521  056F  080F               	movf	15,w	;volatile
  4522  0570  398F               	andlw	-113
  4523  0571  3850               	iorlw	80
  4524  0572  008F               	movwf	15	;volatile
  4525                           
  4526                           ;main_Master.c: 152:             break;
  4527  0573  0008               	return
  4528  0574                     l2242:	
  4529                           
  4530                           ;main_Master.c: 154:             OSCCONbits.IRCF = 0b100;
  4531  0574  1683               	bsf	3,5	;RP0=1, select bank1
  4532  0575  1303               	bcf	3,6	;RP1=0, select bank1
  4533  0576  080F               	movf	15,w	;volatile
  4534  0577  398F               	andlw	-113
  4535  0578  3840               	iorlw	64
  4536  0579  008F               	movwf	15	;volatile
  4537                           
  4538                           ;main_Master.c: 155:             break;
  4539  057A  0008               	return
  4540  057B                     l2244:	
  4541                           
  4542                           ;main_Master.c: 157:             OSCCONbits.IRCF = 0b011;
  4543  057B  1683               	bsf	3,5	;RP0=1, select bank1
  4544  057C  1303               	bcf	3,6	;RP1=0, select bank1
  4545  057D  080F               	movf	15,w	;volatile
  4546  057E  398F               	andlw	-113
  4547  057F  3830               	iorlw	48
  4548  0580  008F               	movwf	15	;volatile
  4549                           
  4550                           ;main_Master.c: 158:             break;
  4551  0581  0008               	return
  4552  0582                     l2246:	
  4553                           
  4554                           ;main_Master.c: 160:             OSCCONbits.IRCF = 0b010;
  4555  0582  1683               	bsf	3,5	;RP0=1, select bank1
  4556  0583  1303               	bcf	3,6	;RP1=0, select bank1
  4557  0584  080F               	movf	15,w	;volatile
  4558  0585  398F               	andlw	-113
  4559  0586  3820               	iorlw	32
  4560  0587  008F               	movwf	15	;volatile
  4561                           
  4562                           ;main_Master.c: 161:             break;
  4563  0588  0008               	return
  4564  0589                     l2248:	
  4565                           
  4566                           ;main_Master.c: 163:             OSCCONbits.IRCF = 0b001;
  4567  0589  1683               	bsf	3,5	;RP0=1, select bank1
  4568  058A  1303               	bcf	3,6	;RP1=0, select bank1
  4569  058B  080F               	movf	15,w	;volatile
  4570  058C  398F               	andlw	-113
  4571  058D  3810               	iorlw	16
  4572  058E  008F               	movwf	15	;volatile
  4573                           
  4574                           ;main_Master.c: 164:             break;
  4575  058F  0008               	return
  4576  0590                     l2250:	
  4577                           
  4578                           ;main_Master.c: 166:             OSCCONbits.IRCF = 0b000;
  4579  0590  308F               	movlw	-113
  4580  0591  1683               	bsf	3,5	;RP0=1, select bank1
  4581  0592  1303               	bcf	3,6	;RP1=0, select bank1
  4582  0593  058F               	andwf	15,f	;volatile
  4583                           
  4584                           ;main_Master.c: 167:             break;
  4585  0594  0008               	return
  4586  0595                     l2252:	
  4587                           
  4588                           ;main_Master.c: 169:             OSCCONbits.IRCF = 0b110;
  4589  0595  1683               	bsf	3,5	;RP0=1, select bank1
  4590  0596  1303               	bcf	3,6	;RP1=0, select bank1
  4591  0597  080F               	movf	15,w	;volatile
  4592  0598  398F               	andlw	-113
  4593  0599  3860               	iorlw	96
  4594  059A  008F               	movwf	15	;volatile
  4595                           
  4596                           ;main_Master.c: 170:     }
  4597  059B  0008               	return
  4598  059C                     l2254:	
  4599                           
  4600                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 9 sub-sw
      +                          itches
  4601                           ; Switch size 1, requested type "simple"
  4602                           ; Number of cases is 1, Range of values is 0 to 0
  4603                           ; switch strategies available:
  4604                           ; Name         Instructions Cycles
  4605                           ; simple_byte            4     3 (average)
  4606                           ; direct_byte           11     8 (fixed)
  4607                           ; jumptable            260     6 (fixed)
  4608                           ;	Chosen strategy is simple_byte
  4609  059C  0875               	movf	OSC_config@frecuencia+3,w
  4610  059D  3A00               	xorlw	0	; case 0
  4611  059E  1903               	skipnz
  4612  059F  2DF1               	goto	l3898
  4613  05A0  2D95               	goto	l2252
  4614  05A1                     l3882:	
  4615                           
  4616                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4617                           ; Switch size 1, requested type "simple"
  4618                           ; Number of cases is 1, Range of values is 125 to 125
  4619                           ; switch strategies available:
  4620                           ; Name         Instructions Cycles
  4621                           ; simple_byte            4     3 (average)
  4622                           ; direct_byte           14    11 (fixed)
  4623                           ; jumptable            263     9 (fixed)
  4624                           ;	Chosen strategy is simple_byte
  4625  05A1  0873               	movf	OSC_config@frecuencia+1,w
  4626  05A2  3A7D               	xorlw	125	; case 125
  4627  05A3  1903               	skipnz
  4628  05A4  2DA6               	goto	l3900
  4629  05A5  2D95               	goto	l2252
  4630  05A6                     l3900:	
  4631                           
  4632                           ; Switch size 1, requested type "simple"
  4633                           ; Number of cases is 1, Range of values is 0 to 0
  4634                           ; switch strategies available:
  4635                           ; Name         Instructions Cycles
  4636                           ; simple_byte            4     3 (average)
  4637                           ; direct_byte           11     8 (fixed)
  4638                           ; jumptable            260     6 (fixed)
  4639                           ;	Chosen strategy is simple_byte
  4640  05A6  0872               	movf	OSC_config@frecuencia,w
  4641  05A7  3A00               	xorlw	0	; case 0
  4642  05A8  1903               	skipnz
  4643  05A9  2D90               	goto	l2250
  4644  05AA  2D95               	goto	l2252
  4645  05AB                     l3884:	
  4646                           
  4647                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4648                           ; Switch size 1, requested type "simple"
  4649                           ; Number of cases is 1, Range of values is 232 to 232
  4650                           ; switch strategies available:
  4651                           ; Name         Instructions Cycles
  4652                           ; simple_byte            4     3 (average)
  4653                           ; direct_byte           14    11 (fixed)
  4654                           ; jumptable            263     9 (fixed)
  4655                           ;	Chosen strategy is simple_byte
  4656  05AB  0873               	movf	OSC_config@frecuencia+1,w
  4657  05AC  3AE8               	xorlw	232	; case 232
  4658  05AD  1903               	skipnz
  4659  05AE  2DB0               	goto	l3902
  4660  05AF  2D95               	goto	l2252
  4661  05B0                     l3902:	
  4662                           
  4663                           ; Switch size 1, requested type "simple"
  4664                           ; Number of cases is 1, Range of values is 72 to 72
  4665                           ; switch strategies available:
  4666                           ; Name         Instructions Cycles
  4667                           ; simple_byte            4     3 (average)
  4668                           ; direct_byte           14    11 (fixed)
  4669                           ; jumptable            263     9 (fixed)
  4670                           ;	Chosen strategy is simple_byte
  4671  05B0  0872               	movf	OSC_config@frecuencia,w
  4672  05B1  3A48               	xorlw	72	; case 72
  4673  05B2  1903               	skipnz
  4674  05B3  2D89               	goto	l2248
  4675  05B4  2D95               	goto	l2252
  4676  05B5                     l3886:	
  4677                           
  4678                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4679                           ; Switch size 1, requested type "simple"
  4680                           ; Number of cases is 1, Range of values is 208 to 208
  4681                           ; switch strategies available:
  4682                           ; Name         Instructions Cycles
  4683                           ; simple_byte            4     3 (average)
  4684                           ; direct_byte           14    11 (fixed)
  4685                           ; jumptable            263     9 (fixed)
  4686                           ;	Chosen strategy is simple_byte
  4687  05B5  0873               	movf	OSC_config@frecuencia+1,w
  4688  05B6  3AD0               	xorlw	208	; case 208
  4689  05B7  1903               	skipnz
  4690  05B8  2DBA               	goto	l3904
  4691  05B9  2D95               	goto	l2252
  4692  05BA                     l3904:	
  4693                           
  4694                           ; Switch size 1, requested type "simple"
  4695                           ; Number of cases is 1, Range of values is 144 to 144
  4696                           ; switch strategies available:
  4697                           ; Name         Instructions Cycles
  4698                           ; simple_byte            4     3 (average)
  4699                           ; direct_byte           14    11 (fixed)
  4700                           ; jumptable            263     9 (fixed)
  4701                           ;	Chosen strategy is simple_byte
  4702  05BA  0872               	movf	OSC_config@frecuencia,w
  4703  05BB  3A90               	xorlw	144	; case 144
  4704  05BC  1903               	skipnz
  4705  05BD  2D82               	goto	l2246
  4706  05BE  2D95               	goto	l2252
  4707  05BF                     l3888:	
  4708                           
  4709                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4710                           ; Switch size 1, requested type "simple"
  4711                           ; Number of cases is 1, Range of values is 161 to 161
  4712                           ; switch strategies available:
  4713                           ; Name         Instructions Cycles
  4714                           ; simple_byte            4     3 (average)
  4715                           ; direct_byte           14    11 (fixed)
  4716                           ; jumptable            263     9 (fixed)
  4717                           ;	Chosen strategy is simple_byte
  4718  05BF  0873               	movf	OSC_config@frecuencia+1,w
  4719  05C0  3AA1               	xorlw	161	; case 161
  4720  05C1  1903               	skipnz
  4721  05C2  2DC4               	goto	l3906
  4722  05C3  2D95               	goto	l2252
  4723  05C4                     l3906:	
  4724                           
  4725                           ; Switch size 1, requested type "simple"
  4726                           ; Number of cases is 1, Range of values is 32 to 32
  4727                           ; switch strategies available:
  4728                           ; Name         Instructions Cycles
  4729                           ; simple_byte            4     3 (average)
  4730                           ; direct_byte           14    11 (fixed)
  4731                           ; jumptable            263     9 (fixed)
  4732                           ;	Chosen strategy is simple_byte
  4733  05C4  0872               	movf	OSC_config@frecuencia,w
  4734  05C5  3A20               	xorlw	32	; case 32
  4735  05C6  1903               	skipnz
  4736  05C7  2D7B               	goto	l2244
  4737  05C8  2D95               	goto	l2252
  4738  05C9                     l3890:	
  4739                           
  4740                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4741                           ; Switch size 1, requested type "simple"
  4742                           ; Number of cases is 1, Range of values is 66 to 66
  4743                           ; switch strategies available:
  4744                           ; Name         Instructions Cycles
  4745                           ; simple_byte            4     3 (average)
  4746                           ; direct_byte           14    11 (fixed)
  4747                           ; jumptable            263     9 (fixed)
  4748                           ;	Chosen strategy is simple_byte
  4749  05C9  0873               	movf	OSC_config@frecuencia+1,w
  4750  05CA  3A42               	xorlw	66	; case 66
  4751  05CB  1903               	skipnz
  4752  05CC  2DCE               	goto	l3908
  4753  05CD  2D95               	goto	l2252
  4754  05CE                     l3908:	
  4755                           
  4756                           ; Switch size 1, requested type "simple"
  4757                           ; Number of cases is 1, Range of values is 64 to 64
  4758                           ; switch strategies available:
  4759                           ; Name         Instructions Cycles
  4760                           ; simple_byte            4     3 (average)
  4761                           ; direct_byte           14    11 (fixed)
  4762                           ; jumptable            263     9 (fixed)
  4763                           ;	Chosen strategy is simple_byte
  4764  05CE  0872               	movf	OSC_config@frecuencia,w
  4765  05CF  3A40               	xorlw	64	; case 64
  4766  05D0  1903               	skipnz
  4767  05D1  2D74               	goto	l2242
  4768  05D2  2D95               	goto	l2252
  4769  05D3                     l3892:	
  4770                           
  4771                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4772                           ; Switch size 1, requested type "simple"
  4773                           ; Number of cases is 1, Range of values is 132 to 132
  4774                           ; switch strategies available:
  4775                           ; Name         Instructions Cycles
  4776                           ; simple_byte            4     3 (average)
  4777                           ; direct_byte           14    11 (fixed)
  4778                           ; jumptable            263     9 (fixed)
  4779                           ;	Chosen strategy is simple_byte
  4780  05D3  0873               	movf	OSC_config@frecuencia+1,w
  4781  05D4  3A84               	xorlw	132	; case 132
  4782  05D5  1903               	skipnz
  4783  05D6  2DD8               	goto	l3910
  4784  05D7  2D95               	goto	l2252
  4785  05D8                     l3910:	
  4786                           
  4787                           ; Switch size 1, requested type "simple"
  4788                           ; Number of cases is 1, Range of values is 128 to 128
  4789                           ; switch strategies available:
  4790                           ; Name         Instructions Cycles
  4791                           ; simple_byte            4     3 (average)
  4792                           ; direct_byte           14    11 (fixed)
  4793                           ; jumptable            263     9 (fixed)
  4794                           ;	Chosen strategy is simple_byte
  4795  05D8  0872               	movf	OSC_config@frecuencia,w
  4796  05D9  3A80               	xorlw	128	; case 128
  4797  05DA  1903               	skipnz
  4798  05DB  2D6D               	goto	l2240
  4799  05DC  2D95               	goto	l2252
  4800  05DD                     l3894:	
  4801                           
  4802                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4803                           ; Switch size 1, requested type "simple"
  4804                           ; Number of cases is 1, Range of values is 9 to 9
  4805                           ; switch strategies available:
  4806                           ; Name         Instructions Cycles
  4807                           ; simple_byte            4     3 (average)
  4808                           ; direct_byte           14    11 (fixed)
  4809                           ; jumptable            263     9 (fixed)
  4810                           ;	Chosen strategy is simple_byte
  4811  05DD  0873               	movf	OSC_config@frecuencia+1,w
  4812  05DE  3A09               	xorlw	9	; case 9
  4813  05DF  1903               	skipnz
  4814  05E0  2DE2               	goto	l3912
  4815  05E1  2D95               	goto	l2252
  4816  05E2                     l3912:	
  4817                           
  4818                           ; Switch size 1, requested type "simple"
  4819                           ; Number of cases is 1, Range of values is 0 to 0
  4820                           ; switch strategies available:
  4821                           ; Name         Instructions Cycles
  4822                           ; simple_byte            4     3 (average)
  4823                           ; direct_byte           11     8 (fixed)
  4824                           ; jumptable            260     6 (fixed)
  4825                           ;	Chosen strategy is simple_byte
  4826  05E2  0872               	movf	OSC_config@frecuencia,w
  4827  05E3  3A00               	xorlw	0	; case 0
  4828  05E4  1903               	skipnz
  4829  05E5  2D66               	goto	l2238
  4830  05E6  2D95               	goto	l2252
  4831  05E7                     l3896:	
  4832                           
  4833                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4834                           ; Switch size 1, requested type "simple"
  4835                           ; Number of cases is 1, Range of values is 18 to 18
  4836                           ; switch strategies available:
  4837                           ; Name         Instructions Cycles
  4838                           ; simple_byte            4     3 (average)
  4839                           ; direct_byte           14    11 (fixed)
  4840                           ; jumptable            263     9 (fixed)
  4841                           ;	Chosen strategy is simple_byte
  4842  05E7  0873               	movf	OSC_config@frecuencia+1,w
  4843  05E8  3A12               	xorlw	18	; case 18
  4844  05E9  1903               	skipnz
  4845  05EA  2DEC               	goto	l3914
  4846  05EB  2D95               	goto	l2252
  4847  05EC                     l3914:	
  4848                           
  4849                           ; Switch size 1, requested type "simple"
  4850                           ; Number of cases is 1, Range of values is 0 to 0
  4851                           ; switch strategies available:
  4852                           ; Name         Instructions Cycles
  4853                           ; simple_byte            4     3 (average)
  4854                           ; direct_byte           11     8 (fixed)
  4855                           ; jumptable            260     6 (fixed)
  4856                           ;	Chosen strategy is simple_byte
  4857  05EC  0872               	movf	OSC_config@frecuencia,w
  4858  05ED  3A00               	xorlw	0	; case 0
  4859  05EE  1903               	skipnz
  4860  05EF  2D61               	goto	l2236
  4861  05F0  2D95               	goto	l2252
  4862  05F1                     l3898:	
  4863                           
  4864                           ; Switch size 1, requested type "simple"
  4865                           ; Number of cases is 8, Range of values is 0 to 122
  4866                           ; switch strategies available:
  4867                           ; Name         Instructions Cycles
  4868                           ; simple_byte           25    13 (average)
  4869                           ; jumptable            260     6 (fixed)
  4870                           ;	Chosen strategy is simple_byte
  4871  05F1  0874               	movf	OSC_config@frecuencia+2,w
  4872  05F2  3A00               	xorlw	0	; case 0
  4873  05F3  1903               	skipnz
  4874  05F4  2DA1               	goto	l3882
  4875  05F5  3A01               	xorlw	1	; case 1
  4876  05F6  1903               	skipnz
  4877  05F7  2DAB               	goto	l3884
  4878  05F8  3A02               	xorlw	2	; case 3
  4879  05F9  1903               	skipnz
  4880  05FA  2DB5               	goto	l3886
  4881  05FB  3A04               	xorlw	4	; case 7
  4882  05FC  1903               	skipnz
  4883  05FD  2DBF               	goto	l3888
  4884  05FE  3A08               	xorlw	8	; case 15
  4885  05FF  1903               	skipnz
  4886  0600  2DC9               	goto	l3890
  4887  0601  3A11               	xorlw	17	; case 30
  4888  0602  1903               	skipnz
  4889  0603  2DD3               	goto	l3892
  4890  0604  3A23               	xorlw	35	; case 61
  4891  0605  1903               	skipnz
  4892  0606  2DDD               	goto	l3894
  4893  0607  3A47               	xorlw	71	; case 122
  4894  0608  1903               	skipnz
  4895  0609  2DE7               	goto	l3896
  4896  060A  2D95               	goto	l2252
  4897  060B  0008               	return
  4898  060C                     __end_of_OSC_config:	
  4899                           
  4900                           	psect	text24
  4901  0691                     __ptext24:	
  4902 ;; *************** function _LCD_init *****************
  4903 ;; Defined at:
  4904 ;;		line 44 in file "LCD_8bits.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;		None
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;		None
  4909 ;; Return value:  Size  Location     Type
  4910 ;;                  1    wreg      void 
  4911 ;; Registers used:
  4912 ;;		wreg, status,2, status,0, pclath, cstack
  4913 ;; Tracked objects:
  4914 ;;		On entry : 0/0
  4915 ;;		On exit  : 0/0
  4916 ;;		Unchanged: 0/0
  4917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4918 ;;      Params:         0       0       0       0       0
  4919 ;;      Locals:         0       0       0       0       0
  4920 ;;      Temps:          2       0       0       0       0
  4921 ;;      Totals:         2       0       0       0       0
  4922 ;;Total ram usage:        2 bytes
  4923 ;; Hardware stack levels used:    1
  4924 ;; Hardware stack levels required when called:    2
  4925 ;; This function calls:
  4926 ;;		_LCD_Cmd
  4927 ;; This function is called by:
  4928 ;;		_SetUp
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           
  4933                           ;psect for function _LCD_init
  4934  0691                     _LCD_init:	
  4935                           
  4936                           ;LCD_8bits.c: 45:     _delay((unsigned long)((20)*(8000000/4000.0)));
  4937                           
  4938                           ;incstack = 0
  4939                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  4940  0691  3034               	movlw	52
  4941  0692  00F6               	movwf	??_LCD_init+1
  4942  0693  30F1               	movlw	241
  4943  0694  00F5               	movwf	??_LCD_init
  4944  0695                     u1467:	
  4945  0695  0BF5               	decfsz	??_LCD_init,f
  4946  0696  2E95               	goto	u1467
  4947  0697  0BF6               	decfsz	??_LCD_init+1,f
  4948  0698  2E95               	goto	u1467
  4949  0699  2E9A               	nop2
  4950                           
  4951                           ;LCD_8bits.c: 46:     LCD_Cmd(0x30);
  4952  069A  3030               	movlw	48
  4953  069B  120A  158A  2574  120A  118A  	fcall	_LCD_Cmd
  4954                           
  4955                           ;LCD_8bits.c: 47:     _delay((unsigned long)((5)*(8000000/4000.0)));
  4956  06A0  300D               	movlw	13
  4957  06A1  00F6               	movwf	??_LCD_init+1
  4958  06A2  30FB               	movlw	251
  4959  06A3  00F5               	movwf	??_LCD_init
  4960  06A4                     u1477:	
  4961  06A4  0BF5               	decfsz	??_LCD_init,f
  4962  06A5  2EA4               	goto	u1477
  4963  06A6  0BF6               	decfsz	??_LCD_init+1,f
  4964  06A7  2EA4               	goto	u1477
  4965  06A8  2EA9               	nop2
  4966                           
  4967                           ;LCD_8bits.c: 48:     LCD_Cmd(0x30);
  4968  06A9  3030               	movlw	48
  4969  06AA  120A  158A  2574  120A  118A  	fcall	_LCD_Cmd
  4970                           
  4971                           ;LCD_8bits.c: 49:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  4972  06AF  3042               	movlw	66
  4973  06B0  00F5               	movwf	??_LCD_init
  4974  06B1                     u1487:	
  4975  06B1  0BF5               	decfsz	??_LCD_init,f
  4976  06B2  2EB1               	goto	u1487
  4977  06B3  0000               	nop
  4978                           
  4979                           ;LCD_8bits.c: 50:     LCD_Cmd(0x30);
  4980  06B4  3030               	movlw	48
  4981  06B5  120A  158A  2574  120A  118A  	fcall	_LCD_Cmd
  4982                           
  4983                           ;LCD_8bits.c: 51:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  4984  06BA  3042               	movlw	66
  4985  06BB  00F5               	movwf	??_LCD_init
  4986  06BC                     u1497:	
  4987  06BC  0BF5               	decfsz	??_LCD_init,f
  4988  06BD  2EBC               	goto	u1497
  4989  06BE  0000               	nop
  4990                           
  4991                           ;LCD_8bits.c: 52:     LCD_Cmd(0x38);
  4992  06BF  3038               	movlw	56
  4993  06C0  120A  158A  2574  120A  118A  	fcall	_LCD_Cmd
  4994                           
  4995                           ;LCD_8bits.c: 53:     _delay((unsigned long)((53)*(8000000/4000000.0)));
  4996  06C5  3023               	movlw	35
  4997  06C6  00F5               	movwf	??_LCD_init
  4998  06C7                     u1507:	
  4999  06C7  0BF5               	decfsz	??_LCD_init,f
  5000  06C8  2EC7               	goto	u1507
  5001                           
  5002                           ;LCD_8bits.c: 54:     LCD_Cmd(0x08);
  5003  06C9  3008               	movlw	8
  5004  06CA  120A  158A  2574  120A  118A  	fcall	_LCD_Cmd
  5005                           
  5006                           ;LCD_8bits.c: 55:     _delay((unsigned long)((53)*(8000000/4000000.0)));
  5007  06CF  3023               	movlw	35
  5008  06D0  00F5               	movwf	??_LCD_init
  5009  06D1                     u1517:	
  5010  06D1  0BF5               	decfsz	??_LCD_init,f
  5011  06D2  2ED1               	goto	u1517
  5012                           
  5013                           ;LCD_8bits.c: 56:     LCD_Cmd(0x01);
  5014  06D3  3001               	movlw	1
  5015  06D4  120A  158A  2574  120A  118A  	fcall	_LCD_Cmd
  5016                           
  5017                           ;LCD_8bits.c: 57:     _delay((unsigned long)((3)*(8000000/4000.0)));
  5018  06D9  3008               	movlw	8
  5019  06DA  00F6               	movwf	??_LCD_init+1
  5020  06DB  30C9               	movlw	201
  5021  06DC  00F5               	movwf	??_LCD_init
  5022  06DD                     u1527:	
  5023  06DD  0BF5               	decfsz	??_LCD_init,f
  5024  06DE  2EDD               	goto	u1527
  5025  06DF  0BF6               	decfsz	??_LCD_init+1,f
  5026  06E0  2EDD               	goto	u1527
  5027  06E1  2EE2               	nop2
  5028                           
  5029                           ;LCD_8bits.c: 58:     LCD_Cmd(0x06);
  5030  06E2  3006               	movlw	6
  5031  06E3  120A  158A  2574  120A  118A  	fcall	_LCD_Cmd
  5032                           
  5033                           ;LCD_8bits.c: 59:     _delay((unsigned long)((53)*(8000000/4000000.0)));
  5034  06E8  3023               	movlw	35
  5035  06E9  00F5               	movwf	??_LCD_init
  5036  06EA                     u1537:	
  5037  06EA  0BF5               	decfsz	??_LCD_init,f
  5038  06EB  2EEA               	goto	u1537
  5039                           
  5040                           ;LCD_8bits.c: 60:     LCD_Cmd(0x0C);
  5041  06EC  300C               	movlw	12
  5042  06ED  120A  158A  2574  120A  118A  	fcall	_LCD_Cmd
  5043                           
  5044                           ;LCD_8bits.c: 61:     _delay((unsigned long)((53)*(8000000/4000000.0)));
  5045  06F2  3023               	movlw	35
  5046  06F3  00F5               	movwf	??_LCD_init
  5047  06F4                     u1547:	
  5048  06F4  0BF5               	decfsz	??_LCD_init,f
  5049  06F5  2EF4               	goto	u1547
  5050  06F6  0008               	return
  5051  06F7                     __end_of_LCD_init:	
  5052                           
  5053                           	psect	text25
  5054  0C72                     __ptext25:	
  5055 ;; *************** function _LCD_clear *****************
  5056 ;; Defined at:
  5057 ;;		line 32 in file "LCD_8bits.c"
  5058 ;; Parameters:    Size  Location     Type
  5059 ;;		None
  5060 ;; Auto vars:     Size  Location     Type
  5061 ;;		None
  5062 ;; Return value:  Size  Location     Type
  5063 ;;                  1    wreg      void 
  5064 ;; Registers used:
  5065 ;;		wreg, status,2, status,0, pclath, cstack
  5066 ;; Tracked objects:
  5067 ;;		On entry : 0/0
  5068 ;;		On exit  : 0/0
  5069 ;;		Unchanged: 0/0
  5070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5071 ;;      Params:         0       0       0       0       0
  5072 ;;      Locals:         0       0       0       0       0
  5073 ;;      Temps:          2       0       0       0       0
  5074 ;;      Totals:         2       0       0       0       0
  5075 ;;Total ram usage:        2 bytes
  5076 ;; Hardware stack levels used:    1
  5077 ;; Hardware stack levels required when called:    2
  5078 ;; This function calls:
  5079 ;;		_LCD_Cmd
  5080 ;; This function is called by:
  5081 ;;		_SetUp
  5082 ;;		_pressBoton1
  5083 ;;		_pressBoton2
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           
  5088                           ;psect for function _LCD_clear
  5089  0C72                     _LCD_clear:	
  5090                           
  5091                           ;LCD_8bits.c: 33:     LCD_Cmd(0x00);
  5092                           
  5093                           ;incstack = 0
  5094                           ; Regs used in _LCD_clear: [wreg+status,2+status,0+pclath+cstack]
  5095  0C72  3000               	movlw	0
  5096  0C73  120A  158A  2574  120A  158A  	fcall	_LCD_Cmd
  5097                           
  5098                           ;LCD_8bits.c: 34:     LCD_Cmd(0x01);
  5099  0C78  3001               	movlw	1
  5100  0C79  120A  158A  2574  120A  158A  	fcall	_LCD_Cmd
  5101                           
  5102                           ;LCD_8bits.c: 35:     _delay((unsigned long)((4)*(8000000/4000.0)));
  5103  0C7E  300B               	movlw	11
  5104  0C7F  00F6               	movwf	??_LCD_clear+1
  5105  0C80  3062               	movlw	98
  5106  0C81  00F5               	movwf	??_LCD_clear
  5107  0C82                     u1557:	
  5108  0C82  0BF5               	decfsz	??_LCD_clear,f
  5109  0C83  2C82               	goto	u1557
  5110  0C84  0BF6               	decfsz	??_LCD_clear+1,f
  5111  0C85  2C82               	goto	u1557
  5112  0C86  0000               	nop
  5113  0C87  0008               	return
  5114  0C88                     __end_of_LCD_clear:	
  5115                           
  5116                           	psect	text26
  5117  0CF0                     __ptext26:	
  5118 ;; *************** function _LCD_Create_Char *****************
  5119 ;; Defined at:
  5120 ;;		line 116 in file "LCD_8bits.c"
  5121 ;; Parameters:    Size  Location     Type
  5122 ;;  charnum         1    wreg     unsigned char 
  5123 ;;  chardata        1    5[COMMON] PTR const unsigned char 
  5124 ;;		 -> gota(8), termometro(8), arrowr(8), atilde(8), 
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;  charnum         1    7[COMMON] unsigned char 
  5127 ;;  n               1    8[COMMON] unsigned char 
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  1    wreg      void 
  5130 ;; Registers used:
  5131 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5137 ;;      Params:         1       0       0       0       0
  5138 ;;      Locals:         2       0       0       0       0
  5139 ;;      Temps:          1       0       0       0       0
  5140 ;;      Totals:         4       0       0       0       0
  5141 ;;Total ram usage:        4 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    2
  5144 ;; This function calls:
  5145 ;;		_LCD_Cmd
  5146 ;;		_LCD_Write_Character
  5147 ;; This function is called by:
  5148 ;;		_SetUp
  5149 ;; This function uses a non-reentrant model
  5150 ;;
  5151                           
  5152                           
  5153                           ;psect for function _LCD_Create_Char
  5154  0CF0                     _LCD_Create_Char:	
  5155                           
  5156                           ;incstack = 0
  5157                           ; Regs used in _LCD_Create_Char: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5158                           ;LCD_Create_Char@charnum stored from wreg
  5159  0CF0  00F7               	movwf	LCD_Create_Char@charnum
  5160                           
  5161                           ;LCD_8bits.c: 117:  uint8_t n;;LCD_8bits.c: 118:  charnum &= 0x07;
  5162  0CF1  3007               	movlw	7
  5163  0CF2  00F6               	movwf	??_LCD_Create_Char
  5164  0CF3  0876               	movf	??_LCD_Create_Char,w
  5165  0CF4  05F7               	andwf	LCD_Create_Char@charnum,f
  5166                           
  5167                           ;LCD_8bits.c: 119:  LCD_Cmd(0x40 | (charnum << 3));
  5168  0CF5  0877               	movf	LCD_Create_Char@charnum,w
  5169  0CF6  00F6               	movwf	??_LCD_Create_Char
  5170  0CF7  3002               	movlw	2
  5171  0CF8                     u965:	
  5172  0CF8  1003               	clrc
  5173  0CF9  0DF6               	rlf	??_LCD_Create_Char,f
  5174  0CFA  3EFF               	addlw	-1
  5175  0CFB  1D03               	skipz
  5176  0CFC  2CF8               	goto	u965
  5177  0CFD  1003               	clrc
  5178  0CFE  0D76               	rlf	??_LCD_Create_Char,w
  5179  0CFF  3840               	iorlw	64
  5180  0D00  120A  158A  2574  120A  158A  	fcall	_LCD_Cmd
  5181                           
  5182                           ;LCD_8bits.c: 120:  for (n = 0; n < 8; n++)
  5183  0D05  01F8               	clrf	LCD_Create_Char@n
  5184  0D06                     l2358:	
  5185                           
  5186                           ;LCD_8bits.c: 121:   LCD_Write_Character(chardata[n]);
  5187  0D06  0878               	movf	LCD_Create_Char@n,w
  5188  0D07  0775               	addwf	LCD_Create_Char@chardata,w
  5189  0D08  0084               	movwf	4
  5190  0D09  120A  118A  2700  120A  158A  	fcall	stringdir
  5191  0D0E  120A  158A  2440  120A  158A  	fcall	_LCD_Write_Character
  5192  0D13  3001               	movlw	1
  5193  0D14  00F6               	movwf	??_LCD_Create_Char
  5194  0D15  0876               	movf	??_LCD_Create_Char,w
  5195  0D16  07F8               	addwf	LCD_Create_Char@n,f
  5196  0D17  3008               	movlw	8
  5197  0D18  0278               	subwf	LCD_Create_Char@n,w
  5198  0D19  1803               	btfsc	3,0
  5199  0D1A  0008               	return
  5200  0D1B  2D06               	goto	l2358
  5201  0D1C                     __end_of_LCD_Create_Char:	
  5202                           
  5203                           	psect	text27
  5204  0C40                     __ptext27:	
  5205 ;; *************** function _LCD_Write_Character *****************
  5206 ;; Defined at:
  5207 ;;		line 64 in file "LCD_8bits.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;  caracter        1    wreg     unsigned char 
  5210 ;; Auto vars:     Size  Location     Type
  5211 ;;  caracter        1    3[COMMON] unsigned char 
  5212 ;; Return value:  Size  Location     Type
  5213 ;;                  1    wreg      void 
  5214 ;; Registers used:
  5215 ;;		wreg
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5221 ;;      Params:         0       0       0       0       0
  5222 ;;      Locals:         1       0       0       0       0
  5223 ;;      Temps:          1       0       0       0       0
  5224 ;;      Totals:         2       0       0       0       0
  5225 ;;Total ram usage:        2 bytes
  5226 ;; Hardware stack levels used:    1
  5227 ;; Hardware stack levels required when called:    1
  5228 ;; This function calls:
  5229 ;;		Nothing
  5230 ;; This function is called by:
  5231 ;;		_display_Uhrzeit
  5232 ;;		_display_Datum
  5233 ;;		_mostrarLCD
  5234 ;;		_LCD_Write_String
  5235 ;;		_LCD_Create_Char
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           
  5240                           ;psect for function _LCD_Write_Character
  5241  0C40                     _LCD_Write_Character:	
  5242                           
  5243                           ;incstack = 0
  5244                           ; Regs used in _LCD_Write_Character: [wreg]
  5245                           ;LCD_Write_Character@caracter stored from wreg
  5246  0C40  00F3               	movwf	LCD_Write_Character@caracter
  5247                           
  5248                           ;LCD_8bits.c: 65:     PORTCbits.RC0 = 1;
  5249  0C41  1283               	bcf	3,5	;RP0=0, select bank0
  5250  0C42  1303               	bcf	3,6	;RP1=0, select bank0
  5251  0C43  1407               	bsf	7,0	;volatile
  5252                           
  5253                           ;LCD_8bits.c: 67:     PORTD = caracter;
  5254  0C44  0873               	movf	LCD_Write_Character@caracter,w
  5255  0C45  0088               	movwf	8	;volatile
  5256                           
  5257                           ;LCD_8bits.c: 68:     PORTCbits.RC1 = 1;
  5258  0C46  1487               	bsf	7,1	;volatile
  5259                           
  5260                           ;LCD_8bits.c: 69:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  5261  0C47  301A               	movlw	26
  5262  0C48  00F2               	movwf	??_LCD_Write_Character
  5263  0C49                     u1567:	
  5264  0C49  0BF2               	decfsz	??_LCD_Write_Character,f
  5265  0C4A  2C49               	goto	u1567
  5266  0C4B  0000               	nop
  5267                           
  5268                           ;LCD_8bits.c: 70:     PORTCbits.RC1 = 0;
  5269  0C4C  1283               	bcf	3,5	;RP0=0, select bank0
  5270  0C4D  1303               	bcf	3,6	;RP1=0, select bank0
  5271  0C4E  1087               	bcf	7,1	;volatile
  5272  0C4F  0008               	return
  5273  0C50                     __end_of_LCD_Write_Character:	
  5274                           
  5275                           	psect	text28
  5276  0D74                     __ptext28:	
  5277 ;; *************** function _LCD_Cmd *****************
  5278 ;; Defined at:
  5279 ;;		line 21 in file "LCD_8bits.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;  comando         1    wreg     unsigned char 
  5282 ;; Auto vars:     Size  Location     Type
  5283 ;;  comando         1    4[COMMON] unsigned char 
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  1    wreg      void 
  5286 ;; Registers used:
  5287 ;;		wreg
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5293 ;;      Params:         0       0       0       0       0
  5294 ;;      Locals:         1       0       0       0       0
  5295 ;;      Temps:          2       0       0       0       0
  5296 ;;      Totals:         3       0       0       0       0
  5297 ;;Total ram usage:        3 bytes
  5298 ;; Hardware stack levels used:    1
  5299 ;; Hardware stack levels required when called:    1
  5300 ;; This function calls:
  5301 ;;		Nothing
  5302 ;; This function is called by:
  5303 ;;		_LCD_clear
  5304 ;;		_LCD_init
  5305 ;;		_LCD_Set_Cursor
  5306 ;;		_LCD_Create_Char
  5307 ;;		_LCD_home
  5308 ;;		_LCD_Shift_links
  5309 ;;		_LCD_Shift_rechts
  5310 ;;		_LCD_Cursor_rechts
  5311 ;;		_LCD_Cursor_links
  5312 ;; This function uses a non-reentrant model
  5313 ;;
  5314                           
  5315                           
  5316                           ;psect for function _LCD_Cmd
  5317  0D74                     _LCD_Cmd:	
  5318                           
  5319                           ;incstack = 0
  5320                           ; Regs used in _LCD_Cmd: [wreg]
  5321                           ;LCD_Cmd@comando stored from wreg
  5322  0D74  00F4               	movwf	LCD_Cmd@comando
  5323                           
  5324                           ;LCD_8bits.c: 22:     PORTCbits.RC0 = 0;
  5325  0D75  1283               	bcf	3,5	;RP0=0, select bank0
  5326  0D76  1303               	bcf	3,6	;RP1=0, select bank0
  5327  0D77  1007               	bcf	7,0	;volatile
  5328                           
  5329                           ;LCD_8bits.c: 23:     _delay((unsigned long)((5)*(8000000/4000.0)));
  5330  0D78  300D               	movlw	13
  5331  0D79  00F3               	movwf	??_LCD_Cmd+1
  5332  0D7A  30FB               	movlw	251
  5333  0D7B  00F2               	movwf	??_LCD_Cmd
  5334  0D7C                     u1577:	
  5335  0D7C  0BF2               	decfsz	??_LCD_Cmd,f
  5336  0D7D  2D7C               	goto	u1577
  5337  0D7E  0BF3               	decfsz	??_LCD_Cmd+1,f
  5338  0D7F  2D7C               	goto	u1577
  5339  0D80  2D81               	nop2
  5340                           
  5341                           ;LCD_8bits.c: 24:     PORTCbits.RC1 = 1;
  5342  0D81  1283               	bcf	3,5	;RP0=0, select bank0
  5343  0D82  1303               	bcf	3,6	;RP1=0, select bank0
  5344  0D83  1487               	bsf	7,1	;volatile
  5345                           
  5346                           ;LCD_8bits.c: 25:     _delay((unsigned long)((5)*(8000000/4000.0)));
  5347  0D84  300D               	movlw	13
  5348  0D85  00F3               	movwf	??_LCD_Cmd+1
  5349  0D86  30FB               	movlw	251
  5350  0D87  00F2               	movwf	??_LCD_Cmd
  5351  0D88                     u1587:	
  5352  0D88  0BF2               	decfsz	??_LCD_Cmd,f
  5353  0D89  2D88               	goto	u1587
  5354  0D8A  0BF3               	decfsz	??_LCD_Cmd+1,f
  5355  0D8B  2D88               	goto	u1587
  5356  0D8C  2D8D               	nop2
  5357                           
  5358                           ;LCD_8bits.c: 26:     PORTD = comando;
  5359  0D8D  0874               	movf	LCD_Cmd@comando,w
  5360  0D8E  1283               	bcf	3,5	;RP0=0, select bank0
  5361  0D8F  1303               	bcf	3,6	;RP1=0, select bank0
  5362  0D90  0088               	movwf	8	;volatile
  5363                           
  5364                           ;LCD_8bits.c: 27:     _delay((unsigned long)((5)*(8000000/4000.0)));
  5365  0D91  300D               	movlw	13
  5366  0D92  00F3               	movwf	??_LCD_Cmd+1
  5367  0D93  30FB               	movlw	251
  5368  0D94  00F2               	movwf	??_LCD_Cmd
  5369  0D95                     u1597:	
  5370  0D95  0BF2               	decfsz	??_LCD_Cmd,f
  5371  0D96  2D95               	goto	u1597
  5372  0D97  0BF3               	decfsz	??_LCD_Cmd+1,f
  5373  0D98  2D95               	goto	u1597
  5374  0D99  2D9A               	nop2
  5375                           
  5376                           ;LCD_8bits.c: 28:     PORTCbits.RC1 = 0;
  5377  0D9A  1283               	bcf	3,5	;RP0=0, select bank0
  5378  0D9B  1303               	bcf	3,6	;RP1=0, select bank0
  5379  0D9C  1087               	bcf	7,1	;volatile
  5380                           
  5381                           ;LCD_8bits.c: 29:     _delay((unsigned long)((5)*(8000000/4000.0)));
  5382  0D9D  300D               	movlw	13
  5383  0D9E  00F3               	movwf	??_LCD_Cmd+1
  5384  0D9F  30FB               	movlw	251
  5385  0DA0  00F2               	movwf	??_LCD_Cmd
  5386  0DA1                     u1607:	
  5387  0DA1  0BF2               	decfsz	??_LCD_Cmd,f
  5388  0DA2  2DA1               	goto	u1607
  5389  0DA3  0BF3               	decfsz	??_LCD_Cmd+1,f
  5390  0DA4  2DA1               	goto	u1607
  5391  0DA5  2DA6               	nop2
  5392  0DA6  0008               	return
  5393  0DA7                     __end_of_LCD_Cmd:	
  5394                           
  5395                           	psect	text29
  5396  0DA7                     __ptext29:	
  5397 ;; *************** function _I2C_Master_Init *****************
  5398 ;; Defined at:
  5399 ;;		line 16 in file "I2C.c"
  5400 ;; Parameters:    Size  Location     Type
  5401 ;;  c               4    6[BANK0 ] const unsigned long 
  5402 ;; Auto vars:     Size  Location     Type
  5403 ;;		None
  5404 ;; Return value:  Size  Location     Type
  5405 ;;                  1    wreg      void 
  5406 ;; Registers used:
  5407 ;;		wreg, status,2, status,0, pclath, cstack
  5408 ;; Tracked objects:
  5409 ;;		On entry : 0/0
  5410 ;;		On exit  : 0/0
  5411 ;;		Unchanged: 0/0
  5412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5413 ;;      Params:         0       4       0       0       0
  5414 ;;      Locals:         0       0       0       0       0
  5415 ;;      Temps:          0       4       0       0       0
  5416 ;;      Totals:         0       8       0       0       0
  5417 ;;Total ram usage:        8 bytes
  5418 ;; Hardware stack levels used:    1
  5419 ;; Hardware stack levels required when called:    2
  5420 ;; This function calls:
  5421 ;;		___lldiv
  5422 ;; This function is called by:
  5423 ;;		_SetUp
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           
  5428                           ;psect for function _I2C_Master_Init
  5429  0DA7                     _I2C_Master_Init:	
  5430                           
  5431                           ;I2C.c: 16: void I2C_Master_Init(const unsigned long c);I2C.c: 17: {;I2C.c: 18:     SSPC
      +                          ON = 0b00101000;
  5432                           
  5433                           ;incstack = 0
  5434                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  5435  0DA7  3028               	movlw	40
  5436  0DA8  1283               	bcf	3,5	;RP0=0, select bank0
  5437  0DA9  1303               	bcf	3,6	;RP1=0, select bank0
  5438  0DAA  0094               	movwf	20	;volatile
  5439                           
  5440                           ;I2C.c: 19:     SSPCON2 = 0;
  5441  0DAB  1683               	bsf	3,5	;RP0=1, select bank1
  5442  0DAC  1303               	bcf	3,6	;RP1=0, select bank1
  5443  0DAD  0191               	clrf	17	;volatile
  5444                           
  5445                           ;I2C.c: 20:     SSPADD = (8000000/(4*c))-1;
  5446  0DAE  1283               	bcf	3,5	;RP0=0, select bank0
  5447  0DAF  1303               	bcf	3,6	;RP1=0, select bank0
  5448  0DB0  0826               	movf	I2C_Master_Init@c,w
  5449  0DB1  00AA               	movwf	??_I2C_Master_Init
  5450  0DB2  0827               	movf	I2C_Master_Init@c+1,w
  5451  0DB3  00AB               	movwf	??_I2C_Master_Init+1
  5452  0DB4  0828               	movf	I2C_Master_Init@c+2,w
  5453  0DB5  00AC               	movwf	??_I2C_Master_Init+2
  5454  0DB6  0829               	movf	I2C_Master_Init@c+3,w
  5455  0DB7  00AD               	movwf	??_I2C_Master_Init+3
  5456  0DB8  3002               	movlw	2
  5457  0DB9                     u1375:	
  5458  0DB9  1003               	clrc
  5459  0DBA  0DAA               	rlf	??_I2C_Master_Init,f
  5460  0DBB  0DAB               	rlf	??_I2C_Master_Init+1,f
  5461  0DBC  0DAC               	rlf	??_I2C_Master_Init+2,f
  5462  0DBD  0DAD               	rlf	??_I2C_Master_Init+3,f
  5463  0DBE  3EFF               	addlw	-1
  5464  0DBF  1D03               	skipz
  5465  0DC0  2DB9               	goto	u1375
  5466  0DC1  082D               	movf	??_I2C_Master_Init+3,w
  5467  0DC2  00F5               	movwf	___lldiv@divisor+3
  5468  0DC3  082C               	movf	??_I2C_Master_Init+2,w
  5469  0DC4  00F4               	movwf	___lldiv@divisor+2
  5470  0DC5  082B               	movf	??_I2C_Master_Init+1,w
  5471  0DC6  00F3               	movwf	___lldiv@divisor+1
  5472  0DC7  082A               	movf	??_I2C_Master_Init,w
  5473  0DC8  00F2               	movwf	___lldiv@divisor
  5474  0DC9  3000               	movlw	0
  5475  0DCA  00F9               	movwf	___lldiv@dividend+3
  5476  0DCB  307A               	movlw	122
  5477  0DCC  00F8               	movwf	___lldiv@dividend+2
  5478  0DCD  3012               	movlw	18
  5479  0DCE  00F7               	movwf	___lldiv@dividend+1
  5480  0DCF  3000               	movlw	0
  5481  0DD0  00F6               	movwf	___lldiv@dividend
  5482  0DD1  120A  158A  273D   	fcall	___lldiv
  5483  0DD4  0872               	movf	?___lldiv,w
  5484  0DD5  3EFF               	addlw	255
  5485  0DD6  1683               	bsf	3,5	;RP0=1, select bank1
  5486  0DD7  1303               	bcf	3,6	;RP1=0, select bank1
  5487  0DD8  0093               	movwf	19	;volatile
  5488                           
  5489                           ;I2C.c: 21:     SSPSTAT = 0;
  5490  0DD9  0194               	clrf	20	;volatile
  5491                           
  5492                           ;I2C.c: 22:     TRISCbits.TRISC3 = 1;
  5493  0DDA  1587               	bsf	7,3	;volatile
  5494                           
  5495                           ;I2C.c: 23:     TRISCbits.TRISC4 = 1;
  5496  0DDB  1607               	bsf	7,4	;volatile
  5497  0DDC  0008               	return
  5498  0DDD                     __end_of_I2C_Master_Init:	
  5499                           
  5500                           	psect	text30
  5501  0F3D                     __ptext30:	
  5502 ;; *************** function ___lldiv *****************
  5503 ;; Defined at:
  5504 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;  divisor         4    2[COMMON] unsigned long 
  5507 ;;  dividend        4    6[COMMON] unsigned long 
  5508 ;; Auto vars:     Size  Location     Type
  5509 ;;  quotient        4    1[BANK0 ] unsigned long 
  5510 ;;  counter         1    5[BANK0 ] unsigned char 
  5511 ;; Return value:  Size  Location     Type
  5512 ;;                  4    2[COMMON] unsigned long 
  5513 ;; Registers used:
  5514 ;;		wreg, status,2, status,0
  5515 ;; Tracked objects:
  5516 ;;		On entry : 0/0
  5517 ;;		On exit  : 0/0
  5518 ;;		Unchanged: 0/0
  5519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5520 ;;      Params:         8       0       0       0       0
  5521 ;;      Locals:         0       5       0       0       0
  5522 ;;      Temps:          0       1       0       0       0
  5523 ;;      Totals:         8       6       0       0       0
  5524 ;;Total ram usage:       14 bytes
  5525 ;; Hardware stack levels used:    1
  5526 ;; Hardware stack levels required when called:    1
  5527 ;; This function calls:
  5528 ;;		Nothing
  5529 ;; This function is called by:
  5530 ;;		_I2C_Master_Init
  5531 ;; This function uses a non-reentrant model
  5532 ;;
  5533                           
  5534                           
  5535                           ;psect for function ___lldiv
  5536  0F3D                     ___lldiv:	
  5537                           
  5538                           ;incstack = 0
  5539                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5540  0F3D  3000               	movlw	0
  5541  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  5542  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
  5543  0F40  00A4               	movwf	___lldiv@quotient+3
  5544  0F41  3000               	movlw	0
  5545  0F42  00A3               	movwf	___lldiv@quotient+2
  5546  0F43  3000               	movlw	0
  5547  0F44  00A2               	movwf	___lldiv@quotient+1
  5548  0F45  3000               	movlw	0
  5549  0F46  00A1               	movwf	___lldiv@quotient
  5550  0F47  0875               	movf	___lldiv@divisor+3,w
  5551  0F48  0474               	iorwf	___lldiv@divisor+2,w
  5552  0F49  0473               	iorwf	___lldiv@divisor+1,w
  5553  0F4A  0472               	iorwf	___lldiv@divisor,w
  5554  0F4B  1903               	skipnz
  5555  0F4C  2F94               	goto	l3176
  5556  0F4D  01A5               	clrf	___lldiv@counter
  5557  0F4E  0AA5               	incf	___lldiv@counter,f
  5558  0F4F                     l3162:	
  5559  0F4F  1BF5               	btfsc	___lldiv@divisor+3,7
  5560  0F50  2F5F               	goto	l3164
  5561  0F51  3001               	movlw	1
  5562  0F52  00A0               	movwf	??___lldiv
  5563  0F53                     u1215:	
  5564  0F53  1003               	clrc
  5565  0F54  0DF2               	rlf	___lldiv@divisor,f
  5566  0F55  0DF3               	rlf	___lldiv@divisor+1,f
  5567  0F56  0DF4               	rlf	___lldiv@divisor+2,f
  5568  0F57  0DF5               	rlf	___lldiv@divisor+3,f
  5569  0F58  0BA0               	decfsz	??___lldiv,f
  5570  0F59  2F53               	goto	u1215
  5571  0F5A  3001               	movlw	1
  5572  0F5B  00A0               	movwf	??___lldiv
  5573  0F5C  0820               	movf	??___lldiv,w
  5574  0F5D  07A5               	addwf	___lldiv@counter,f
  5575  0F5E  2F4F               	goto	l3162
  5576  0F5F                     l3164:	
  5577  0F5F  3001               	movlw	1
  5578  0F60  00A0               	movwf	??___lldiv
  5579  0F61                     u1235:	
  5580  0F61  1003               	clrc
  5581  0F62  0DA1               	rlf	___lldiv@quotient,f
  5582  0F63  0DA2               	rlf	___lldiv@quotient+1,f
  5583  0F64  0DA3               	rlf	___lldiv@quotient+2,f
  5584  0F65  0DA4               	rlf	___lldiv@quotient+3,f
  5585  0F66  0BA0               	decfsz	??___lldiv,f
  5586  0F67  2F61               	goto	u1235
  5587  0F68  0875               	movf	___lldiv@divisor+3,w
  5588  0F69  0279               	subwf	___lldiv@dividend+3,w
  5589  0F6A  1D03               	skipz
  5590  0F6B  2F76               	goto	u1245
  5591  0F6C  0874               	movf	___lldiv@divisor+2,w
  5592  0F6D  0278               	subwf	___lldiv@dividend+2,w
  5593  0F6E  1D03               	skipz
  5594  0F6F  2F76               	goto	u1245
  5595  0F70  0873               	movf	___lldiv@divisor+1,w
  5596  0F71  0277               	subwf	___lldiv@dividend+1,w
  5597  0F72  1D03               	skipz
  5598  0F73  2F76               	goto	u1245
  5599  0F74  0872               	movf	___lldiv@divisor,w
  5600  0F75  0276               	subwf	___lldiv@dividend,w
  5601  0F76                     u1245:	
  5602  0F76  1C03               	skipc
  5603  0F77  2F87               	goto	l3172
  5604  0F78  0872               	movf	___lldiv@divisor,w
  5605  0F79  02F6               	subwf	___lldiv@dividend,f
  5606  0F7A  0873               	movf	___lldiv@divisor+1,w
  5607  0F7B  1C03               	skipc
  5608  0F7C  0F73               	incfsz	___lldiv@divisor+1,w
  5609  0F7D  02F7               	subwf	___lldiv@dividend+1,f
  5610  0F7E  0874               	movf	___lldiv@divisor+2,w
  5611  0F7F  1C03               	skipc
  5612  0F80  0F74               	incfsz	___lldiv@divisor+2,w
  5613  0F81  02F8               	subwf	___lldiv@dividend+2,f
  5614  0F82  0875               	movf	___lldiv@divisor+3,w
  5615  0F83  1C03               	skipc
  5616  0F84  0F75               	incfsz	___lldiv@divisor+3,w
  5617  0F85  02F9               	subwf	___lldiv@dividend+3,f
  5618  0F86  1421               	bsf	___lldiv@quotient,0
  5619  0F87                     l3172:	
  5620  0F87  3001               	movlw	1
  5621  0F88                     u1255:	
  5622  0F88  1003               	clrc
  5623  0F89  0CF5               	rrf	___lldiv@divisor+3,f
  5624  0F8A  0CF4               	rrf	___lldiv@divisor+2,f
  5625  0F8B  0CF3               	rrf	___lldiv@divisor+1,f
  5626  0F8C  0CF2               	rrf	___lldiv@divisor,f
  5627  0F8D  3EFF               	addlw	-1
  5628  0F8E  1D03               	skipz
  5629  0F8F  2F88               	goto	u1255
  5630  0F90  3001               	movlw	1
  5631  0F91  02A5               	subwf	___lldiv@counter,f
  5632  0F92  1D03               	btfss	3,2
  5633  0F93  2F5F               	goto	l3164
  5634  0F94                     l3176:	
  5635  0F94  0824               	movf	___lldiv@quotient+3,w
  5636  0F95  00F5               	movwf	?___lldiv+3
  5637  0F96  0823               	movf	___lldiv@quotient+2,w
  5638  0F97  00F4               	movwf	?___lldiv+2
  5639  0F98  0822               	movf	___lldiv@quotient+1,w
  5640  0F99  00F3               	movwf	?___lldiv+1
  5641  0F9A  0821               	movf	___lldiv@quotient,w
  5642  0F9B  00F2               	movwf	?___lldiv
  5643  0F9C  0008               	return
  5644  0F9D                     __end_of___lldiv:	
  5645                           
  5646                           	psect	text31
  5647  0C50                     __ptext31:	
  5648 ;; *************** function _ISR *****************
  5649 ;; Defined at:
  5650 ;;		line 93 in file "main_Master.c"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;		None
  5653 ;; Auto vars:     Size  Location     Type
  5654 ;;		None
  5655 ;; Return value:  Size  Location     Type
  5656 ;;                  1    wreg      void 
  5657 ;; Registers used:
  5658 ;;		wreg, status,2, status,0
  5659 ;; Tracked objects:
  5660 ;;		On entry : 0/0
  5661 ;;		On exit  : 0/0
  5662 ;;		Unchanged: 0/0
  5663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5664 ;;      Params:         0       0       0       0       0
  5665 ;;      Locals:         0       0       0       0       0
  5666 ;;      Temps:          2       0       0       0       0
  5667 ;;      Totals:         2       0       0       0       0
  5668 ;;Total ram usage:        2 bytes
  5669 ;; Hardware stack levels used:    1
  5670 ;; This function calls:
  5671 ;;		Nothing
  5672 ;; This function is called by:
  5673 ;;		Interrupt level 1
  5674 ;; This function uses a non-reentrant model
  5675 ;;
  5676                           
  5677                           
  5678                           ;psect for function _ISR
  5679  0C50                     _ISR:	
  5680                           
  5681                           ;main_Master.c: 94:     if (INTCONbits.RBIF == 1 && INTCONbits.RBIE == 1){
  5682  0C50  180B               	btfsc	11,0	;volatile
  5683  0C51  1D8B               	btfss	11,3	;volatile
  5684  0C52  2C5A               	goto	i1l97
  5685                           
  5686                           ;main_Master.c: 95:         INTCONbits.RBIF = 0;
  5687  0C53  100B               	bcf	11,0	;volatile
  5688                           
  5689                           ;main_Master.c: 96:         if (banderaBoton == 0){
  5690  0C54  087B               	movf	_banderaBoton,w
  5691  0C55  1D03               	btfss	3,2
  5692  0C56  2C5A               	goto	i1l97
  5693                           
  5694                           ;main_Master.c: 97:             banderaBoton = 1;
  5695  0C57  01FB               	clrf	_banderaBoton
  5696  0C58  0AFB               	incf	_banderaBoton,f
  5697                           
  5698                           ;main_Master.c: 98:             INTCONbits.RBIE = 0;
  5699  0C59  118B               	bcf	11,3	;volatile
  5700  0C5A                     i1l97:	
  5701  0C5A  0871               	movf	??_ISR+1,w
  5702  0C5B  008A               	movwf	10
  5703  0C5C  0E70               	swapf	??_ISR^(0+4294967168),w
  5704  0C5D  0083               	movwf	3
  5705  0C5E  0EFE               	swapf	126,f
  5706  0C5F  0E7E               	swapf	126,w
  5707  0C60  0009               	retfie
  5708  0C61                     __end_of_ISR:	
  5709  007E                     btemp	set	126	;btemp
  5710  007E                     wtemp0	set	126
  5711                           
  5712                           	psect	intentry
  5713  0004                     __pintentry:	
  5714                           ;incstack = 0
  5715                           ; Regs used in _ISR: [wreg+status,2+status,0]
  5716                           
  5717  0004                     interrupt_function:	
  5718  007E                     saved_w	set	btemp
  5719  0004  00FE               	movwf	btemp
  5720  0005  0E03               	swapf	3,w
  5721  0006  00F0               	movwf	??_ISR
  5722  0007  080A               	movf	10,w
  5723  0008  00F1               	movwf	??_ISR+1
  5724  0009  120A  158A  2C50   	ljmp	_ISR


Data Sizes:
    Strings     92
    Constant    32
    Data        6
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     28      45
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Create_Char@chardata	PTR const unsigned char  size(1) Largest target is 8
		 -> gota(CODE[8]), termometro(CODE[8]), arrowr(CODE[8]), atilde(CODE[8]), 

    LCD_Write_String@a	PTR unsigned char  size(1) Largest target is 17
		 -> STR_14(CODE[6]), STR_13(CODE[4]), STR_12(CODE[6]), STR_11(CODE[13]), 
		 -> STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[13]), STR_7(CODE[4]), 
		 -> STR_6(CODE[3]), STR_5(CODE[9]), STR_4(CODE[3]), STR_3(CODE[17]), 
		 -> STR_2(CODE[10]), STR_1(CODE[3]), 

    sp__uint_to_array	PTR unsigned int  size(1) Largest target is 6
		 -> uint_to_array@resultado(BANK0[6]), 

    temp_array	PTR unsigned int  size(1) Largest target is 6
		 -> NULL(NULL[0]), uint_to_array@resultado(BANK0[6]), 


Critical Paths under _main in COMMON

    _pressBoton2->_LCD_clear
    _pressBoton1->_LCD_clear
    _mostrarLCD->_LCD_Set_Cursor
    _uint_to_array->___awdiv
    _display_Uhrzeit->_LCD_Set_Cursor
    _display_Datum->_LCD_Set_Cursor
    ___awdiv->___wmul
    _LCD_Write_String->_LCD_Write_Character
    _LCD_Set_Cursor->_LCD_Cmd
    _get_Time->_BCD_a_DEC
    _BCD_a_DEC->___bmul
    _get_Temp->_I2C_Master_Read
    _LCD_init->_LCD_Cmd
    _LCD_clear->_LCD_Cmd
    _LCD_Create_Char->_LCD_Cmd
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_mostrarLCD
    _mostrarLCD->_uint_to_array
    _uint_to_array->___awdiv
    _display_Uhrzeit->___awdiv
    _display_Datum->___awdiv
    _SetUp->_I2C_Master_Init
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   27749
                                             27 BANK0      1     1      0
                              _SetUp
                           _get_Temp
                           _get_Time
                         _mostrarLCD
                        _pressBoton1
                        _pressBoton2
 ---------------------------------------------------------------------------------
 (1) _pressBoton2                                          2     2      0      22
                                              7 COMMON     2     2      0
                          _LCD_clear
 ---------------------------------------------------------------------------------
 (1) _pressBoton1                                          2     2      0      22
                                              7 COMMON     2     2      0
                          _LCD_clear
 ---------------------------------------------------------------------------------
 (1) _mostrarLCD                                           4     4      0   16399
                                             23 BANK0      4     4      0
                     _LCD_Set_Cursor
                _LCD_Write_Character
                   _LCD_Write_String
                      _display_Datum
                    _display_Uhrzeit
                      _uint_to_array
                       _uint_to_char
 ---------------------------------------------------------------------------------
 (2) _uint_to_char                                         4     4      0      62
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _uint_to_array                                       15    15      0    2987
                                              8 BANK0     15    15      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     548
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _display_Uhrzeit                                     11    10      1    5306
                                              8 BANK0     11    10      1
                     _LCD_Set_Cursor
                _LCD_Write_Character
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _display_Datum                                       11    10      1    5880
                                              8 BANK0     11    10      1
                     _LCD_Set_Cursor
                _LCD_Write_Character
                   _LCD_Write_String
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1360
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    2065
                                              8 COMMON     1     1      0
                                              0 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_String                                     3     3      0     574
                                              4 COMMON     3     3      0
                _LCD_Write_Character
 ---------------------------------------------------------------------------------
 (3) _LCD_Set_Cursor                                       5     4      1    1503
                                              5 COMMON     5     4      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _get_Time                                             1     1      0    5168
                                              0 BANK0      1     1      0
                          _BCD_a_DEC
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _BCD_a_DEC                                            4     4      0     212
                                              6 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     168
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _get_Temp                                             3     3      0    4993
                                              8 COMMON     1     1      0
                                              0 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    3811
                                              2 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2    1145
                                              2 COMMON     6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetUp                                                1     1      0    1145
                                             14 BANK0      1     1      0
                    _I2C_Master_Init
                    _LCD_Create_Char
                          _LCD_clear
                           _LCD_init
                         _OSC_config
 ---------------------------------------------------------------------------------
 (2) _OSC_config                                           4     0      4      98
                                              2 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (2) _LCD_init                                             2     2      0      22
                                              5 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            2     2      0      22
                                              5 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Create_Char                                      4     3      1     461
                                              5 COMMON     4     3      1
                            _LCD_Cmd
                _LCD_Write_Character
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_Character                                  2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _LCD_Cmd                                              3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     542
                                              6 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     421
                                              2 COMMON     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SetUp
     _I2C_Master_Init
       ___lldiv
     _LCD_Create_Char
       _LCD_Cmd
       _LCD_Write_Character
     _LCD_clear
       _LCD_Cmd
     _LCD_init
       _LCD_Cmd
     _OSC_config
   _get_Temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_Time
     _BCD_a_DEC
       ___bmul
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _mostrarLCD
     _LCD_Set_Cursor
       _LCD_Cmd
     _LCD_Write_Character
     _LCD_Write_String
       _LCD_Write_Character
     _display_Datum
       _LCD_Set_Cursor
         _LCD_Cmd
       _LCD_Write_Character
       _LCD_Write_String
         _LCD_Write_Character
       ___awdiv
         ___wmul (ARG)
       ___awmod
     _display_Uhrzeit
       _LCD_Set_Cursor
         _LCD_Cmd
       _LCD_Write_Character
       ___awdiv
         ___wmul (ARG)
       ___awmod
     _uint_to_array
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _uint_to_char
   _pressBoton1
     _LCD_clear
       _LCD_Cmd
   _pressBoton2
     _LCD_clear
       _LCD_Cmd

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1C      2D       5       56.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      39      12        0.0%
ABS                  0      0      39       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Mar 08 17:56:45 2020

                           pc 0002                ___bmul@product 0074       __end_of_LCD_Create_Char 0D1C  
                 __CFG_CP$OFF 0000                  ___awdiv@sign 0025            __size_of_BCD_a_DEC 0016  
                          fsr 0004           ___wmul@multiplicand 0074            mostrarLCD@pantalla 0039  
                         l232 06F7                           l250 0D3F                           l251 0D42  
                         l426 0C92                           _GIE 005F                  __CFG_CPD$OFF 0000  
                         _ISR 0C50                           u655 0C93                           u905 0EB1  
                         u665 0C9A                           u925 0EC2                           u935 0ECB  
                         u965 0CF8       __end_of_display_Uhrzeit 0560                           _dia 004A  
                         _mes 0048                           _min 004C                           _seg 0045  
                _uint_to_char 0F9D                           fsr0 0004                           indf 0000  
                ___awmod@sign 0078                ?_display_Datum 0028  __size_of_LCD_Write_Character 0010  
             __end_of_LCD_Cmd 0DA7                  __CFG_LVP$OFF 0000                          ?_ISR 0070  
              _LCD_Set_Cursor 0D48                          l2102 0C8A                          l2120 0C69  
                        l2116 0C63                          l2204 0EA1                          l2230 0EDD  
                        l2222 0ECA                          l2240 056D                          l2080 0D5E  
                        l2072 0D4A                          l2216 0EAE                          l2208 0EA8  
                        l2250 0590                          l2242 0574                          l2082 0D63  
                        l2218 0EBC                          l2226 0ED5                          l2252 0595  
                        l2244 057B                          l2236 0561                          l2076 0D54  
                        l3220 0F38                          l3212 0F25                          l3204 0F01  
                        l2246 0582                          l2238 0566                          l2254 059C  
                        l2094 0CAC                          l3206 0F0F                          l2248 0589  
                        l3216 0F30                          l2440 0FA3                          l3162 0F4F  
                        l2450 0FAD                          l2442 0FA5                          l3172 0F87  
                        l3164 0F5F                          l2460 0FB7                          l2452 0FAF  
                        l2444 0FA7                          l2436 0F9F                          l3420 0351  
                        l3404 02F7                          l2358 0D06                          l2462 0FB9  
                        l2454 0FB1                          l2446 0FA9                          l2438 0FA1  
                        l2470 0FC4                          l3176 0F94                          l2464 0FBB  
                        l2456 0FB3                          l2448 0FAB                          l2472 0FFE  
                        l3432 038A                          l3194 0EF9                          l2466 0FBD  
                        l2458 0FB5                          l3434 0399                          l3188 0EEE  
                        l2468 0FBF                          l3364 0212                          l3390 029D  
                        l3366 0233                          l2656 0E03                          l2680 0E38  
                        l3448 0CD0                          l3378 025E                          l3900 05A6  
                        l3396 02C7                          l3910 05D8                          l3902 05B0  
                        l2686 0E3C                          l3912 05E2                          l3904 05BA  
                        l3914 05EC                          l3906 05C4                          l3908 05CE  
                        l3880 0D6B                          l3890 05C9                          l3882 05A1  
                        l3892 05D3                          l3884 05AB                          l3876 03A1  
                        l3894 05DD                          l3886 05B5                          l3878 0FCC  
                        l3896 05E7                          l3888 05BF                          l3898 05F1  
                        STR_1 0778                          STR_2 0751                          STR_3 0726  
                        STR_4 0778                          STR_5 075B                          STR_6 077B  
                        STR_7 0774                          STR_8 0737                          STR_9 077E  
                        u1005 07F5                          u1215 0F53                          u1305 0F04  
                        u1235 0F61                          _IOCB 0096                          u1245 0F76  
                        u1325 0F10                          u1255 0F88                          u1335 0F1C  
                        u1345 0F26                          u1507 06C7                          u1427 0E27  
                        u1380 0613                          u1517 06D1                          u1437 0E47  
                        u1375 0DB9                          u1607 0DA1                          u1527 06DD  
                        u1447 0DF0                          u1537 06EA                          u1457 0E0E  
                        u1547 06F4                          u1467 0695                          u1557 0C82  
                        u1477 06A4                          u1567 0C49                          u1487 06B1  
                        u1577 0D7C                          u1497 06BC                          u1587 0D88  
                        u1597 0D95                          _PEIE 005E                          i1l97 0C5A  
                        _WPUB 0095                  __CFG_WRT$OFF 0000             ?_LCD_Write_String 0070  
                        _jahr 0047                          _main 0CCB                          _gota 0706  
                        _hora 004B                          btemp 007E                 _uint_to_array 060C  
                        start 000C            ??_LCD_Write_String 0074                 __CFG_IESO$OFF 0000  
          __size_of_LCD_clear 0016             ___bmul@multiplier 0075                         ??_ISR 0070  
            ?_I2C_Master_Init 0026              ?_I2C_Master_Read 0072              ?_I2C_Master_Wait 0070  
            ?_I2C_Master_Stop 0070              __end_of_LCD_init 06F7                         ?_main 0070  
             __end_of___awdiv 0F3D                         STR_10 0780                         STR_11 0744  
                       STR_12 076A                         STR_13 0770                         STR_14 0764  
               __CFG_WDTE$OFF 0000               __end_of___awmod 0EE2            uint_to_char@numChr 0075  
             __end_of___lldiv 0F9D               ___awdiv@divisor 0020            uint_to_char@numero 0074  
             ___awdiv@counter 0024                         _PORTD 0008                         _TRISB 0086  
                       _TRISD 0088                         _SSPIE 0463                         _SSPIF 0063  
              __CFG_FCMEN$OFF 0000        __end_of_LCD_Set_Cursor 0D74                         _SetUp 0782  
                       _datum 0049                __CFG_BOREN$OFF 0000                   ?_OSC_config 0072  
                       pclath 000A             __end_of_BCD_a_DEC 0800                ?_uint_to_array 0070  
                       status 0003                         wtemp0 007E                __CFG_MCLRE$OFF 0000  
             __initialization 000F                  __end_of_main 0CF0                  __end_of_gota 070E  
            ?_LCD_Create_Char 0075                        ??_main 003B                     ??_LCD_Cmd 0072  
             ??_display_Datum 0029              ?_display_Uhrzeit 0028             ?_I2C_Master_Start 0070  
           ?_I2C_Master_Write 0072             __end_of_LCD_clear 0C88                        ?_SetUp 0070  
             ?_LCD_Set_Cursor 0075            ??_I2C_Master_Start 0072            ??_I2C_Master_Write 0074  
                _banderaPUSH1 007A                  _banderaPUSH2 0042              ___awdiv@dividend 0022  
                      _ANSELH 0189                  _banderaBoton 007B                        _SSPADD 0093  
                      _TRISC0 0438                        _TRISC1 0439                        _TRISC3 043B  
                      _TRISC4 043C            uint_to_array@F1348 003C                        _SSPCON 0014  
                      _SSPBUF 0013   LCD_Write_Character@caracter 0073                __CFG_PWRTE$OFF 0000  
            __end_of_get_Temp 0E97              __end_of_get_Time 020E                        ___bmul 0C61  
                      ___wmul 0C88                     ??___awdiv 0078                     ??___awmod 0076  
                   ??___lldiv 0020                        _atilde 0716                        _arrowr 071E  
                      _estado 0046              ___awdiv@quotient 0026               ___awmod@divisor 0072  
         __size_of_OSC_config 00AC               ___awmod@counter 0077                  ?_pressBoton1 0070  
                ?_pressBoton2 0070                        saved_w 007E               ??_uint_to_array 0028  
     __end_of__initialization 003E                     ?_LCD_init 0070           ___bmul@multiplicand 0072  
              __pcstackCOMMON 0070                 __end_of_SetUp 07EA           _LCD_Write_Character 0C40  
                __pidataBANK0 0C24          display_Datum@columna 0028                _OPTION_REGbits 0081  
                     ??_SetUp 002E          ?_LCD_Write_Character 0070                LCD_Cmd@comando 0074  
                  __pbssBANK0 003C     LCD_Set_Cursor@corrimiento 0079                    ??_LCD_init 0075  
                  __pmaintext 0CCB                       ?___bmul 0072                       ?___wmul 0072  
                  __pintentry 0004     __size_of_LCD_Write_String 0022          OSC_config@frecuencia 0072  
         display_Uhrzeit@fila 002C                       _LCD_Cmd 0D74         ??_LCD_Write_Character 0072  
                   ?_get_Temp 0070                     ?_get_Time 0070                       _SSPCON2 0091  
                     _SSPSTAT 0094                    __stringtab 0700                  ??_OSC_config 0076  
                   _BCD_a_DEC 07EA        uint_to_array@resultado 002F               __size_of___bmul 0011  
                     ___awdiv 0EE2                       ___awmod 0E97                       ___lldiv 0F3D  
             __size_of___wmul 0021             display_Datum@fila 002C              ??_LCD_Set_Cursor 0076  
                     __ptext1 0E15                       __ptext2 0DDD                       __ptext3 020E  
                     __ptext4 0F9D                       __ptext5 060C                       __ptext6 0C88  
                     __ptext7 048E                       __ptext8 03B6                       __ptext9 0E97  
          __end_of_OSC_config 060C                  __size_of_ISR 0011           uint_to_array@numero 0036  
            ___awmod@dividend 0074      __size_of_I2C_Master_Init 0036      __size_of_I2C_Master_Read 002C  
    __size_of_I2C_Master_Wait 0009      __size_of_I2C_Master_Stop 0007          __size_of_pressBoton1 0038  
        __size_of_pressBoton2 003B                    ??_get_Temp 0078                    ??_get_Time 0020  
                   _LCD_clear 0C72          end_of_initialization 003E     __size_of_I2C_Master_Start 0007  
   __size_of_I2C_Master_Write 0008               ___lldiv@divisor 0072                    ?_BCD_a_DEC 0070  
             ___lldiv@counter 0025              I2C_Master_Init@c 0026              I2C_Master_Read@a 0072  
                  _temp_array 0043                    _mostrarLCD 020E                     _PORTBbits 0006  
                   _PORTCbits 0007                    _termometro 070E      __size_of_LCD_Create_Char 002C  
                   _TRISCbits 0087         __end_of_display_Datum 048E                    ?_LCD_clear 0070  
           LCD_Write_String@a 0076             LCD_Write_String@n 0074      __size_of_display_Uhrzeit 00D2  
           __size_of_LCD_init 0066                __end_of___bmul 0C72         LCD_Set_Cursor@columna 0075  
              __end_of___wmul 0CA9              _LCD_Write_String 0CA9                __end_of_atilde 071E  
              __end_of_arrowr 0726                 ?_uint_to_char 0070           start_initialization 000F  
                 __end_of_ISR 0C61               get_Temp@TempMSB 0021             ??_I2C_Master_Init 002A  
           ??_I2C_Master_Read 0074             ??_I2C_Master_Wait 0072         __end_of_uint_to_array 0691  
           ??_I2C_Master_Stop 0072      __CFG_FOSC$INTRC_NOCLKOUT 0000                   ??_BCD_a_DEC 0076  
                    ??___bmul 0073       LCD_Create_Char@chardata 0075                      ??___wmul 0076  
                 ?_mostrarLCD 0070                   __pdataBANK0 0047               BCD_a_DEC@numBCD 0079  
              ??_uint_to_char 0072                      ?_LCD_Cmd 0070               mostrarLCD@signo 003A  
                 __pbssCOMMON 007A                     ___latbits 0002                 __pcstackBANK0 0020  
         display_Datum@jahr_d 0032           display_Datum@jahr_u 0031                   ??_LCD_clear 0075  
           __size_of_get_Temp 0047             __size_of_get_Time 01CC             ??_LCD_Create_Char 0076  
            _I2C_Master_Start 0C2A              _I2C_Master_Write 0C38         uint_to_array@centenas 0035  
           ??_display_Uhrzeit 0029                      ?___awdiv 0020                      ?___awmod 0072  
                    ?___lldiv 0072                     __pstrings 0700   __end_of_LCD_Write_Character 0C50  
              __size_of_SetUp 0068          display_Uhrzeit@Uhr_d 0032          display_Uhrzeit@Uhr_u 0031  
         __size_of_mostrarLCD 01A8          display_Uhrzeit@min_d 0030          display_Uhrzeit@min_u 002F  
        display_Uhrzeit@seg_d 002E          display_Uhrzeit@seg_u 002D             interrupt_function 0004  
              ___wmul@product 0076                      _LCD_init 0691              LCD_Create_Char@n 0078  
                 __stringbase 0705             ___wmul@multiplier 0072                 ??_pressBoton1 0077  
               ??_pressBoton2 0077              __size_of_LCD_Cmd 0033           I2C_Master_Read@temp 0076  
    __end_of_LCD_Write_String 0CCB          __end_of_uint_to_char 1000        LCD_Create_Char@charnum 0077  
            __size_of___awdiv 005B              __size_of___awmod 004B              __size_of___lldiv 0060  
          display_Datum@dia_d 002E            display_Datum@dia_u 002D            __end_of__stringtab 0706  
          display_Datum@mes_d 0030            display_Datum@mes_u 002F               _I2C_Master_Init 0DA7  
             _I2C_Master_Read 0D1C          uint_to_array@decenas 002E               _I2C_Master_Wait 06F7  
             _I2C_Master_Stop 0C31                      __ptext10 0EE2                      __ptext11 0CA9  
                    __ptext20 0D1C                      __ptext12 0D48                      __ptext21 06F7  
                    __ptext13 0042                      __ptext30 0F3D                      __ptext22 0782  
                    __ptext14 07EA                      __ptext31 0C50                      __ptext23 0560  
                    __ptext15 0C61                      __ptext24 0691                      __ptext16 0E50  
                    __ptext25 0C72                      __ptext17 0C38                      __ptext26 0CF0  
                    __ptext18 0C31                      __ptext27 0C40                      __ptext19 0C2A  
                    __ptext28 0D74                      __ptext29 0DA7                      _get_Temp 0E50  
                    _get_Time 0042             __CFG_BOR4V$BOR40V 0000       __size_of_LCD_Set_Cursor 002C  
         __end_of_pressBoton1 0E15           __end_of_pressBoton2 0E50                 __size_of_main 0025  
      display_Uhrzeit@columna 0028        __size_of_display_Datum 00D8                  ??_mostrarLCD 0037  
         LCD_Set_Cursor@linea 0078               _LCD_Create_Char 0CF0      __end_of_I2C_Master_Start 0C31  
    __end_of_I2C_Master_Write 0C40                    _INTCONbits 000B               _display_Uhrzeit 048E  
                    intlevel1 0000            __end_of_mostrarLCD 03B6              ___lldiv@dividend 0076  
                   stringcode 0700                    _OSCCONbits 008F            __end_of_termometro 0716  
     __end_of_I2C_Master_Init 0DDD       __end_of_I2C_Master_Read 0D48       __end_of_I2C_Master_Wait 0700  
     __end_of_I2C_Master_Stop 0C38                   _temperatura 0044        __size_of_uint_to_array 0085  
            ___lldiv@quotient 0021             I2C_Master_Write@d 0072                   _pressBoton1 0DDD  
                 _pressBoton2 0E15                      stringdir 0700                      stringtab 0700  
                 _SSPCON2bits 0091                 _display_Datum 03B6         __size_of_uint_to_char 0063  
                  _OSC_config 0560  
